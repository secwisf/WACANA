Traceback (most recent call last):
  File "/wasai/bug_analyzer.py", line 576, in get_best_tx
    r,states=vm.exec_by_address(vm.module_instance.funcaddrs[action_to_func_id[action_name]], params, init_constraints)
  File "wana.py", line 192, in exec_by_address
    r = sym_exec.call(self.module_instance, address, self.store, stack, init_constraints)
  File "/wasai/sym_exec.py", line 580, in call
    return wasmfunc_call(module, address, store, stack)
  File "/wasai/sym_exec.py", line 465, in wasmfunc_call
    r, new_stack, all_pc_traces = exec_expr(store, frame, stack, f.code.expr, -1)
  File "/wasai/sym_exec.py", line 1288, in exec_expr
    r,call_pc_traces= fake_call(module, module.funcaddrs[i.immediate_arguments], store, stack, m)
  File "/wasai/sym_exec.py", line 615, in fake_call
    r = wasmfunc_call(module, address, store, stack)
  File "/wasai/sym_exec.py", line 465, in wasmfunc_call
    r, new_stack, all_pc_traces = exec_expr(store, frame, stack, f.code.expr, -1)
  File "/wasai/sym_exec.py", line 1288, in exec_expr
    r,call_pc_traces= fake_call(module, module.funcaddrs[i.immediate_arguments], store, stack, m)
  File "/wasai/sym_exec.py", line 615, in fake_call
    r = wasmfunc_call(module, address, store, stack)
  File "/wasai/sym_exec.py", line 465, in wasmfunc_call
    r, new_stack, all_pc_traces = exec_expr(store, frame, stack, f.code.expr, -1)
  File "/wasai/sym_exec.py", line 842, in exec_expr
    ls = [f'{i}: {bin_format.valtype[l.valtype][0]} {l.n}' for i, l in enumerate(frame.locals)]
  File "/wasai/sym_exec.py", line 842, in <listcomp>
    ls = [f'{i}: {bin_format.valtype[l.valtype][0]} {l.n}' for i, l in enumerate(frame.locals)]
AttributeError: 'Label' object has no attribute 'valtype'

2023/12/27 13:56:38      Type[0] ()
2023/12/27 13:56:38      Type[1] i32, i32, i32 -> i32
2023/12/27 13:56:38      Type[2] i32, i64, i32 -> i64
2023/12/27 13:56:38      Type[3] (i32, i32, i32, i32)
2023/12/27 13:56:38      Type[4]  -> i32
2023/12/27 13:56:38      Type[5] (i32, i32)
2023/12/27 13:56:38      Type[6] i32, i32 -> i32
2023/12/27 13:56:38      Type[7] (i32, f32)
2023/12/27 13:56:38      Type[8] (i32, i64, i64, i64, i64)
2023/12/27 13:56:38      Type[9] (i32, f64)
2023/12/27 13:56:38      Type[10] i64, i64, i64, i64 -> i32
2023/12/27 13:56:38      Type[11] i64, i64 -> f64
2023/12/27 13:56:38      Type[12] i64, i64 -> f32
2023/12/27 13:56:38      Type[13] (i64)
2023/12/27 13:56:38      Type[14] i32, i32 -> i64
2023/12/27 13:56:38      Type[15]  -> i64
2023/12/27 13:56:38      Type[16] (i32, i64)
2023/12/27 13:56:38      Type[17] i64, i64, i64, i64, i32, i32 -> i32
2023/12/27 13:56:38      Type[18] (i32, i64, i32, i32)
2023/12/27 13:56:38      Type[19] (i32)
2023/12/27 13:56:38      Type[20] (i64, i64, i64)
2023/12/27 13:56:38      Type[21] i32 -> i32
2023/12/27 13:56:38      Type[22] i32, i32, i32, i64 -> i64
2023/12/27 13:56:38      Type[23] i32, i32, i32 -> i64
2023/12/27 13:56:38      Type[24] f64, i32 -> f64
2023/12/27 13:56:38      Type[25] i64, i64 -> i32
2023/12/27 13:56:38      Type[26] f64 -> f64
2023/12/27 13:56:38      Type[27] (i32, i64, i64, i32)
2023/12/27 13:56:38      Type[28] i32, i32 -> f32
2023/12/27 13:56:38      Type[29] i32, i32 -> f64
2023/12/27 13:56:38      Type[30] (i32, i32, i32)
2023/12/27 13:56:38      Type[31] i64, i32 -> i32
2023/12/27 13:56:38      Type[32] i32, i32, i32, i32, i32 -> i32
2023/12/27 13:56:38      Type[33] i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 -> i32
2023/12/27 13:56:38      Type[34] i32, i32, i32, i32 -> i32
2023/12/27 13:56:38      Type[35] (i32, i32, i32, i32, i32, i32, i32, i32)
2023/12/27 13:56:38      Type[36] (i64, i64)
2023/12/27 13:56:38      Type[37] (i32, i64, i32, i32, i32, i32, i32)
2023/12/27 13:56:38      Type[38] (i32, i32, i64, i32)
2023/12/27 13:56:38    Import[0] ..env.action_data_size -> Function[4]
2023/12/27 13:56:38    Import[1] ..env.eosio_assert -> Function[5]
2023/12/27 13:56:38    Import[2] ..env.memset -> Function[1]
2023/12/27 13:56:38    Import[3] ..env.memmove -> Function[1]
2023/12/27 13:56:38    Import[4] ..env.read_action_data -> Function[6]
2023/12/27 13:56:38    Import[5] ..env.memcpy -> Function[1]
2023/12/27 13:56:38    Import[6] ..env.abort -> Function[0]
2023/12/27 13:56:38    Import[7] ..env.__extendsftf2 -> Function[7]
2023/12/27 13:56:38    Import[8] ..env.__multf3 -> Function[8]
2023/12/27 13:56:38    Import[9] ..env.__floatsitf -> Function[5]
2023/12/27 13:56:38    Import[10] ..env.__addtf3 -> Function[8]
2023/12/27 13:56:38    Import[11] ..env.__extenddftf2 -> Function[9]
2023/12/27 13:56:38    Import[12] ..env.__getf2 -> Function[10]
2023/12/27 13:56:38    Import[13] ..env.__floatunsitf -> Function[5]
2023/12/27 13:56:38    Import[14] ..env.__divtf3 -> Function[8]
2023/12/27 13:56:38    Import[15] ..env.__eqtf2 -> Function[10]
2023/12/27 13:56:38    Import[16] ..env.__letf2 -> Function[10]
2023/12/27 13:56:38    Import[17] ..env.__netf2 -> Function[10]
2023/12/27 13:56:38    Import[18] ..env.__subtf3 -> Function[8]
2023/12/27 13:56:38    Import[19] ..env.__trunctfdf2 -> Function[11]
2023/12/27 13:56:38    Import[20] ..env.__trunctfsf2 -> Function[12]
2023/12/27 13:56:38    Import[21] ..env.prints_l -> Function[5]
2023/12/27 13:56:38    Import[22] ..env.require_auth -> Function[13]
2023/12/27 13:56:38    Import[23] ..env.db_find_i64 -> Function[10]
2023/12/27 13:56:38    Import[24] ..env.db_next_i64 -> Function[6]
2023/12/27 13:56:38    Import[25] ..env.set_blockchain_parameters_packed -> Function[5]
2023/12/27 13:56:38    Import[26] ..env.get_blockchain_parameters_packed -> Function[6]
2023/12/27 13:56:38    Import[27] ..env.set_proposed_producers -> Function[14]
2023/12/27 13:56:38    Import[28] ..env.current_time -> Function[15]
2023/12/27 13:56:38    Import[29] ..env.get_active_producers -> Function[6]
2023/12/27 13:56:38    Import[30] ..env.eosio_assert_code -> Function[16]
2023/12/27 13:56:38    Import[31] ..env.current_receiver -> Function[15]
2023/12/27 13:56:38    Import[32] ..env.db_get_i64 -> Function[1]
2023/12/27 13:56:38    Import[33] ..env.db_store_i64 -> Function[17]
2023/12/27 13:56:38    Import[34] ..env.db_update_i64 -> Function[18]
2023/12/27 13:56:38    Import[35] ..env.db_remove_i64 -> Function[19]
2023/12/27 13:56:38  Function[0] func=36 sig=0
2023/12/27 13:56:38  Function[1] func=37 sig=20
2023/12/27 13:56:38  Function[2] func=38 sig=21
2023/12/27 13:56:38  Function[3] func=39 sig=6
2023/12/27 13:56:38  Function[4] func=40 sig=19
2023/12/27 13:56:38  Function[5] func=41 sig=0
2023/12/27 13:56:38  Function[6] func=42 sig=4
2023/12/27 13:56:38  Function[7] func=43 sig=6
2023/12/27 13:56:38  Function[8] func=44 sig=1
2023/12/27 13:56:38  Function[9] func=45 sig=21
2023/12/27 13:56:38  Function[10] func=46 sig=19
2023/12/27 13:56:38  Function[11] func=47 sig=21
2023/12/27 13:56:38  Function[12] func=48 sig=1
2023/12/27 13:56:38  Function[13] func=49 sig=1
2023/12/27 13:56:38  Function[14] func=50 sig=1
2023/12/27 13:56:38  Function[15] func=51 sig=1
2023/12/27 13:56:38  Function[16] func=52 sig=1
2023/12/27 13:56:38  Function[17] func=53 sig=21
2023/12/27 13:56:38  Function[18] func=54 sig=1
2023/12/27 13:56:38  Function[19] func=55 sig=1
2023/12/27 13:56:38  Function[20] func=56 sig=19
2023/12/27 13:56:38  Function[21] func=57 sig=19
2023/12/27 13:56:38  Function[22] func=58 sig=4
2023/12/27 13:56:38  Function[23] func=59 sig=21
2023/12/27 13:56:38  Function[24] func=60 sig=19
2023/12/27 13:56:38  Function[25] func=61 sig=0
2023/12/27 13:56:38  Function[26] func=62 sig=21
2023/12/27 13:56:38  Function[27] func=63 sig=21
2023/12/27 13:56:38  Function[28] func=64 sig=16
2023/12/27 13:56:38  Function[29] func=65 sig=21
2023/12/27 13:56:38  Function[30] func=66 sig=22
2023/12/27 13:56:38  Function[31] func=67 sig=23
2023/12/27 13:56:38  Function[32] func=68 sig=23
2023/12/27 13:56:38  Function[33] func=69 sig=1
2023/12/27 13:56:38  Function[34] func=70 sig=1
2023/12/27 13:56:38  Function[35] func=71 sig=6
2023/12/27 13:56:38  Function[36] func=72 sig=21
2023/12/27 13:56:38  Function[37] func=73 sig=23
2023/12/27 13:56:38  Function[38] func=74 sig=1
2023/12/27 13:56:38  Function[39] func=75 sig=23
2023/12/27 13:56:38  Function[40] func=76 sig=1
2023/12/27 13:56:38  Function[41] func=77 sig=1
2023/12/27 13:56:38  Function[42] func=78 sig=24
2023/12/27 13:56:38  Function[43] func=79 sig=8
2023/12/27 13:56:38  Function[44] func=80 sig=25
2023/12/27 13:56:38  Function[45] func=81 sig=8
2023/12/27 13:56:38  Function[46] func=82 sig=26
2023/12/27 13:56:38  Function[47] func=83 sig=27
2023/12/27 13:56:38  Function[48] func=84 sig=3
2023/12/27 13:56:38  Function[49] func=85 sig=14
2023/12/27 13:56:38  Function[50] func=86 sig=28
2023/12/27 13:56:38  Function[51] func=87 sig=29
2023/12/27 13:56:38  Function[52] func=88 sig=30
2023/12/27 13:56:38  Function[53] func=89 sig=28
2023/12/27 13:56:38  Function[54] func=90 sig=1
2023/12/27 13:56:38  Function[55] func=91 sig=29
2023/12/27 13:56:38  Function[56] func=92 sig=30
2023/12/27 13:56:38  Function[57] func=93 sig=6
2023/12/27 13:56:38  Function[58] func=94 sig=6
2023/12/27 13:56:38  Function[59] func=95 sig=31
2023/12/27 13:56:38  Function[60] func=96 sig=3
2023/12/27 13:56:38  Function[61] func=97 sig=32
2023/12/27 13:56:38  Function[62] func=98 sig=3
2023/12/27 13:56:38  Function[63] func=99 sig=33
2023/12/27 13:56:38  Function[64] func=100 sig=3
2023/12/27 13:56:38  Function[65] func=101 sig=34
2023/12/27 13:56:38  Function[66] func=102 sig=1
2023/12/27 13:56:38  Function[67] func=103 sig=6
2023/12/27 13:56:38  Function[68] func=104 sig=21
2023/12/27 13:56:38  Function[69] func=105 sig=6
2023/12/27 13:56:38  Function[70] func=106 sig=1
2023/12/27 13:56:38  Function[71] func=107 sig=6
2023/12/27 13:56:38  Function[72] func=108 sig=1
2023/12/27 13:56:38  Function[73] func=109 sig=6
2023/12/27 13:56:38  Function[74] func=110 sig=6
2023/12/27 13:56:38  Function[75] func=111 sig=21
2023/12/27 13:56:38  Function[76] func=112 sig=6
2023/12/27 13:56:38  Function[77] func=113 sig=1
2023/12/27 13:56:38  Function[78] func=114 sig=6
2023/12/27 13:56:38  Function[79] func=115 sig=6
2023/12/27 13:56:38  Function[80] func=116 sig=21
2023/12/27 13:56:38  Function[81] func=117 sig=1
2023/12/27 13:56:38  Function[82] func=118 sig=1
2023/12/27 13:56:38  Function[83] func=119 sig=32
2023/12/27 13:56:38  Function[84] func=120 sig=30
2023/12/27 13:56:38  Function[85] func=121 sig=34
2023/12/27 13:56:38  Function[86] func=122 sig=1
2023/12/27 13:56:38  Function[87] func=123 sig=34
2023/12/27 13:56:38  Function[88] func=124 sig=19
2023/12/27 13:56:38  Function[89] func=125 sig=6
2023/12/27 13:56:38  Function[90] func=126 sig=6
2023/12/27 13:56:38  Function[91] func=127 sig=35
2023/12/27 13:56:38  Function[92] func=128 sig=19
2023/12/27 13:56:38  Function[93] func=129 sig=13
2023/12/27 13:56:38  Function[94] func=130 sig=19
2023/12/27 13:56:38  Function[95] func=131 sig=36
2023/12/27 13:56:38  Function[96] func=132 sig=6
2023/12/27 13:56:38  Function[97] func=133 sig=37
2023/12/27 13:56:38  Function[98] func=134 sig=6
2023/12/27 13:56:38  Function[99] func=135 sig=6
2023/12/27 13:56:38  Function[100] func=136 sig=38
2023/12/27 13:56:38  Function[101] func=137 sig=38
2023/12/27 13:56:38  Function[102] func=138 sig=5
2023/12/27 13:56:38  Function[103] func=139 sig=36
2023/12/27 13:56:38  Function[104] func=140 sig=16
2023/12/27 13:56:38  Function[105] func=141 sig=5
2023/12/27 13:56:38  Function[106] func=142 sig=5
2023/12/27 13:56:38  Function[107] func=143 sig=3
2023/12/27 13:56:38  Function[108] func=144 sig=5
2023/12/27 13:56:38  Function[109] func=145 sig=5
2023/12/27 13:56:38  Function[110] func=146 sig=5
2023/12/27 13:56:38  Function[111] func=147 sig=6
2023/12/27 13:56:38  Function[112] func=148 sig=5
2023/12/27 13:56:38     Table[0] funcref minimum=7 maximum=7
2023/12/27 13:56:38    Memory[0] minimum=1
2023/12/27 13:56:38    Global[0] var ['i32'] expr=[i32.const 8192, end]
2023/12/27 13:56:38    Global[1] const ['i32'] expr=[i32.const 12400, end]
2023/12/27 13:56:38    Global[2] const ['i32'] expr=[i32.const 12400, end]
2023/12/27 13:56:38    Export[0] apply -> Function[37]
2023/12/27 13:56:38   Element[0] <structure.ElementSegment object at 0x7fcfb800deb8>
2023/12/27 13:56:38      Code[0] func=36 locals=[]
2023/12/27 13:56:38      Code[1] func=37 locals=[]
2023/12/27 13:56:38      Code[2] func=38 locals=[i32, i32, i32]
2023/12/27 13:56:38      Code[3] func=39 locals=[i32, i32, i32]
2023/12/27 13:56:38      Code[4] func=40 locals=[]
2023/12/27 13:56:38      Code[5] func=41 locals=[i32]
2023/12/27 13:56:38      Code[6] func=42 locals=[]
2023/12/27 13:56:38      Code[7] func=43 locals=[i32, i32, i32, i32, i32, i32]
2023/12/27 13:56:38      Code[8] func=44 locals=[i32]
2023/12/27 13:56:38      Code[9] func=45 locals=[i32, i32]
2023/12/27 13:56:38      Code[10] func=46 locals=[]
2023/12/27 13:56:38      Code[11] func=47 locals=[i32, i32, i32]
2023/12/27 13:56:38      Code[12] func=48 locals=[i32, i32, i32]
2023/12/27 13:56:38      Code[13] func=49 locals=[i32, i32, i32]
2023/12/27 13:56:38      Code[14] func=50 locals=[i32]
2023/12/27 13:56:38      Code[15] func=51 locals=[i32]
2023/12/27 13:56:38      Code[16] func=52 locals=[i32]
2023/12/27 13:56:38      Code[17] func=53 locals=[i32]
2023/12/27 13:56:38      Code[18] func=54 locals=[]
2023/12/27 13:56:38      Code[19] func=55 locals=[i32, i32, i32]
2023/12/27 13:56:38      Code[20] func=56 locals=[]
2023/12/27 13:56:38      Code[21] func=57 locals=[]
2023/12/27 13:56:38      Code[22] func=58 locals=[]
2023/12/27 13:56:38      Code[23] func=59 locals=[i32]
2023/12/27 13:56:38      Code[24] func=60 locals=[]
2023/12/27 13:56:38      Code[25] func=61 locals=[i32, i32, i32]
2023/12/27 13:56:38      Code[26] func=62 locals=[i32, i32]
2023/12/27 13:56:38      Code[27] func=63 locals=[i32, i32]
2023/12/27 13:56:38      Code[28] func=64 locals=[i32, i32, i64]
2023/12/27 13:56:38      Code[29] func=65 locals=[i64, i32, i32, i32]
2023/12/27 13:56:38      Code[30] func=66 locals=[i32, i32, i32, i64, i64, i64, i64, i64, i32]
2023/12/27 13:56:38      Code[31] func=67 locals=[i32, i64]
2023/12/27 13:56:38      Code[32] func=68 locals=[i32, i64]
2023/12/27 13:56:38      Code[33] func=69 locals=[i32, i64]
2023/12/27 13:56:38      Code[34] func=70 locals=[i32, i64]
2023/12/27 13:56:38      Code[35] func=71 locals=[i32]
2023/12/27 13:56:38      Code[36] func=72 locals=[]
2023/12/27 13:56:38      Code[37] func=73 locals=[i32, i32, i64]
2023/12/27 13:56:38      Code[38] func=74 locals=[i32, i32, i32, i32, i32]
2023/12/27 13:56:38      Code[39] func=75 locals=[i32, i32, i64]
2023/12/27 13:56:38      Code[40] func=76 locals=[i32, i32, i64]
2023/12/27 13:56:38      Code[41] func=77 locals=[i32, i32, i64]
2023/12/27 13:56:38      Code[42] func=78 locals=[i32]
2023/12/27 13:56:38      Code[43] func=79 locals=[]
2023/12/27 13:56:38      Code[44] func=80 locals=[i64, i32, i32]
2023/12/27 13:56:38      Code[45] func=81 locals=[i32, i32, i32, i32, i64, i32, i64, i64, i64]
2023/12/27 13:56:38      Code[46] func=82 locals=[]
2023/12/27 13:56:38      Code[47] func=83 locals=[i32, i32]
2023/12/27 13:56:38      Code[48] func=84 locals=[i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i64, i64, i32, i64, i32, i32, i32, i32, i32, i32, f64]
2023/12/27 13:56:38      Code[49] func=85 locals=[i32, i32, i32, i32, i64]
2023/12/27 13:56:38      Code[50] func=86 locals=[i32, i64, i64, i64, f32]
2023/12/27 13:56:38      Code[51] func=87 locals=[i32, i64, i64, i64, f64]
2023/12/27 13:56:38      Code[52] func=88 locals=[i32, i64, i64, i64]
2023/12/27 13:56:38      Code[53] func=89 locals=[i32, i32, i64, i64, i32, f32]
2023/12/27 13:56:38      Code[54] func=90 locals=[i32, i32, i32, i32, i32]
2023/12/27 13:56:38      Code[55] func=91 locals=[i32, i32, i64, i64, i32, f64]
2023/12/27 13:56:38      Code[56] func=92 locals=[i32, i32, i64, i64, i32]
2023/12/27 13:56:38      Code[57] func=93 locals=[i32, i32]
2023/12/27 13:56:38      Code[58] func=94 locals=[i32, i32]
2023/12/27 13:56:38      Code[59] func=95 locals=[i64, i32, i32, i32]
2023/12/27 13:56:38      Code[60] func=96 locals=[i32]
2023/12/27 13:56:38      Code[61] func=97 locals=[i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i32, i32, i32, f64, i32, f64, f64]
2023/12/27 13:56:38      Code[62] func=98 locals=[]
2023/12/27 13:56:38      Code[63] func=99 locals=[i32, i32]
2023/12/27 13:56:38      Code[64] func=100 locals=[]
2023/12/27 13:56:38      Code[65] func=101 locals=[i32]
2023/12/27 13:56:38      Code[66] func=102 locals=[i32]
2023/12/27 13:56:38      Code[67] func=103 locals=[i32, i32]
2023/12/27 13:56:38      Code[68] func=104 locals=[i32]
2023/12/27 13:56:38      Code[69] func=105 locals=[i32, i32, i32]
2023/12/27 13:56:38      Code[70] func=106 locals=[i32]
2023/12/27 13:56:38      Code[71] func=107 locals=[]
2023/12/27 13:56:38      Code[72] func=108 locals=[i32, i32, i32, i32, i32, i32]
2023/12/27 13:56:38      Code[73] func=109 locals=[i32, i32, i32, i32]
2023/12/27 13:56:38      Code[74] func=110 locals=[i32]
2023/12/27 13:56:38      Code[75] func=111 locals=[i32, i32]
2023/12/27 13:56:38      Code[76] func=112 locals=[i32]
2023/12/27 13:56:38      Code[77] func=113 locals=[i32]
2023/12/27 13:56:38      Code[78] func=114 locals=[]
2023/12/27 13:56:38      Code[79] func=115 locals=[]
2023/12/27 13:56:38      Code[80] func=116 locals=[i32, i32, i32]
2023/12/27 13:56:38      Code[81] func=117 locals=[i32, i32, i32]
2023/12/27 13:56:38      Code[82] func=118 locals=[i32, i32, i32]
2023/12/27 13:56:38      Code[83] func=119 locals=[i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32]
2023/12/27 13:56:38      Code[84] func=120 locals=[]
2023/12/27 13:56:38      Code[85] func=121 locals=[i32, i32]
2023/12/27 13:56:38      Code[86] func=122 locals=[i32, i32, i32, i32, i32]
2023/12/27 13:56:38      Code[87] func=123 locals=[i32]
2023/12/27 13:56:38      Code[88] func=124 locals=[]
2023/12/27 13:56:38      Code[89] func=125 locals=[i32, i32, i32]
2023/12/27 13:56:38      Code[90] func=126 locals=[i32, i32, i32, i32, i32, i32]
2023/12/27 13:56:38      Code[91] func=127 locals=[i32, i32, i32]
2023/12/27 13:56:38      Code[92] func=128 locals=[]
2023/12/27 13:56:38      Code[93] func=129 locals=[]
2023/12/27 13:56:38      Code[94] func=130 locals=[]
2023/12/27 13:56:38      Code[95] func=131 locals=[i32, i32, i32, i64, i32, i32, i32]
2023/12/27 13:56:38      Code[96] func=132 locals=[i32, i32, i32, i32, i32]
2023/12/27 13:56:38      Code[97] func=133 locals=[i32, i64, i64]
2023/12/27 13:56:38      Code[98] func=134 locals=[i32, i64, i32, i32, i32, i32]
2023/12/27 13:56:38      Code[99] func=135 locals=[i32, i32, i32, i32, i32, i64]
2023/12/27 13:56:38      Code[100] func=136 locals=[i32, i32, i64, i32, i32, i32, i32, i32, i32]
2023/12/27 13:56:38      Code[101] func=137 locals=[i32, i32, i32]
2023/12/27 13:56:38      Code[102] func=138 locals=[]
2023/12/27 13:56:38      Code[103] func=139 locals=[i32, i32, i32, i32]
2023/12/27 13:56:38      Code[104] func=140 locals=[i32, i32, i64, i64, i32, i32]
2023/12/27 13:56:38      Code[105] func=141 locals=[i32, i32, i64, i32, i32, i32]
2023/12/27 13:56:38      Code[106] func=142 locals=[i32, i32, i32, i32, i32, i32, i32, i32, i32, i64]
2023/12/27 13:56:38      Code[107] func=143 locals=[i32, i32, i32, i32, i32]
2023/12/27 13:56:38      Code[108] func=144 locals=[i32, i32, i32]
2023/12/27 13:56:38      Code[109] func=145 locals=[i32, i32, i64]
2023/12/27 13:56:38      Code[110] func=146 locals=[i32, i32, i32]
2023/12/27 13:56:38      Code[111] func=147 locals=[i32, i32, i64, i32, i32]
2023/12/27 13:56:38      Code[112] func=148 locals=[i32, i32, i32, i32, i32]
2023/12/27 13:56:38      Data[0] failed to allocate pages  
2023/12/27 13:56:38      Data[1] ��������������������������������
2023/12/27 13:56:38      Data[2]     	   
            �       
2023/12/27 13:56:38      Data[3] 
   d   �  '  �� @B ���  ��
2023/12/27 13:56:38      Data[4]    5   q   
2023/12/27 13:56:38      Data[5] k�����������
2023/12/27 13:56:38      Data[6] 00010203040506070809101112131415
2023/12/27 13:56:38      Data[7]       �?      $@      Y@     @�@
2023/12/27 13:56:38      Data[8] ��    ������������
2023/12/27 13:56:38      Data[9] p#     C.UTF-8                 
2023/12/27 13:56:38      Data[10] �#                      
2023/12/27 13:56:38      Data[11] T!"K'hnopqb 
2023/12/27 13:56:38      Data[12] Illegal byte sequence Domain err
2023/12/27 13:56:38      Data[13]   �  �  �  �  �  �  �	  �
2023/12/27 13:56:38      Data[14]  error reading iterator 
2023/12/27 13:56:38      Data[15] (null) 
2023/12/27 13:56:38      Data[16] %%%s%s%s%s%s*.*%c%c cannot creat
2023/12/27 13:56:38      Data[17] # datastream attempted to write 
2023/12/27 13:56:38      Data[18] + 
2023/12/27 13:56:38      Data[19] - object passed to modify is not
2023/12/27 13:56:38      Data[20]   cannot modify objects in table
2023/12/27 13:56:38      Data[21] 0 updater cannot change primary 
2023/12/27 13:56:38      Data[22] L  jLLL j     jj    j  j
2023/12/27 13:56:38      Data[23]  
           	            
2023/12/27 13:56:38      Data[24] Record does not exist 
2023/12/27 13:56:38      Data[25] cannot pass end iterator to eras
2023/12/27 13:56:38      Data[26] cannot increment end iterator 
2023/12/27 13:56:38      Data[27] object passed to erase is not in
2023/12/27 13:56:38      Data[28] cannot erase objects in table of
2023/12/27 13:56:38      Data[29] attempt to remove object that wa
2023/12/27 13:56:38      Data[30] datastream attempted to read pas
2023/12/27 13:56:38      Data[31] get 
2023/12/27 13:56:38      Data[32] p0  
2023/12/27 13:56:38 
2023/12/27 13:56:38 i32.const 8192     [*] 0 1 not_func
2023/12/27 13:56:38 end                [*, 8192] 1 2 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 12400    [*] 0 4 not_func
2023/12/27 13:56:38 end                [*, 12400] 1 5 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 12400    [*] 0 7 not_func
2023/12/27 13:56:38 end                [*, 12400] 1 8 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 apply address: 37
2023/12/27 13:56:38 i32.const 1        [*] 0 10 not_func
2023/12/27 13:56:38 end                [*, 1] 1 11 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 8208     [*] 0 13 not_func
2023/12/27 13:56:38 end                [*, 8208] 1 14 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 8352     [*] 0 16 not_func
2023/12/27 13:56:38 end                [*, 8352] 1 17 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 8624     [*] 0 19 not_func
2023/12/27 13:56:38 end                [*, 8624] 1 20 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 8720     [*] 0 22 not_func
2023/12/27 13:56:38 end                [*, 8720] 1 23 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 8752     [*] 0 25 not_func
2023/12/27 13:56:38 end                [*, 8752] 1 26 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 8764     [*] 0 28 not_func
2023/12/27 13:56:38 end                [*, 8764] 1 29 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 8784     [*] 0 31 not_func
2023/12/27 13:56:38 end                [*, 8784] 1 32 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 8992     [*] 0 34 not_func
2023/12/27 13:56:38 end                [*, 8992] 1 35 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 9072     [*] 0 37 not_func
2023/12/27 13:56:38 end                [*, 9072] 1 38 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 9092     [*] 0 40 not_func
2023/12/27 13:56:38 end                [*, 9092] 1 41 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 9152     [*] 0 43 not_func
2023/12/27 13:56:38 end                [*, 9152] 1 44 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 9184     [*] 0 46 not_func
2023/12/27 13:56:38 end                [*, 9184] 1 47 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 9280     [*] 0 49 not_func
2023/12/27 13:56:38 end                [*, 9280] 1 50 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 11088    [*] 0 52 not_func
2023/12/27 13:56:38 end                [*, 11088] 1 53 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 11292    [*] 0 55 not_func
2023/12/27 13:56:38 end                [*, 11292] 1 56 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 11316    [*] 0 58 not_func
2023/12/27 13:56:38 end                [*, 11316] 1 59 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 11323    [*] 0 61 not_func
2023/12/27 13:56:38 end                [*, 11323] 1 62 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 11394    [*] 0 64 not_func
2023/12/27 13:56:38 end                [*, 11394] 1 65 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 11439    [*] 0 67 not_func
2023/12/27 13:56:38 end                [*, 11439] 1 68 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 11441    [*] 0 70 not_func
2023/12/27 13:56:38 end                [*, 11441] 1 71 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 11489    [*] 0 73 not_func
2023/12/27 13:56:38 end                [*, 11489] 1 74 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 11542    [*] 0 76 not_func
2023/12/27 13:56:38 end                [*, 11542] 1 77 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 11616    [*] 0 79 not_func
2023/12/27 13:56:38 end                [*, 11616] 1 80 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 11648    [*] 0 82 not_func
2023/12/27 13:56:38 end                [*, 11648] 1 83 not_func
break of path_abort or out of scope
2023/12/27 13:56:38SZH Has CHanged it!
APPLY FOUND IN 37
IMPORT 35, APPLY 37
????
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
BEGIN FUNCTION HOOK
PRE_LEN 157
MAP_LEN 157
generated 157 low-level hooks
Creating wallet: default
Save password to use in the future to unlock this wallet.
Without password imported keys will not be retrievable.
password: imported private key for: EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
 i32.const 12120    [*] 0 85 not_func
2023/12/27 13:56:38 end                [*, 12120] 1 86 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 12142    [*] 0 88 not_func
2023/12/27 13:56:38 end                [*, 12142] 1 89 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 12176    [*] 0 91 not_func
2023/12/27 13:56:38 end                [*, 12176] 1 92 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 12206    [*] 0 94 not_func
2023/12/27 13:56:38 end                [*, 12206] 1 95 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 12251    [*] 0 97 not_func
2023/12/27 13:56:38 end                [*, 12251] 1 98 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 12301    [*] 0 100 not_func
2023/12/27 13:56:38 end                [*, 12301] 1 101 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 12354    [*] 0 103 not_func
2023/12/27 13:56:38 end                [*, 12354] 1 104 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 12396    [*] 0 106 not_func
2023/12/27 13:56:38 end                [*, 12396] 1 107 not_func
break of path_abort or out of scope
2023/12/27 13:56:38 i32.const 0        [*] 0 109 not_func
2023/12/27 13:56:38 end                [*, 0] 1 110 not_func
break of path_abort or out of scope
./rt//addressbook//addressbook.abi
[-] executeCommand:: cleos create account eosio eosio.token EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
[-] executeCommand:: 1 [31mError 3050001: Account name already exists[0m
[33mError Details:
Cannot create account named eosio.token, as that name is already taken
pending console output: [0m
[-] executeCommand:: cleos set contract eosio.token ./agents/eosio.token/ -p eosio.token@active
[-] executeCommand:: 0 Reading WASM from /wasai/agents/eosio.token/eosio.token.wasm...
Skipping set code because the new code is the same as the existing code
Skipping set abi because the new abi is the same as the existing abi
no transaction is sent
[-] executeCommand:: cleos create account eosio bob EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
[-] executeCommand:: 1 [31mError 3050001: Account name already exists[0m
[33mError Details:
Cannot create account named bob, as that name is already taken
pending console output: [0m
[-] executeCommand:: cleos set account permission bob active --add-code
[-] executeCommand:: 0 ERROR: The permission 'active' already contains 'bob@eosio.code'
cleos push action eosio.token create '["eosio","20000000000000.0000 EOS"]' -p eosio.token@active
[-] executeCommand:: cleos push action eosio.token create '["eosio","20000000000000.0000 EOS"]' -p eosio.token@active
[-] executeCommand:: 1 [31mError 3050003: eosio_assert_message assertion failure[0m
[33mError Details:
assertion failure with message: token with symbol already exists
pending console output: [0m
cleos push action eosio.token issue '["eosio", "20000000000000.0000 EOS",""]' -p eosio@active
[-] executeCommand:: cleos push action eosio.token issue '["eosio", "20000000000000.0000 EOS",""]' -p eosio@active
[-] executeCommand:: 1 [31mError 3050003: eosio_assert_message assertion failure[0m
[33mError Details:
assertion failure with message: quantity exceeds available supply
pending console output: [0m
[-] executeCommand:: cleos create account eosio fake.token EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
[-] executeCommand:: 1 [31mError 3050001: Account name already exists[0m
[33mError Details:
Cannot create account named fake.token, as that name is already taken
pending console output: [0m
[-] executeCommand:: cleos create account eosio fakeosio EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
[-] executeCommand:: 1 [31mError 3050001: Account name already exists[0m
[33mError Details:
Cannot create account named fakeosio, as that name is already taken
pending console output: [0m
[-] executeCommand:: cleos set contract fake.token ./agents/eosio.token/ -p fake.token@active
[-] executeCommand:: 0 Reading WASM from /wasai/agents/eosio.token/eosio.token.wasm...
Skipping set code because the new code is the same as the existing code
Skipping set abi because the new abi is the same as the existing abi
no transaction is sent
[-] executeCommand:: cleos set account permission fake.token active --add-code
[-] executeCommand:: 0 ERROR: The permission 'active' already contains 'fake.token@eosio.code'
[-] executeCommand:: cleos set account permission fakeosio active --add-code
[-] executeCommand:: 0 ERROR: The permission 'active' already contains 'fakeosio@eosio.code'
cleos push action fake.token create '["fakeosio","200000000000000.0000 EOS"]' -p fake.token@active
[-] executeCommand:: cleos push action fake.token create '["fakeosio","200000000000000.0000 EOS"]' -p fake.token@active
[-] executeCommand:: 1 [31mError 3050003: eosio_assert_message assertion failure[0m
[33mError Details:
assertion failure with message: token with symbol already exists
pending console output: [0m
cleos push action fake.token issue '["fakeosio", "20000000000000.0000 EOS",""]' -p fakeosio@active
[-] executeCommand:: cleos push action fake.token issue '["fakeosio", "20000000000000.0000 EOS",""]' -p fakeosio@active
[-] executeCommand:: 1 [31mError 3050003: eosio_assert_message assertion failure[0m
[33mError Details:
assertion failure with message: quantity exceeds available supply
pending console output: [0m
cleos push action eosio.token transfer '["eosio","fakeosio","10000000.0000 EOS",""]' -p eosio@active
[-] executeCommand:: cleos push action eosio.token transfer '["eosio","fakeosio","10000000.0000 EOS",""]' -p eosio@active
[-] executeCommand:: 0 executed transaction: be7e803e1a33ef908901965dfa4cc4bf4f17a0d833ac131eab215481e411dd4e  128 bytes  10000 us
warn  2023-12-27T13:56:41.382 cleos     main.cpp:495                  print_result         ] 
warning: transaction executed locally, but may not be confirmed by the network yet
#   eosio.token <= eosio.token::transfer        {"from":"eosio","to":"fakeosio","quantity":"10000000.0000 EOS","memo":""}
#         eosio <= eosio.token::transfer        {"from":"eosio","to":"fakeosio","quantity":"10000000.0000 EOS","memo":""}
#      fakeosio <= eosio.token::transfer        {"from":"eosio","to":"fakeosio","quantity":"10000000.0000 EOS","memo":""}
[-] executeCommand:: cleos create account eosio testeosfrom EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
[-] executeCommand:: 1 [31mError 3050001: Account name already exists[0m
[33mError Details:
Cannot create account named testeosfrom, as that name is already taken
pending console output: [0m
[-] executeCommand:: cleos set account permission testeosfrom active --add-code
[-] executeCommand:: 0 ERROR: The permission 'active' already contains 'testeosfrom@eosio.code'
cleos push action eosio.token transfer '["eosio","testeosfrom","10000000.0000 EOS",""]' -p eosio@active
[-] executeCommand:: cleos push action eosio.token transfer '["eosio","testeosfrom","10000000.0000 EOS",""]' -p eosio@active
[-] executeCommand:: 0 executed transaction: 996d8d42efdf866d5691fdb1cf748c04755be1d9b03cc494cce97083ada84047  128 bytes  10000 us
warn  2023-12-27T13:56:41.460 cleos     main.cpp:495                  print_result         ] 
warning: transaction executed locally, but may not be confirmed by the network yet
#   eosio.token <= eosio.token::transfer        {"from":"eosio","to":"testeosfrom","quantity":"10000000.0000 EOS","memo":""}
#         eosio <= eosio.token::transfer        {"from":"eosio","to":"testeosfrom","quantity":"10000000.0000 EOS","memo":""}
#   testeosfrom <= eosio.token::transfer        {"from":"eosio","to":"testeosfrom","quantity":"10000000.0000 EOS","memo":""}
[-] executeCommand:: cleos create account eosio pokpokpokpok EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
[-] executeCommand:: 1 [31mError 3050001: Account name already exists[0m
[33mError Details:
Cannot create account named pokpokpokpok, as that name is already taken
pending console output: [0m
cleos push action eosio.token transfer '["eosio","pokpokpokpok","10000000.0000 EOS",""]' -p eosio@active
[-] executeCommand:: cleos push action eosio.token transfer '["eosio","pokpokpokpok","10000000.0000 EOS",""]' -p eosio@active
[-] executeCommand:: 0 executed transaction: ae24ca8aa63e7bd685a53d6682a9656659d352903f55e6c6b5e1ee984286b212  128 bytes  10000 us
warn  2023-12-27T13:56:41.516 cleos     main.cpp:495                  print_result         ] 
warning: transaction executed locally, but may not be confirmed by the network yet
#   eosio.token <= eosio.token::transfer        {"from":"eosio","to":"pokpokpokpok","quantity":"10000000.0000 EOS","memo":""}
#         eosio <= eosio.token::transfer        {"from":"eosio","to":"pokpokpokpok","quantity":"10000000.0000 EOS","memo":""}
#  pokpokpokpok <= eosio.token::transfer        {"from":"eosio","to":"pokpokpokpok","quantity":"10000000.0000 EOS","memo":""}
[-] executeCommand:: cleos set account permission pokpokpokpok active --add-code
[-] executeCommand:: 0 ERROR: The permission 'active' already contains 'pokpokpokpok@eosio.code'
[-] executeCommand:: cleos create account eosio atkforg EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
[-] executeCommand:: 1 [31mError 3050001: Account name already exists[0m
[33mError Details:
Cannot create account named atkforg, as that name is already taken
pending console output: [0m
[-] executeCommand:: cleos set contract atkforg ./agents/tokenlock -p atkforg@active
[-] executeCommand:: 0 Reading WASM from /wasai/agents/tokenlock/tokenlock.wasm...
Skipping set code because the new code is the same as the existing code
Skipping set abi because the new abi is the same as the existing abi
no transaction is sent
cleos push action atkforg regist '["addressbook"]' -p eosio@active
[-] executeCommand:: cleos push action atkforg regist '["addressbook"]' -p eosio@active
[-] executeCommand:: 0 executed transaction: 8c40cca466751a2c7ef10e6572c9e90d4424e1797cd9502ae9c77dec7aa00872  104 bytes  10000 us
warn  2023-12-27T13:56:41.614 cleos     main.cpp:495                  print_result         ] 
warning: transaction executed locally, but may not be confirmed by the network yet
#       atkforg <= atkforg::regist              {"uname":"addressbook"}
[-] executeCommand:: cleos set account permission atkforg active --add-code
[-] executeCommand:: 0 ERROR: The permission 'active' already contains 'atkforg@eosio.code'
[-] executeCommand:: cleos create account eosio atknoti EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
[-] executeCommand:: 1 [31mError 3050001: Account name already exists[0m
[33mError Details:
Cannot create account named atknoti, as that name is already taken
pending console output: [0m
[-] executeCommand:: cleos set contract atknoti ./agents/atknoti -p atknoti@active
[-] executeCommand:: 1 Reading WASM from /wasai/agents/atknoti/atknoti.wasm...
Skipping set code because the new code is the same as the existing code
error 2023-12-27T13:56:41.686 cleos     main.cpp:3941                 main                 ] Failed with error: Parse Error (4)
Expected '"' but read 't'
while parsing token ''
Error parsing object

[-] executeCommand:: cleos set account permission atknoti active --add-code
[-] executeCommand:: 0 ERROR: The permission 'active' already contains 'atknoti@eosio.code'
[-] executeCommand:: cleos create account eosio addressbook EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
[31mError 3050001: Account name already exists[0m
[33mError Details:
Cannot create account named addressbook, as that name is already taken
pending console output: [0m
[-] executeCommand:: cleos set account permission addressbook active --add-code
ERROR: The permission 'active' already contains 'addressbook@eosio.code'
[-] executeCommand:: cleos set contract addressbook ./rt/addressbook -p addressbook@active
Reading WASM from /wasai/rt/addressbook/addressbook.wasm...
Skipping set abi because the new abi is the same as the existing abi
Publishing contract...
executed transaction: 44fc725023c000ffeacda65c53fd21f4eaaff50633d23f7d4db77ba3bfa2ebda  173856 bytes  14271 us
warn  2023-12-27T13:56:42.273 cleos     main.cpp:495                  print_result         ] 
warning: transaction executed locally, but may not be confirmed by the network yet
#         eosio <= eosio::setcode               {"account":"addressbook","vmtype":0,"vmversion":0,"code":"0061736d0100000001df03406000017f60027f7f00...
cleos push action addressbook erase '{"user": "addressbook"}' -p addressbook@active
[-] executeCommand:: cleos push action addressbook erase '{"user": "addressbook"}' -p addressbook@active
[-] executeCommand:: 1 [31mError 3050003: eosio_assert_message assertion failure[0m
[33mError Details:
assertion failure with message: Record does not exist
pending console output: [0m
[-] logAnalyzer.processLog()::  ['log_1.txt']
[-] _processLog: 145 [4364, 'call', [139, 91, 140, 8152, 128262144, 844330339], ['I32', 'I64']] [175, 'begin_function', [140, 4294967295], []] [2316, 'call', [140, 56, 1, 0, 12120], ['I32', 'I32']]
cleos push action addressbook upsert '{"user": "addressbook", "first_name": "qGn", "last_name": "YuwipJXV", "street": "cTmI", "city": "vGHYVu", "state": "vhlFZ"}' -p addressbook@active
[-] executeCommand:: cleos push action addressbook upsert '{"user": "addressbook", "first_name": "qGn", "last_name": "YuwipJXV", "street": "cTmI", "city": "vGHYVu", "state": "vhlFZ"}' -p addressbook@active
[-] executeCommand:: 0 executed transaction: c25b6ead0d7bd9244788f8702dbbdbc5d27db51043dca316f33f4585fb716582  136 bytes  26604 us
warn  2023-12-27T13:56:42.462 cleos     main.cpp:495                  print_result         ] 
warning: transaction executed locally, but may not be confirmed by the network yet
#   addressbook <= addressbook::upsert          {"user":"addressbook","first_name":"qGn","last_name":"YuwipJXV","street":"cTmI","city":"vGHYVu","sta...
[-] logAnalyzer.processLog()::  ['log_2.txt', 'log_1.txt']
[-] _processLog: 3242 [76697868, 'call', [131, 233, 133, 8008, 128262144, 844330339, 7976, 7960, 7944, 7928, 7912], ['I32', 'I64', 'I32', 'I32', 'I32', 'I32', 'I32']] [175, 'begin_function', [133, 4294967295], []] [180, 'end_function', [37, 50], []]
[]
2023/12/27 13:56:42 i32.const 8192     [*] 0 1 not_func
2023/12/27 13:56:42 end                [*, 8192] 1 2 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12400    [*] 0 4 not_func
2023/12/27 13:56:42 end                [*, 12400] 1 5 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12400    [*] 0 7 not_func
2023/12/27 13:56:42 end                [*, 12400] 1 8 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 apply address: 37
2023/12/27 13:56:42 i32.const 1        [*] 0 10 not_func
2023/12/27 13:56:42 end                [*, 1] 1 11 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 8208     [*] 0 13 not_func
2023/12/27 13:56:42 end                [*, 8208] 1 14 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 8352     [*] 0 16 not_func
2023/12/27 13:56:42 end                [*, 8352] 1 17 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 8624     [*] 0 19 not_func
2023/12/27 13:56:42 end                [*, 8624] 1 20 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 8720     [*] 0 22 not_func
2023/12/27 13:56:42 end                [*, 8720] 1 23 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 8752     [*] 0 25 not_func
2023/12/27 13:56:42 end                [*, 8752] 1 26 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 8764     [*] 0 28 not_func
2023/12/27 13:56:42 end                [*, 8764] 1 29 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 8784     [*] 0 31 not_func
2023/12/27 13:56:42 end                [*, 8784] 1 32 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 8992     [*] 0 34 not_func
2023/12/27 13:56:42 end                [*, 8992] 1 35 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 9072     [*] 0 37 not_func
2023/12/27 13:56:42 end                [*, 9072] 1 38 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 9092     [*] 0 40 not_func
2023/12/27 13:56:42 end                [*, 9092] 1 41 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 9152     [*] 0 43 not_func
2023/12/27 13:56:42 end                [*, 9152] 1 44 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 9184     [*] 0 46 not_func
2023/12/27 13:56:42 end                [*, 9184] 1 47 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 9280     [*] 0 49 not_func
2023/12/27 13:56:42 end                [*, 9280] 1 50 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11088    [*] 0 52 not_func
2023/12/27 13:56:42 end                [*, 11088] 1 53 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11292    [*] 0 55 not_func
2023/12/27 13:56:42 end                [*, 11292] 1 56 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11316    [*] 0 58 not_func
2023/12/27 13:56:42 end                [*, 11316] 1 59 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11323    [*] 0 61 not_func
2023/12/27 13:56:42 end                [*, 11323] 1 62 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11394    [*] 0 64 not_func
2023/12/27 13:56:42 end                [*, 11394] 1 65 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11439    [*] 0 67 not_func
2023/12/27 13:56:42 end                [*, 11439] 1 68 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11441    [*] 0 70 not_func
2023/12/27 13:56:42 end                [*, 11441] 1 71 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11489    [*] 0 73 not_func
2023/12/27 13:56:42 end                [*, 11489] 1 74 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11542    [*] 0 76 not_func
2023/12/27 13:56:42 end                [*, 11542] 1 77 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11616    [*] 0 79 not_func
2023/12/27 13:56:42 end                [*, 11616] 1 80 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11648    [*] 0 82 not_func
2023/12/27 13:56:42 end                [*, 11648] 1 83 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12120    [*] 0 85 not_func
2023/12/27 13:56:42 end                [*, 12120] 1 86 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12142    [*] 0 88 not_func
2023/12/27 13:56:42 end                [*, 12142] 1 89 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12176    [*] 0 91 not_func
2023/12/27 13:56:42 end                [*, 12176] 1 92 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12206    [*] 0 94 not_func
2023/12/27 13:56:42 end                [*, 12206] 1 95 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12251    [*] 0 97 not_func
2023/12/27 13:56:42 end                [*, 12251] 1 98 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12301    [*] 0 100 not_func
2023/12/27 13:56:42 end                [*, 12301] 1 101 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12354    [*] 0 103 not_func
2023/12/27 13:56:42 end                [*, 12354] 1 104 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12396    [*] 0 106 not_func
2023/12/27 13:56:42 end                [*, 12396] 1 107 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 0        [*] 0 109 not_func
2023/12/27 13:56:42 end                [*, 0] 1 110 not_func
break of path_abort or out of scope
[0, 32, 165, 7, 99, 117, 83, 0, 0, 32, 165, 7, 99, 117, 83, 0]
2023/12/27 13:56:42 Running function address 140(i32_input_0, i64_input_1):
address:140
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> '] 
2023/12/27 13:56:42 global.get 0       [*, |] 0 112 140
2023/12/27 13:56:42 i32.const 48       [*, |, 8192] 1 113 140
2023/12/27 13:56:42 i32.sub            [*, |, 8192, 48] 2 114 140
2023/12/27 13:56:42 local.tee 2        [*, |, 8144] 3 115 140
2023/12/27 13:56:42 global.set 0       [*, |, 8144] 4 116 140
2023/12/27 13:56:42 local.get 1        [*, |] 5 117 140
2023/12/27 13:56:42 call 22            [*, |, i64_input_1] 6 118 140
2023/12/27 13:56:42 call eth.hostfunc : require_auth 22
action: ['Authenticate()']
2023/12/27 13:56:42 i32.const 0        [*, |] 7 119 140
2023/12/27 13:56:42 local.set 3        [*, |, 0] 8 120 140
2023/12/27 13:56:42 local.get 2        [*, |] 9 121 140
2023/12/27 13:56:42 i32.const 32       [*, |, 8144] 10 122 140
2023/12/27 13:56:42 i32.add            [*, |, 8144, 32] 11 123 140
2023/12/27 13:56:42 i32.const 0        [*, |, 8176] 12 124 140
2023/12/27 13:56:42 i32.store [2, 0]   [*, |, 8176, 0] 13 125 140
store at  8176
2023/12/27 13:56:42 local.get 2        [*, |] 14 126 140
2023/12/27 13:56:42 i64.const 0        [*, |, 8144] 15 127 140
2023/12/27 13:56:42 i64.store [3, 24]  [*, |, 8144, 0] 16 128 140
store at  8168
2023/12/27 13:56:42 local.get 2        [*, |] 17 129 140
2023/12/27 13:56:42 i64.const -1       [*, |, 8144] 18 130 140
2023/12/27 13:56:42 i64.store [3, 16]  [*, |, 8144, -1] 19 131 140
store at  8160
2023/12/27 13:56:42 local.get 2        [*, |] 20 132 140
2023/12/27 13:56:42 local.get 0        [*, |, 8144] 21 133 140
2023/12/27 13:56:42 i64.load [3, 8]    [*, |, 8144, i32_input_0] 22 134 140
22:i64.load [3, 8] i32_input_0 + 8

2023/12/27 13:56:42 local.tee 4        [*, |, 8144, 23491491257458688] 23 135 140
2023/12/27 13:56:42 i64.store [3, 8]   [*, |, 8144, 23491491257458688] 24 136 140
store at  8152
2023/12/27 13:56:42 local.get 2        [*, |] 25 137 140
2023/12/27 13:56:42 local.get 0        [*, |, 8144] 26 138 140
2023/12/27 13:56:42 i64.load [3, 0]    [*, |, 8144, i32_input_0] 27 139 140
27:i64.load [3, 0] i32_input_0 + 0

2023/12/27 13:56:42 local.tee 5        [*, |, 8144, 23491491257458688] 28 140 140
2023/12/27 13:56:42 i64.store [3, 0]   [*, |, 8144, 23491491257458688] 29 141 140
store at  8144
2023/12/27 13:56:42 block 64           [*, |] 30 142 140
2023/12/27 13:56:42 block 64           [*, |, |] 31 143 140
2023/12/27 13:56:42 local.get 5        [*, |, |, |] 32 144 140
2023/12/27 13:56:42 local.get 4        [*, |, |, |, 23491491257458688] 33 145 140
2023/12/27 13:56:42 i64.const -6149286337619951616 [*, |, |, |, 23491491257458688, 23491491257458688] 34 146 140
2023/12/27 13:56:42 local.get 1        [*, |, |, |, 23491491257458688, 23491491257458688, -6149286337619951616] 35 147 140
2023/12/27 13:56:42 call 23            [*, |, |, |, 23491491257458688, 23491491257458688, -6149286337619951616, i64_input_1] 36 148 140
2023/12/27 13:56:42 call eth.hostfunc : db_find_i64 23
[False, False, False]
action: []
2023/12/27 13:56:42 local.tee 0        [*, |, |, |, -1] 37 149 140
2023/12/27 13:56:42 i32.const 0        [*, |, |, |, -1] 38 150 140
2023/12/27 13:56:42 i32.lt_s           [*, |, |, |, -1, 0] 39 151 140
2023/12/27 13:56:42 br_if 0            [*, |, |, |, 1] 40 152 140
2023/12/27 13:56:42 i32.const 0        [*, |, |] 54 153 140
2023/12/27 13:56:42 i32.const 12120    [*, |, |, 0] 55 154 140
2023/12/27 13:56:42 call 1             [*, |, |, 0, 12120] 56 155 140
2023/12/27 13:56:42 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:42 i32.const 0        [*, |, |] 57 156 140
2023/12/27 13:56:42 i32.const 12142    [*, |, |, 0] 58 157 140
2023/12/27 13:56:42 call 1             [*, |, |, 0, 12142] 59 158 140
2023/12/27 13:56:42 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:42 i32.const 0        [*, |, |] 60 159 140
2023/12/27 13:56:42 i32.const 12176    [*, |, |, 0] 61 160 140
2023/12/27 13:56:42 call 1             [*, |, |, 0, 12176] 62 161 140
2023/12/27 13:56:42 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:42 end                [*, |, |] 63 162 140
2023/12/27 13:56:42 block 64           [*, |] 64 163 140
2023/12/27 13:56:42 local.get 3        [*, |, |] 65 164 140
2023/12/27 13:56:42 i32.load [2, 72]   [*, |, |, 0] 66 165 140
2023/12/27 13:56:42 local.get 2        [*, |, |, 0] 67 166 140
2023/12/27 13:56:42 i32.const 40       [*, |, |, 0, 8144] 68 167 140
2023/12/27 13:56:42 i32.add            [*, |, |, 0, 8144, 40] 69 168 140
2023/12/27 13:56:42 call 24            [*, |, |, 0, 8184] 70 169 140
2023/12/27 13:56:42 call eth.hostfunc : db_next_i64 24
action: []
2023/12/27 13:56:42 local.tee 0        [*, |, |, -1] 71 170 140
2023/12/27 13:56:42 i32.const 0        [*, |, |, -1] 72 171 140
2023/12/27 13:56:42 i32.lt_s           [*, |, |, -1, 0] 73 172 140
2023/12/27 13:56:42 br_if 0            [*, |, |, 1] 74 173 140
2023/12/27 13:56:42 local.get 2        [*, |] 80 174 140
2023/12/27 13:56:42 local.get 3        [*, |, 8144] 81 175 140
2023/12/27 13:56:42 call 141           [*, |, 8144, 0] 82 176 140
address:141
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> ', '$delegatecall 141 -> '] 
2023/12/27 13:56:42 block 64           [*, |, *, |] 0 177 141
2023/12/27 13:56:42 local.get 1        [*, |, *, |, |] 1 178 141
2023/12/27 13:56:42 i32.load [2, 68]   [*, |, *, |, |, 0] 2 179 141
2023/12/27 13:56:42 local.get 0        [*, |, *, |, |, 0] 3 180 141
2023/12/27 13:56:42 i32.eq             [*, |, *, |, |, 0, 8144] 4 181 141
2023/12/27 13:56:42 br_if 0            [*, |, *, |, |, 0] 5 182 141
2023/12/27 13:56:42 i32.const 0        [*, |, *, |, |] 6 183 141
2023/12/27 13:56:42 i32.const 12206    [*, |, *, |, |, 0] 7 184 141
2023/12/27 13:56:42 call 1             [*, |, *, |, |, 0, 12206] 8 185 141
2023/12/27 13:56:42 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:42 end                [*, |, *, |, |] 9 186 141
2023/12/27 13:56:42 block 64           [*, |, *, |] 10 187 141
2023/12/27 13:56:42 call 31            [*, |, *, |, |] 11 188 141
2023/12/27 13:56:42 call eth.hostfunc : current_receiver 31
action: []
2023/12/27 13:56:42 local.get 0        [*, |, *, |, |, 0] 12 189 141
2023/12/27 13:56:42 i64.load [3, 0]    [*, |, *, |, |, 0, 8144] 13 190 141
2023/12/27 13:56:42 i64.eq             [*, |, *, |, |, 0, 23491491257458688] 14 191 141
2023/12/27 13:56:42 br_if 0            [*, |, *, |, |, 0] 15 192 141
2023/12/27 13:56:42 i32.const 0        [*, |, *, |, |] 16 193 141
2023/12/27 13:56:42 i32.const 12251    [*, |, *, |, |, 0] 17 194 141
2023/12/27 13:56:42 call 1             [*, |, *, |, |, 0, 12251] 18 195 141
2023/12/27 13:56:42 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:42 end                [*, |, *, |, |] 19 196 141
2023/12/27 13:56:42 block 64           [*, |, *, |] 20 197 141
2023/12/27 13:56:42 block 64           [*, |, *, |, |] 21 198 141
2023/12/27 13:56:42 block 64           [*, |, *, |, |, |] 22 199 141
2023/12/27 13:56:42 block 64           [*, |, *, |, |, |, |] 23 200 141
2023/12/27 13:56:42 local.get 0        [*, |, *, |, |, |, |, |] 24 201 141
2023/12/27 13:56:42 i32.load [2, 24]   [*, |, *, |, |, |, |, |, 8144] 25 202 141
2023/12/27 13:56:42 local.tee 2        [*, |, *, |, |, |, |, |, 0] 26 203 141
2023/12/27 13:56:42 local.get 0        [*, |, *, |, |, |, |, |, 0] 27 204 141
2023/12/27 13:56:42 i32.const 28       [*, |, *, |, |, |, |, |, 0, 8144] 28 205 141
2023/12/27 13:56:42 i32.add            [*, |, *, |, |, |, |, |, 0, 8144, 28] 29 206 141
2023/12/27 13:56:42 i32.load [2, 0]    [*, |, *, |, |, |, |, |, 0, 8172] 30 207 141
2023/12/27 13:56:42 local.tee 3        [*, |, *, |, |, |, |, |, 0, 0] 31 208 141
2023/12/27 13:56:42 i32.eq             [*, |, *, |, |, |, |, |, 0, 0] 32 209 141
2023/12/27 13:56:42 br_if 0            [*, |, *, |, |, |, |, |, 1] 33 210 141
2023/12/27 13:56:42 block 64           [*, |, *, |, |, |, |, |] 34 211 141
2023/12/27 13:56:42 local.get 3        [*, |, *, |, |, |, |, |, |] 35 212 141
2023/12/27 13:56:42 i32.const -24      [*, |, *, |, |, |, |, |, |, 0] 36 213 141
2023/12/27 13:56:42 i32.add            [*, |, *, |, |, |, |, |, |, 0, -24] 37 214 141
2023/12/27 13:56:42 i32.load [2, 0]    [*, |, *, |, |, |, |, |, |, -24] 38 215 141
2023/12/27 13:56:42 i64.load [3, 0]    [*, |, *, |, |, |, |, |, |, 0] 39 216 141
2023/12/27 13:56:42 local.get 1        [*, |, *, |, |, |, |, |, |, 12400] 40 217 141
2023/12/27 13:56:42 i64.load [3, 0]    [*, |, *, |, |, |, |, |, |, 12400, 0] 41 218 141
2023/12/27 13:56:42 local.tee 4        [*, |, *, |, |, |, |, |, |, 12400, 12400] 42 219 141
2023/12/27 13:56:42 i64.ne             [*, |, *, |, |, |, |, |, |, 12400, 12400] 43 220 141
2023/12/27 13:56:42 br_if 0            [*, |, *, |, |, |, |, |, |, 0] 44 221 141
2023/12/27 13:56:42 local.get 3        [*, |, *, |, |, |, |, |, |] 45 222 141
2023/12/27 13:56:42 local.set 5        [*, |, *, |, |, |, |, |, |, 0] 46 223 141
2023/12/27 13:56:42 br 2               [*, |, *, |, |, |, |, |, |] 47 224 141
2023/12/27 13:56:42 local.get 2        [*, |, *, |, |, |] 80 225 141
2023/12/27 13:56:42 local.get 5        [*, |, *, |, |, |, 0] 81 226 141
2023/12/27 13:56:42 i32.ne             [*, |, *, |, |, |, 0, 0] 82 227 141
2023/12/27 13:56:42 br_if 1            [*, |, *, |, |, |, 0] 83 228 141
2023/12/27 13:56:42 end                [*, |, *, |, |, |] 84 229 141
2023/12/27 13:56:42 i32.const 0        [*, |, *, |, |] 85 230 141
2023/12/27 13:56:42 i32.const 12301    [*, |, *, |, |, 0] 86 231 141
2023/12/27 13:56:42 call 1             [*, |, *, |, |, 0, 12301] 87 232 141
2023/12/27 13:56:42 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:42 end                [*, |, *, |, |] 88 233 141
2023/12/27 13:56:42 local.get 1        [*, |, *, |] 89 234 141
2023/12/27 13:56:42 i32.load [2, 72]   [*, |, *, |, 0] 90 235 141
2023/12/27 13:56:42 call 35            [*, |, *, |, 0] 91 236 141
2023/12/27 13:56:42 call eth.hostfunc : db_remove_i64 35
2023/12/27 13:56:42 block 64           [*, |, *, |] 92 237 141
2023/12/27 13:56:42 block 64           [*, |, *, |, |] 93 238 141
2023/12/27 13:56:42 block 64           [*, |, *, |, |, |] 94 239 141
2023/12/27 13:56:42 local.get 5        [*, |, *, |, |, |, |] 95 240 141
2023/12/27 13:56:42 local.get 0        [*, |, *, |, |, |, |, 0] 96 241 141
2023/12/27 13:56:42 i32.load [2, 28]   [*, |, *, |, |, |, |, 0, 8144] 97 242 141
2023/12/27 13:56:42 local.tee 1        [*, |, *, |, |, |, |, 0, 0] 98 243 141
2023/12/27 13:56:42 i32.ne             [*, |, *, |, |, |, |, 0, 0] 99 244 141
2023/12/27 13:56:42 br_if 0            [*, |, *, |, |, |, |, 0] 100 245 141
2023/12/27 13:56:42 local.get 5        [*, |, *, |, |, |, |] 101 246 141
2023/12/27 13:56:42 i32.const -24      [*, |, *, |, |, |, |, 0] 102 247 141
2023/12/27 13:56:42 i32.add            [*, |, *, |, |, |, |, 0, -24] 103 248 141
2023/12/27 13:56:42 local.set 6        [*, |, *, |, |, |, |, -24] 104 249 141
2023/12/27 13:56:42 br 1               [*, |, *, |, |, |, |] 105 250 141
2023/12/27 13:56:42 loop 64            [*, |, *, |, |] 171 251 141
2023/12/27 13:56:42 local.get 5        [*, |, *, |, |, |] 172 252 141
2023/12/27 13:56:42 i32.const -24      [*, |, *, |, |, |, 0] 173 253 141
2023/12/27 13:56:42 i32.add            [*, |, *, |, |, |, 0, -24] 174 254 141
2023/12/27 13:56:42 local.tee 3        [*, |, *, |, |, |, -24] 175 255 141
2023/12/27 13:56:42 i32.load [2, 0]    [*, |, *, |, |, |, -24] 176 256 141
2023/12/27 13:56:42 local.set 7        [*, |, *, |, |, |, 0] 177 257 141
2023/12/27 13:56:42 local.get 3        [*, |, *, |, |, |] 178 258 141
2023/12/27 13:56:42 i32.const 0        [*, |, *, |, |, |, -24] 179 259 141
2023/12/27 13:56:42 i32.store [2, 0]   [*, |, *, |, |, |, -24, 0] 180 260 141
store at  -24
2023/12/27 13:56:42 block 64           [*, |, *, |, |, |] 181 261 141
2023/12/27 13:56:42 local.get 7        [*, |, *, |, |, |, |] 182 262 141
2023/12/27 13:56:42 i32.eqz            [*, |, *, |, |, |, |, 0] 183 263 141
2023/12/27 13:56:42 br_if 0            [*, |, *, |, |, |, |, 1] 184 264 141
2023/12/27 13:56:42 local.get 5        [*, |, *, |, |, |, |] 185 265 141
2023/12/27 13:56:42 i32.const -24      [*, |, *, |, |, |, |, 0] 186 266 141
2023/12/27 13:56:42 i32.add            [*, |, *, |, |, |, |, 0, -24] 187 267 141
2023/12/27 13:56:42 local.get 7        [*, |, *, |, |, |, |, -24] 188 268 141
2023/12/27 13:56:42 call 138           [*, |, *, |, |, |, |, -24, 0] 189 269 141
address:138
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> '] 
2023/12/27 13:56:42 block 64           [*, |, *, |, |, |, |, *, |] 0 270 138
2023/12/27 13:56:42 local.get 1        [*, |, *, |, |, |, |, *, |, |] 1 271 138
2023/12/27 13:56:42 i32.eqz            [*, |, *, |, |, |, |, *, |, |, 0] 2 272 138
2023/12/27 13:56:42 br_if 0            [*, |, *, |, |, |, |, *, |, |, 1] 3 273 138
2023/12/27 13:56:42 block 64           [*, |, *, |, |, |, |, *, |, |] 4 274 138
2023/12/27 13:56:42 local.get 1        [*, |, *, |, |, |, |, *, |, |, |] 5 275 138
2023/12/27 13:56:42 i32.load8_u [0, 56] [*, |, *, |, |, |, |, *, |, |, |, 0] 6 276 138
2023/12/27 13:56:42 i32.const 1        [*, |, *, |, |, |, |, *, |, |, |, 0] 7 277 138
2023/12/27 13:56:42 i32.and            [*, |, *, |, |, |, |, *, |, |, |, 0, 1] 8 278 138
2023/12/27 13:56:42 i32.eqz            [*, |, *, |, |, |, |, *, |, |, |, 0] 9 279 138
2023/12/27 13:56:42 br_if 0            [*, |, *, |, |, |, |, *, |, |, |, 1] 10 280 138
2023/12/27 13:56:42 local.get 1        [*, |, *, |, |, |, |, *, |, |, |] 11 281 138
2023/12/27 13:56:42 i32.const 64       [*, |, *, |, |, |, |, *, |, |, |, 0] 12 282 138
2023/12/27 13:56:42 i32.add            [*, |, *, |, |, |, |, *, |, |, |, 0, 64] 13 283 138
2023/12/27 13:56:42 i32.load [2, 0]    [*, |, *, |, |, |, |, *, |, |, |, 64] 14 284 138
2023/12/27 13:56:42 call 46            [*, |, *, |, |, |, |, *, |, |, |, 0] 15 285 138
address:46
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> '] 
2023/12/27 13:56:42 local.get 0        [*, |, *, |, |, |, |, *, |, |, |, *, |] 0 286 46
2023/12/27 13:56:42 call 40            [*, |, *, |, |, |, |, *, |, |, |, *, |, 0] 1 287 46
address:40
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> ', '$mul_128x128_256 40 -> '] 
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, |, *, |, *, |] 0 288 40
break of path_abort or out of scope
exit func: $mul_128x128_256 40 -> 
2023/12/27 13:56:42 [*, |, *, |, |, |, |, *, |, |, |, *, |, *]
2023/12/27 13:56:42 return func $mul_128x128_256 40 -> 
2023/12/27 13:56:42 ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> ']
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, |, *, |] 2 290 46
break of path_abort or out of scope
exit func: $mod320 46 -> 
2023/12/27 13:56:42 [*, |, *, |, |, |, |, *, |, |, |, *]
2023/12/27 13:56:42 return func $mod320 46 -> 
2023/12/27 13:56:42 ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ']
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, |] 16 292 138
2023/12/27 13:56:42 block 64           [*, |, *, |, |, |, |, *, |, |] 17 293 138
2023/12/27 13:56:42 local.get 1        [*, |, *, |, |, |, |, *, |, |, |] 18 294 138
2023/12/27 13:56:42 i32.load8_u [0, 44] [*, |, *, |, |, |, |, *, |, |, |, 0] 19 295 138
2023/12/27 13:56:42 i32.const 1        [*, |, *, |, |, |, |, *, |, |, |, 0] 20 296 138
2023/12/27 13:56:42 i32.and            [*, |, *, |, |, |, |, *, |, |, |, 0, 1] 21 297 138
2023/12/27 13:56:42 i32.eqz            [*, |, *, |, |, |, |, *, |, |, |, 0] 22 298 138
2023/12/27 13:56:42 br_if 0            [*, |, *, |, |, |, |, *, |, |, |, 1] 23 299 138
2023/12/27 13:56:42 local.get 1        [*, |, *, |, |, |, |, *, |, |, |] 24 300 138
2023/12/27 13:56:42 i32.const 52       [*, |, *, |, |, |, |, *, |, |, |, 0] 25 301 138
2023/12/27 13:56:42 i32.add            [*, |, *, |, |, |, |, *, |, |, |, 0, 52] 26 302 138
2023/12/27 13:56:42 i32.load [2, 0]    [*, |, *, |, |, |, |, *, |, |, |, 52] 27 303 138
2023/12/27 13:56:42 call 46            [*, |, *, |, |, |, |, *, |, |, |, 0] 28 304 138
address:46
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> '] 
2023/12/27 13:56:42 local.get 0        [*, |, *, |, |, |, |, *, |, |, |, *, |] 0 305 46
2023/12/27 13:56:42 call 40            [*, |, *, |, |, |, |, *, |, |, |, *, |, 0] 1 306 46
address:40
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> ', '$mul_128x128_256 40 -> '] 
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, |, *, |, *, |] 0 307 40
break of path_abort or out of scope
exit func: $mul_128x128_256 40 -> 
2023/12/27 13:56:42 [*, |, *, |, |, |, |, *, |, |, |, *, |, *]
2023/12/27 13:56:42 return func $mul_128x128_256 40 -> 
2023/12/27 13:56:42 ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> ']
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, |, *, |] 2 309 46
break of path_abort or out of scope
exit func: $mod320 46 -> 
2023/12/27 13:56:42 [*, |, *, |, |, |, |, *, |, |, |, *]
2023/12/27 13:56:42 return func $mod320 46 -> 
2023/12/27 13:56:42 ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ']
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, |] 29 311 138
2023/12/27 13:56:42 block 64           [*, |, *, |, |, |, |, *, |, |] 30 312 138
2023/12/27 13:56:42 local.get 1        [*, |, *, |, |, |, |, *, |, |, |] 31 313 138
2023/12/27 13:56:42 i32.load8_u [0, 32] [*, |, *, |, |, |, |, *, |, |, |, 0] 32 314 138
2023/12/27 13:56:42 i32.const 1        [*, |, *, |, |, |, |, *, |, |, |, 0] 33 315 138
2023/12/27 13:56:42 i32.and            [*, |, *, |, |, |, |, *, |, |, |, 0, 1] 34 316 138
2023/12/27 13:56:42 i32.eqz            [*, |, *, |, |, |, |, *, |, |, |, 0] 35 317 138
2023/12/27 13:56:42 br_if 0            [*, |, *, |, |, |, |, *, |, |, |, 1] 36 318 138
2023/12/27 13:56:42 local.get 1        [*, |, *, |, |, |, |, *, |, |, |] 37 319 138
2023/12/27 13:56:42 i32.const 40       [*, |, *, |, |, |, |, *, |, |, |, 0] 38 320 138
2023/12/27 13:56:42 i32.add            [*, |, *, |, |, |, |, *, |, |, |, 0, 40] 39 321 138
2023/12/27 13:56:42 i32.load [2, 0]    [*, |, *, |, |, |, |, *, |, |, |, 40] 40 322 138
2023/12/27 13:56:42 call 46            [*, |, *, |, |, |, |, *, |, |, |, 0] 41 323 138
address:46
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> '] 
2023/12/27 13:56:42 local.get 0        [*, |, *, |, |, |, |, *, |, |, |, *, |] 0 324 46
2023/12/27 13:56:42 call 40            [*, |, *, |, |, |, |, *, |, |, |, *, |, 0] 1 325 46
address:40
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> ', '$mul_128x128_256 40 -> '] 
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, |, *, |, *, |] 0 326 40
break of path_abort or out of scope
exit func: $mul_128x128_256 40 -> 
2023/12/27 13:56:42 [*, |, *, |, |, |, |, *, |, |, |, *, |, *]
2023/12/27 13:56:42 return func $mul_128x128_256 40 -> 
2023/12/27 13:56:42 ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> ']
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, |, *, |] 2 328 46
break of path_abort or out of scope
exit func: $mod320 46 -> 
2023/12/27 13:56:42 [*, |, *, |, |, |, |, *, |, |, |, *]
2023/12/27 13:56:42 return func $mod320 46 -> 
2023/12/27 13:56:42 ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ']
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, |] 42 330 138
2023/12/27 13:56:42 block 64           [*, |, *, |, |, |, |, *, |, |] 43 331 138
2023/12/27 13:56:42 local.get 1        [*, |, *, |, |, |, |, *, |, |, |] 44 332 138
2023/12/27 13:56:42 i32.load8_u [0, 20] [*, |, *, |, |, |, |, *, |, |, |, 0] 45 333 138
2023/12/27 13:56:42 i32.const 1        [*, |, *, |, |, |, |, *, |, |, |, 0] 46 334 138
2023/12/27 13:56:42 i32.and            [*, |, *, |, |, |, |, *, |, |, |, 0, 1] 47 335 138
2023/12/27 13:56:42 i32.eqz            [*, |, *, |, |, |, |, *, |, |, |, 0] 48 336 138
2023/12/27 13:56:42 br_if 0            [*, |, *, |, |, |, |, *, |, |, |, 1] 49 337 138
2023/12/27 13:56:42 local.get 1        [*, |, *, |, |, |, |, *, |, |, |] 50 338 138
2023/12/27 13:56:42 i32.const 28       [*, |, *, |, |, |, |, *, |, |, |, 0] 51 339 138
2023/12/27 13:56:42 i32.add            [*, |, *, |, |, |, |, *, |, |, |, 0, 28] 52 340 138
2023/12/27 13:56:42 i32.load [2, 0]    [*, |, *, |, |, |, |, *, |, |, |, 28] 53 341 138
2023/12/27 13:56:42 call 46            [*, |, *, |, |, |, |, *, |, |, |, 0] 54 342 138
address:46
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> '] 
2023/12/27 13:56:42 local.get 0        [*, |, *, |, |, |, |, *, |, |, |, *, |] 0 343 46
2023/12/27 13:56:42 call 40            [*, |, *, |, |, |, |, *, |, |, |, *, |, 0] 1 344 46
address:40
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> ', '$mul_128x128_256 40 -> '] 
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, |, *, |, *, |] 0 345 40
break of path_abort or out of scope
exit func: $mul_128x128_256 40 -> 
2023/12/27 13:56:42 [*, |, *, |, |, |, |, *, |, |, |, *, |, *]
2023/12/27 13:56:42 return func $mul_128x128_256 40 -> 
2023/12/27 13:56:42 ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> ']
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, |, *, |] 2 347 46
break of path_abort or out of scope
exit func: $mod320 46 -> 
2023/12/27 13:56:42 [*, |, *, |, |, |, |, *, |, |, |, *]
2023/12/27 13:56:42 return func $mod320 46 -> 
2023/12/27 13:56:42 ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ']
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, |] 55 349 138
2023/12/27 13:56:42 block 64           [*, |, *, |, |, |, |, *, |, |] 56 350 138
2023/12/27 13:56:42 local.get 1        [*, |, *, |, |, |, |, *, |, |, |] 57 351 138
2023/12/27 13:56:42 i32.load8_u [0, 8] [*, |, *, |, |, |, |, *, |, |, |, 0] 58 352 138
2023/12/27 13:56:42 i32.const 1        [*, |, *, |, |, |, |, *, |, |, |, 0] 59 353 138
2023/12/27 13:56:42 i32.and            [*, |, *, |, |, |, |, *, |, |, |, 0, 1] 60 354 138
2023/12/27 13:56:42 i32.eqz            [*, |, *, |, |, |, |, *, |, |, |, 0] 61 355 138
2023/12/27 13:56:42 br_if 0            [*, |, *, |, |, |, |, *, |, |, |, 1] 62 356 138
2023/12/27 13:56:42 local.get 1        [*, |, *, |, |, |, |, *, |, |, |] 63 357 138
2023/12/27 13:56:42 i32.const 16       [*, |, *, |, |, |, |, *, |, |, |, 0] 64 358 138
2023/12/27 13:56:42 i32.add            [*, |, *, |, |, |, |, *, |, |, |, 0, 16] 65 359 138
2023/12/27 13:56:42 i32.load [2, 0]    [*, |, *, |, |, |, |, *, |, |, |, 16] 66 360 138
2023/12/27 13:56:42 call 46            [*, |, *, |, |, |, |, *, |, |, |, 0] 67 361 138
address:46
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> '] 
2023/12/27 13:56:42 local.get 0        [*, |, *, |, |, |, |, *, |, |, |, *, |] 0 362 46
2023/12/27 13:56:42 call 40            [*, |, *, |, |, |, |, *, |, |, |, *, |, 0] 1 363 46
address:40
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> ', '$mul_128x128_256 40 -> '] 
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, |, *, |, *, |] 0 364 40
break of path_abort or out of scope
exit func: $mul_128x128_256 40 -> 
2023/12/27 13:56:42 [*, |, *, |, |, |, |, *, |, |, |, *, |, *]
2023/12/27 13:56:42 return func $mul_128x128_256 40 -> 
2023/12/27 13:56:42 ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> ']
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, |, *, |] 2 366 46
break of path_abort or out of scope
exit func: $mod320 46 -> 
2023/12/27 13:56:42 [*, |, *, |, |, |, |, *, |, |, |, *]
2023/12/27 13:56:42 return func $mod320 46 -> 
2023/12/27 13:56:42 ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ']
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, |] 68 368 138
2023/12/27 13:56:42 local.get 1        [*, |, *, |, |, |, |, *, |, |] 69 369 138
2023/12/27 13:56:42 call 46            [*, |, *, |, |, |, |, *, |, |, 0] 70 370 138
address:46
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> '] 
2023/12/27 13:56:42 local.get 0        [*, |, *, |, |, |, |, *, |, |, *, |] 0 371 46
2023/12/27 13:56:42 call 40            [*, |, *, |, |, |, |, *, |, |, *, |, 0] 1 372 46
address:40
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> ', '$mul_128x128_256 40 -> '] 
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, *, |, *, |] 0 373 40
break of path_abort or out of scope
exit func: $mul_128x128_256 40 -> 
2023/12/27 13:56:42 [*, |, *, |, |, |, |, *, |, |, *, |, *]
2023/12/27 13:56:42 return func $mul_128x128_256 40 -> 
2023/12/27 13:56:42 ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ', '$mod320 46 -> ']
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |, *, |] 2 375 46
break of path_abort or out of scope
exit func: $mod320 46 -> 
2023/12/27 13:56:42 [*, |, *, |, |, |, |, *, |, |, *]
2023/12/27 13:56:42 return func $mod320 46 -> 
2023/12/27 13:56:42 ['$callcode 140 -> ', '$delegatecall 141 -> ', '$create 138 -> ']
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |, |] 71 377 138
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |, *, |] 72 378 138
break of path_abort or out of scope
exit func: $create 138 -> 
2023/12/27 13:56:42 [*, |, *, |, |, |, |, *]
2023/12/27 13:56:42 return func $create 138 -> 
2023/12/27 13:56:42 ['$callcode 140 -> ', '$delegatecall 141 -> ']
2023/12/27 13:56:42 end                [*, |, *, |, |, |, |] 190 380 141
2023/12/27 13:56:42 local.get 3        [*, |, *, |, |, |] 191 381 141
2023/12/27 13:56:42 local.set 5        [*, |, *, |, |, |, -24] 192 382 141
2023/12/27 13:56:42 local.get 6        [*, |, *, |, |, |] 193 383 141
2023/12/27 13:56:42 local.get 3        [*, |, *, |, |, |, -24] 194 384 141
2023/12/27 13:56:42 i32.ne             [*, |, *, |, |, |, -24, -24] 195 385 141
2023/12/27 13:56:42 br_if 0            [*, |, *, |, |, |, 0] 196 386 141
2023/12/27 13:56:42 end                [*, |, *, |, |, |] 197 387 141
2023/12/27 13:56:42 end                [*, |, *, |, |] 198 388 141
2023/12/27 13:56:42 local.get 0        [*, |, *, |] 199 389 141
2023/12/27 13:56:42 local.get 6        [*, |, *, |, 8144] 200 390 141
2023/12/27 13:56:42 i32.store [2, 28]  [*, |, *, |, 8144, -24] 201 391 141
store at  8172
2023/12/27 13:56:42 end                [*, |, *, |] 202 392 141
break of path_abort or out of scope
exit func: $delegatecall 141 -> 
2023/12/27 13:56:42 [*, |, *]
2023/12/27 13:56:42 return func $delegatecall 141 -> 
2023/12/27 13:56:42 ['$callcode 140 -> ']
2023/12/27 13:56:42 block 64           [*, |] 83 394 140
2023/12/27 13:56:42 local.get 2        [*, |, |] 84 395 140
2023/12/27 13:56:42 i32.load [2, 24]   [*, |, |, 8144] 85 396 140
2023/12/27 13:56:42 local.tee 6        [*, |, |, 0] 86 397 140
2023/12/27 13:56:42 i32.eqz            [*, |, |, 0] 87 398 140
2023/12/27 13:56:42 br_if 0            [*, |, |, 1] 88 399 140
2023/12/27 13:56:42 block 64           [*, |, |] 89 400 140
2023/12/27 13:56:42 block 64           [*, |, |, |] 90 401 140
2023/12/27 13:56:42 local.get 2        [*, |, |, |, |] 91 402 140
2023/12/27 13:56:42 i32.load [2, 28]   [*, |, |, |, |, 8144] 92 403 140
2023/12/27 13:56:42 local.tee 0        [*, |, |, |, |, -24] 93 404 140
2023/12/27 13:56:42 local.get 6        [*, |, |, |, |, -24] 94 405 140
2023/12/27 13:56:42 i32.ne             [*, |, |, |, |, -24, 0] 95 406 140
2023/12/27 13:56:42 br_if 0            [*, |, |, |, |, 1] 96 407 140
2023/12/27 13:56:42 local.get 6        [*, |, |, |, |] 97 408 140
2023/12/27 13:56:42 local.set 3        [*, |, |, |, |, 0] 98 409 140
2023/12/27 13:56:42 br 1               [*, |, |, |, |] 99 410 140
2023/12/27 13:56:42 local.get 2        [*, |, |] 132 411 140
2023/12/27 13:56:42 local.get 6        [*, |, |, 8144] 133 412 140
2023/12/27 13:56:42 i32.store [2, 28]  [*, |, |, 8144, 0] 134 413 140
store at  8172
2023/12/27 13:56:42 local.get 3        [*, |, |] 135 414 140
2023/12/27 13:56:42 call 46            [*, |, |, 0] 136 415 140
address:46
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> ', '$mod320 46 -> '] 
2023/12/27 13:56:42 local.get 0        [*, |, |, *, |] 0 416 46
2023/12/27 13:56:42 call 40            [*, |, |, *, |, 0] 1 417 46
address:40
2023/12/27 13:56:42 wasmfunc call: ['$callcode 140 -> ', '$mod320 46 -> ', '$mul_128x128_256 40 -> '] 
2023/12/27 13:56:42 end                [*, |, |, *, |, *, |] 0 418 40
break of path_abort or out of scope
exit func: $mul_128x128_256 40 -> 
2023/12/27 13:56:42 [*, |, |, *, |, *]
2023/12/27 13:56:42 return func $mul_128x128_256 40 -> 
2023/12/27 13:56:42 ['$callcode 140 -> ', '$mod320 46 -> ']
2023/12/27 13:56:42 end                [*, |, |, *, |] 2 420 46
break of path_abort or out of scope
exit func: $mod320 46 -> 
2023/12/27 13:56:42 [*, |, |, *]
2023/12/27 13:56:42 return func $mod320 46 -> 
2023/12/27 13:56:42 ['$callcode 140 -> ']
2023/12/27 13:56:42 end                [*, |, |] 137 422 140
2023/12/27 13:56:42 local.get 2        [*, |] 138 423 140
2023/12/27 13:56:42 i32.const 48       [*, |, 8144] 139 424 140
2023/12/27 13:56:42 i32.add            [*, |, 8144, 48] 140 425 140
2023/12/27 13:56:42 global.set 0       [*, |, 8192] 141 426 140
2023/12/27 13:56:42 end                [*, |] 142 427 140
break of path_abort or out of scope
exit func: $callcode 140 -> 
2023/12/27 13:56:42 [*]
2023/12/27 13:56:42 return func $callcode 140 -> 
2023/12/27 13:56:42 []
2023/12/27 13:56:42 i32.const 8192     [*] 0 1 not_func
2023/12/27 13:56:42 end                [*, 8192] 1 2 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12400    [*] 0 4 not_func
2023/12/27 13:56:42 end                [*, 12400] 1 5 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12400    [*] 0 7 not_func
2023/12/27 13:56:42 end                [*, 12400] 1 8 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 apply address: 37
2023/12/27 13:56:42 i32.const 1        [*] 0 10 not_func
2023/12/27 13:56:42 end                [*, 1] 1 11 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 8208     [*] 0 13 not_func
2023/12/27 13:56:42 end                [*, 8208] 1 14 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 8352     [*] 0 16 not_func
2023/12/27 13:56:42 end                [*, 8352] 1 17 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 8624     [*] 0 19 not_func
2023/12/27 13:56:42 end                [*, 8624] 1 20 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 8720     [*] 0 22 not_func
2023/12/27 13:56:42 end                [*, 8720] 1 23 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 8752     [*] 0 25 not_func
2023/12/27 13:56:42 end                [*, 8752] 1 26 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 8764     [*] 0 28 not_func
2023/12/27 13:56:42 end                [*, 8764] 1 29 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 8784     [*] 0 31 not_func
2023/12/27 13:56:42 end                [*, 8784] 1 32 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 8992     [*] 0 34 not_func
2023/12/27 13:56:42 end                [*, 8992] 1 35 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 9072     [*] 0 37 not_func
2023/12/27 13:56:42 end                [*, 9072] 1 38 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 9092     [*] 0 40 not_func
2023/12/27 13:56:42 end                [*, 9092] 1 41 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 9152     [*] 0 43 not_func
2023/12/27 13:56:42 end                [*, 9152] 1 44 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 9184     [*] 0 46 not_func
2023/12/27 13:56:42 end                [*, 9184] 1 47 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 9280     [*] 0 49 not_func
2023/12/27 13:56:42 end                [*, 9280] 1 50 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11088    [*] 0 52 not_func
2023/12/27 13:56:42 end                [*, 11088] 1 53 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11292    [*] 0 55 not_func
2023/12/27 13:56:42 end                [*, 11292] 1 56 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11316    [*] 0 58 not_func
2023/12/27 13:56:42 end                [*, 11316] 1 59 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11323    [*] 0 61 not_func
2023/12/27 13:56:42 end                [*, 11323] 1 62 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11394    [*] 0 64 not_func
2023/12/27 13:56:42 end                [*, 11394] 1 65 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11439    [*] 0 67 not_func
2023/12/27 13:56:42 end                [*, 11439] 1 68 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11441    [*] 0 70 not_func
2023/12/27 13:56:42 end                [*, 11441] 1 71 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11489    [*] 0 73 not_func
2023/12/27 13:56:42 end                [*, 11489] 1 74 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11542    [*] 0 76 not_func
2023/12/27 13:56:42 end                [*, 11542] 1 77 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11616    [*] 0 79 not_func
2023/12/27 13:56:42 end                [*, 11616] 1 80 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 11648    [*] 0 82 not_func
2023/12/27 13:56:42 end                [*, 11648] 1 83 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12120    [*] 0 85 not_func
2023/12/27 13:56:42 end                [*, 12120] 1 86 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12142    [*] 0 88 not_func
2023/12/27 13:56:42 end                [*, 12142] 1 89 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12176    [*] 0 91 not_func
2023/12/27 13:56:42 end                [*, 12176] 1 92 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12206    [*] 0 94 not_func
2023/12/27 13:56:42 end                [*, 12206] 1 95 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12251    [*] 0 97 not_func
2023/12/27 13:56:42 end                [*, 12251] 1 98 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12301    [*] 0 100 not_func
2023/12/27 13:56:42 end                [*, 12301] 1 101 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12354    [*] 0 103 not_func
2023/12/27 13:56:42 end                [*, 12354] 1 104 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 12396    [*] 0 106 not_func
2023/12/27 13:56:42 end                [*, 12396] 1 107 not_func
break of path_abort or out of scope
2023/12/27 13:56:42 i32.const 0        [*] 0 109 not_func
2023/12/27 13:56:42 end                [*, 0] 1 110 not_func
break of path_abort or out of scope
[0, 32, 165, 7, 99, 117, 83, 0, 0, 32, 165, 7, 99, 117, 83, 0]
2023/12/27 13:56:42 Running function address 133(i32_input_0, i64_input_1, i32_input_2, i32_input_3, i32_input_4, i32_input_5, i32_input_6):
address:133
2023/12/27 13:56:42 wasmfunc call: ['$log0 133 -> '] 
2023/12/27 13:56:42 global.get 0       [*, |] 0 112 133
2023/12/27 13:56:42 i32.const 80       [*, |, 8192] 1 113 133
2023/12/27 13:56:42 i32.sub            [*, |, 8192, 80] 2 114 133
2023/12/27 13:56:42 local.tee 7        [*, |, 8112] 3 115 133
2023/12/27 13:56:42 global.set 0       [*, |, 8112] 4 116 133
2023/12/27 13:56:42 local.get 7        [*, |] 5 117 133
2023/12/27 13:56:42 local.get 1        [*, |, 8112] 6 118 133
2023/12/27 13:56:42 i64.store [3, 72]  [*, |, 8112, i64_input_1] 7 119 133
store at  8184
2023/12/27 13:56:42 local.get 1        [*, |] 8 120 133
2023/12/27 13:56:42 call 22            [*, |, i64_input_1] 9 121 133
2023/12/27 13:56:42 call eth.hostfunc : require_auth 22
action: ['Authenticate()']
2023/12/27 13:56:42 local.get 7        [*, |] 10 122 133
2023/12/27 13:56:42 i32.const 64       [*, |, 8112] 11 123 133
2023/12/27 13:56:42 i32.add            [*, |, 8112, 64] 12 124 133
2023/12/27 13:56:42 i32.const 0        [*, |, 8176] 13 125 133
2023/12/27 13:56:42 i32.store [2, 0]   [*, |, 8176, 0] 14 126 133
store at  8176
2023/12/27 13:56:42 local.get 7        [*, |] 15 127 133
2023/12/27 13:56:42 i64.const 0        [*, |, 8112] 16 128 133
2023/12/27 13:56:42 i64.store [3, 56]  [*, |, 8112, 0] 17 129 133
store at  8168
2023/12/27 13:56:42 local.get 7        [*, |] 18 130 133
2023/12/27 13:56:42 i64.const -1       [*, |, 8112] 19 131 133
2023/12/27 13:56:42 i64.store [3, 48]  [*, |, 8112, -1] 20 132 133
store at  8160
2023/12/27 13:56:42 local.get 7        [*, |] 21 133 133
2023/12/27 13:56:42 local.get 0        [*, |, 8112] 22 134 133
2023/12/27 13:56:42 i64.load [3, 8]    [*, |, 8112, i32_input_0] 23 135 133
23:i64.load [3, 8] i32_input_0 + 8

2023/12/27 13:56:42 local.tee 8        [*, |, 8112, 23491491257458688] 24 136 133
2023/12/27 13:56:42 i64.store [3, 40]  [*, |, 8112, 23491491257458688] 25 137 133
store at  8152
2023/12/27 13:56:42 local.get 7        [*, |] 26 138 133
2023/12/27 13:56:42 local.get 0        [*, |, 8112] 27 139 133
2023/12/27 13:56:42 i64.load [3, 0]    [*, |, 8112, i32_input_0] 28 140 133
28:i64.load [3, 0] i32_input_0 + 0

2023/12/27 13:56:42 local.tee 9        [*, |, 8112, 23491491257458688] 29 141 133
2023/12/27 13:56:42 i64.store [3, 32]  [*, |, 8112, 23491491257458688] 30 142 133
store at  8144
2023/12/27 13:56:42 block 64           [*, |] 31 143 133
2023/12/27 13:56:42 block 64           [*, |, |] 32 144 133
2023/12/27 13:56:42 local.get 9        [*, |, |, |] 33 145 133
2023/12/27 13:56:42 local.get 8        [*, |, |, |, 23491491257458688] 34 146 133
2023/12/27 13:56:42 i64.const -6149286337619951616 [*, |, |, |, 23491491257458688, 23491491257458688] 35 147 133
2023/12/27 13:56:42 local.get 1        [*, |, |, |, 23491491257458688, 23491491257458688, -6149286337619951616] 36 148 133
2023/12/27 13:56:42 call 23            [*, |, |, |, 23491491257458688, 23491491257458688, -6149286337619951616, i64_input_1] 37 149 133
2023/12/27 13:56:42 call eth.hostfunc : db_find_i64 23
[False, False, False]
action: []
2023/12/27 13:56:42 local.tee 0        [*, |, |, |, -1] 38 150 133
2023/12/27 13:56:42 i32.const 0        [*, |, |, |, -1] 39 151 133
2023/12/27 13:56:42 i32.lt_s           [*, |, |, |, -1, 0] 40 152 133
2023/12/27 13:56:42 br_if 0            [*, |, |, |, 1] 41 153 133
2023/12/27 13:56:42 local.get 7        [*, |, |] 93 154 133
2023/12/27 13:56:42 local.get 6        [*, |, |, 8112] 94 155 133
2023/12/27 13:56:42 i32.store [2, 28]  [*, |, |, 8112, i32_input_6] 95 156 133
store at  8140
2023/12/27 13:56:42 local.get 7        [*, |, |] 96 157 133
2023/12/27 13:56:42 local.get 5        [*, |, |, 8112] 97 158 133
2023/12/27 13:56:42 i32.store [2, 24]  [*, |, |, 8112, i32_input_5] 98 159 133
store at  8136
2023/12/27 13:56:42 local.get 7        [*, |, |] 99 160 133
2023/12/27 13:56:42 local.get 4        [*, |, |, 8112] 100 161 133
2023/12/27 13:56:42 i32.store [2, 20]  [*, |, |, 8112, i32_input_4] 101 162 133
store at  8132
2023/12/27 13:56:42 local.get 7        [*, |, |] 102 163 133
2023/12/27 13:56:42 local.get 3        [*, |, |, 8112] 103 164 133
2023/12/27 13:56:42 i32.store [2, 16]  [*, |, |, 8112, i32_input_3] 104 165 133
store at  8128
2023/12/27 13:56:42 local.get 7        [*, |, |] 105 166 133
2023/12/27 13:56:42 local.get 2        [*, |, |, 8112] 106 167 133
2023/12/27 13:56:42 i32.store [2, 12]  [*, |, |, 8112, i32_input_2] 107 168 133
store at  8124
2023/12/27 13:56:42 local.get 7        [*, |, |] 108 169 133
2023/12/27 13:56:42 local.get 7        [*, |, |, 8112] 109 170 133
2023/12/27 13:56:42 i32.const 72       [*, |, |, 8112, 8112] 110 171 133
2023/12/27 13:56:42 i32.add            [*, |, |, 8112, 8112, 72] 111 172 133
2023/12/27 13:56:42 i32.store [2, 8]   [*, |, |, 8112, 8184] 112 173 133
store at  8120
2023/12/27 13:56:42 local.get 7        [*, |, |] 113 174 133
2023/12/27 13:56:42 local.get 7        [*, |, |, 8112] 114 175 133
2023/12/27 13:56:42 i32.const 32       [*, |, |, 8112, 8112] 115 176 133
2023/12/27 13:56:42 i32.add            [*, |, |, 8112, 8112, 32] 116 177 133
2023/12/27 13:56:42 local.get 1        [*, |, |, 8112, 8144] 117 178 133
2023/12/27 13:56:42 local.get 7        [*, |, |, 8112, 8144, i64_input_1] 118 179 133
2023/12/27 13:56:42 i32.const 8        [*, |, |, 8112, 8144, i64_input_1, 8112] 119 180 133
2023/12/27 13:56:42 i32.add            [*, |, |, 8112, 8144, i64_input_1, 8112, 8] 120 181 133
2023/12/27 13:56:42 call 137           [*, |, |, 8112, 8144, i64_input_1, 8120] 121 182 133
address:137
2023/12/27 13:56:42 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> '] 
2023/12/27 13:56:42 global.get 0       [*, |, |, *, |] 0 183 137
2023/12/27 13:56:42 i32.const 48       [*, |, |, *, |, 8112] 1 184 137
2023/12/27 13:56:42 i32.sub            [*, |, |, *, |, 8112, 48] 2 185 137
2023/12/27 13:56:42 local.tee 4        [*, |, |, *, |, 8064] 3 186 137
2023/12/27 13:56:42 global.set 0       [*, |, |, *, |, 8064] 4 187 137
2023/12/27 13:56:42 local.get 4        [*, |, |, *, |] 5 188 137
2023/12/27 13:56:42 local.get 2        [*, |, |, *, |, 8064] 6 189 137
2023/12/27 13:56:42 i64.store [3, 40]  [*, |, |, *, |, 8064, i64_input_1] 7 190 137
store at  8104
2023/12/27 13:56:42 block 64           [*, |, |, *, |] 8 191 137
2023/12/27 13:56:42 call 31            [*, |, |, *, |, |] 9 192 137
2023/12/27 13:56:42 call eth.hostfunc : current_receiver 31
action: []
2023/12/27 13:56:42 local.get 1        [*, |, |, *, |, |, 0] 10 193 137
2023/12/27 13:56:42 i64.load [3, 0]    [*, |, |, *, |, |, 0, 8144] 11 194 137
2023/12/27 13:56:42 i64.eq             [*, |, |, *, |, |, 0, 23491491257458688] 12 195 137
2023/12/27 13:56:42 br_if 0            [*, |, |, *, |, |, 0] 13 196 137
2023/12/27 13:56:42 i32.const 0        [*, |, |, *, |, |] 14 197 137
2023/12/27 13:56:42 i32.const 11343    [*, |, |, *, |, |, 0] 15 198 137
2023/12/27 13:56:42 call 1             [*, |, |, *, |, |, 0, 11343] 16 199 137
2023/12/27 13:56:42 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:42 end                [*, |, |, *, |, |] 17 200 137
2023/12/27 13:56:42 local.get 4        [*, |, |, *, |] 18 201 137
2023/12/27 13:56:42 local.get 1        [*, |, |, *, |, 8064] 19 202 137
2023/12/27 13:56:42 i32.store [2, 20]  [*, |, |, *, |, 8064, 8144] 20 203 137
store at  8084
2023/12/27 13:56:42 local.get 4        [*, |, |, *, |] 21 204 137
2023/12/27 13:56:42 local.get 3        [*, |, |, *, |, 8064] 22 205 137
2023/12/27 13:56:42 i32.store [2, 16]  [*, |, |, *, |, 8064, 8120] 23 206 137
store at  8080
2023/12/27 13:56:42 local.get 4        [*, |, |, *, |] 24 207 137
2023/12/27 13:56:42 local.get 4        [*, |, |, *, |, 8064] 25 208 137
2023/12/27 13:56:42 i32.const 40       [*, |, |, *, |, 8064, 8064] 26 209 137
2023/12/27 13:56:42 i32.add            [*, |, |, *, |, 8064, 8064, 40] 27 210 137
2023/12/27 13:56:42 i32.store [2, 24]  [*, |, |, *, |, 8064, 8104] 28 211 137
store at  8088
2023/12/27 13:56:42 i32.const 80       [*, |, |, *, |] 29 212 137
2023/12/27 13:56:42 call 45            [*, |, |, *, |, 80] 30 213 137
address:45
2023/12/27 13:56:42 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$mod 45 -> '] 
2023/12/27 13:56:42 local.get 0        [*, |, |, *, |, *, |] 0 214 45
2023/12/27 13:56:42 i32.const 1        [*, |, |, *, |, *, |, 80] 1 215 45
2023/12/27 13:56:42 local.get 0        [*, |, |, *, |, *, |, 80, 1] 2 216 45
2023/12/27 13:56:42 select             [*, |, |, *, |, *, |, 80, 1, 80] 3 217 45
2023/12/27 13:56:42 local.set 1        [*, |, |, *, |, *, |, 80] 4 218 45
2023/12/27 13:56:42 block 64           [*, |, |, *, |, *, |] 5 219 45
2023/12/27 13:56:42 loop 64            [*, |, |, *, |, *, |, |] 6 220 45
2023/12/27 13:56:42 local.get 1        [*, |, |, *, |, *, |, |, |] 7 221 45
2023/12/27 13:56:42 call 38            [*, |, |, *, |, *, |, |, |, 80] 8 222 45
address:38
2023/12/27 13:56:42 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$mod 45 -> ', '$sub512 38 -> '] 
2023/12/27 13:56:42 block 64           [*, |, |, *, |, *, |, |, |, *, |] 0 223 38
2023/12/27 13:56:42 local.get 0        [*, |, |, *, |, *, |, |, |, *, |, |] 1 224 38
2023/12/27 13:56:42 br_if 0            [*, |, |, *, |, *, |, |, |, *, |, |, 80] 2 225 38
2023/12/27 13:56:42 i32.const 0        [*, |, |, *, |, *, |, |, |, *, |] 6 226 38
2023/12/27 13:56:42 i32.const 0        [*, |, |, *, |, *, |, |, |, *, |, 0] 7 227 38
2023/12/27 13:56:42 i32.load [2, 8204] [*, |, |, *, |, *, |, |, |, *, |, 0, 0] 8 228 38
2023/12/27 13:56:42 local.get 0        [*, |, |, *, |, *, |, |, |, *, |, 0, 0] 9 229 38
2023/12/27 13:56:42 i32.const 16       [*, |, |, *, |, *, |, |, |, *, |, 0, 0, 80] 10 230 38
2023/12/27 13:56:42 i32.shr_u          [*, |, |, *, |, *, |, |, |, *, |, 0, 0, 80, 16] 11 231 38
2023/12/27 13:56:42 local.tee 1        [*, |, |, *, |, *, |, |, |, *, |, 0, 0, 0] 12 232 38
2023/12/27 13:56:42 i32.add            [*, |, |, *, |, *, |, |, |, *, |, 0, 0, 0] 13 233 38
2023/12/27 13:56:42 local.tee 2        [*, |, |, *, |, *, |, |, |, *, |, 0, 0] 14 234 38
2023/12/27 13:56:42 i32.store [2, 8204] [*, |, |, *, |, *, |, |, |, *, |, 0, 0] 15 235 38
store at  8204
2023/12/27 13:56:42 i32.const 0        [*, |, |, *, |, *, |, |, |, *, |] 16 236 38
2023/12/27 13:56:42 i32.const 0        [*, |, |, *, |, *, |, |, |, *, |, 0] 17 237 38
2023/12/27 13:56:42 i32.load [2, 8196] [*, |, |, *, |, *, |, |, |, *, |, 0, 0] 18 238 38
2023/12/27 13:56:42 local.tee 3        [*, |, |, *, |, *, |, |, |, *, |, 0, 0] 19 239 38
2023/12/27 13:56:42 local.get 0        [*, |, |, *, |, *, |, |, |, *, |, 0, 0] 20 240 38
2023/12/27 13:56:42 i32.add            [*, |, |, *, |, *, |, |, |, *, |, 0, 0, 80] 21 241 38
2023/12/27 13:56:42 i32.const 15       [*, |, |, *, |, *, |, |, |, *, |, 0, 80] 22 242 38
2023/12/27 13:56:42 i32.add            [*, |, |, *, |, *, |, |, |, *, |, 0, 80, 15] 23 243 38
2023/12/27 13:56:42 i32.const -16      [*, |, |, *, |, *, |, |, |, *, |, 0, 95] 24 244 38
2023/12/27 13:56:42 i32.and            [*, |, |, *, |, *, |, |, |, *, |, 0, 95, -16] 25 245 38
2023/12/27 13:56:42 local.tee 0        [*, |, |, *, |, *, |, |, |, *, |, 0, 80] 26 246 38
2023/12/27 13:56:42 i32.store [2, 8196] [*, |, |, *, |, *, |, |, |, *, |, 0, 80] 27 247 38
store at  8196
2023/12/27 13:56:42 block 64           [*, |, |, *, |, *, |, |, |, *, |] 28 248 38
2023/12/27 13:56:42 local.get 2        [*, |, |, *, |, *, |, |, |, *, |, |] 29 249 38
2023/12/27 13:56:42 i32.const 16       [*, |, |, *, |, *, |, |, |, *, |, |, 0] 30 250 38
2023/12/27 13:56:42 i32.shl            [*, |, |, *, |, *, |, |, |, *, |, |, 0, 16] 31 251 38
2023/12/27 13:56:42 local.get 0        [*, |, |, *, |, *, |, |, |, *, |, |, 0] 32 252 38
2023/12/27 13:56:42 i32.gt_u           [*, |, |, *, |, *, |, |, |, *, |, |, 0, 80] 33 253 38
2023/12/27 13:56:42 br_if 0            [*, |, |, *, |, *, |, |, |, *, |, |, 0] 34 254 38
2023/12/27 13:56:42 i32.const 0        [*, |, |, *, |, *, |, |, |, *, |, |] 35 255 38
2023/12/27 13:56:42 local.get 2        [*, |, |, *, |, *, |, |, |, *, |, |, 0] 36 256 38
2023/12/27 13:56:42 i32.const 1        [*, |, |, *, |, *, |, |, |, *, |, |, 0, 0] 37 257 38
2023/12/27 13:56:42 i32.add            [*, |, |, *, |, *, |, |, |, *, |, |, 0, 0, 1] 38 258 38
2023/12/27 13:56:42 i32.store [2, 8204] [*, |, |, *, |, *, |, |, |, *, |, |, 0, 1] 39 259 38
store at  8204
2023/12/27 13:56:42 local.get 1        [*, |, |, *, |, *, |, |, |, *, |, |] 40 260 38
2023/12/27 13:56:42 i32.const 1        [*, |, |, *, |, *, |, |, |, *, |, |, 0] 41 261 38
2023/12/27 13:56:42 i32.add            [*, |, |, *, |, *, |, |, |, *, |, |, 0, 1] 42 262 38
2023/12/27 13:56:42 local.set 1        [*, |, |, *, |, *, |, |, |, *, |, |, 1] 43 263 38
2023/12/27 13:56:42 end                [*, |, |, *, |, *, |, |, |, *, |, |] 44 264 38
2023/12/27 13:56:42 block 64           [*, |, |, *, |, *, |, |, |, *, |] 45 265 38
2023/12/27 13:56:42 local.get 1        [*, |, |, *, |, *, |, |, |, *, |, |] 46 266 38
2023/12/27 13:56:42 memory.grow 0      [*, |, |, *, |, *, |, |, |, *, |, |, 1] 47 267 38
2023/12/27 13:56:42 i32.const -1       [*, |, |, *, |, *, |, |, |, *, |, |, 1] 48 268 38
2023/12/27 13:56:42 i32.ne             [*, |, |, *, |, *, |, |, |, *, |, |, 1, -1] 49 269 38
2023/12/27 13:56:42 br_if 0            [*, |, |, *, |, *, |, |, |, *, |, |, 1] 50 270 38
2023/12/27 13:56:42 i32.const 0        [*, |, |, *, |, *, |, |, |, *, |, |] 51 271 38
2023/12/27 13:56:42 i32.const 8208     [*, |, |, *, |, *, |, |, |, *, |, |, 0] 52 272 38
2023/12/27 13:56:42 call 1             [*, |, |, *, |, *, |, |, |, *, |, |, 0, 8208] 53 273 38
2023/12/27 13:56:42 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:42 end                [*, |, |, *, |, *, |, |, |, *, |, |] 54 274 38
2023/12/27 13:56:42 local.get 3        [*, |, |, *, |, *, |, |, |, *, |] 55 275 38
2023/12/27 13:56:42 end                [*, |, |, *, |, *, |, |, |, *, |, 0] 56 276 38
break of path_abort or out of scope
exit func: $sub512 38 -> 
2023/12/27 13:56:42 [*, |, |, *, |, *, |, |, |, *]
2023/12/27 13:56:42 return func $sub512 38 -> 
2023/12/27 13:56:42 ['$log0 133 -> ', '$log4 137 -> ', '$mod 45 -> ']
2023/12/27 13:56:42 local.tee 0        [*, |, |, *, |, *, |, |, |, 0] 9 278 45
2023/12/27 13:56:42 br_if 1            [*, |, |, *, |, *, |, |, |, 0] 10 279 45
2023/12/27 13:56:42 i32.const 0        [*, |, |, *, |, *, |, |, |] 11 280 45
2023/12/27 13:56:42 local.set 0        [*, |, |, *, |, *, |, |, |, 0] 12 281 45
2023/12/27 13:56:42 i32.const 0        [*, |, |, *, |, *, |, |, |] 13 282 45
2023/12/27 13:56:42 i32.load [2, 8332] [*, |, |, *, |, *, |, |, |, 0] 14 283 45
2023/12/27 13:56:42 local.tee 2        [*, |, |, *, |, *, |, |, |, 0] 15 284 45
2023/12/27 13:56:42 i32.eqz            [*, |, |, *, |, *, |, |, |, 0] 16 285 45
2023/12/27 13:56:42 br_if 1            [*, |, |, *, |, *, |, |, |, 1] 17 286 45
2023/12/27 13:56:42 local.get 0        [*, |, |, *, |, *, |] 23 287 45
2023/12/27 13:56:42 end                [*, |, |, *, |, *, |, 0] 24 288 45
break of path_abort or out of scope
exit func: $mod 45 -> 
2023/12/27 13:56:42 [*, |, |, *, |, *]
2023/12/27 13:56:42 return func $mod 45 -> 
2023/12/27 13:56:42 ['$log0 133 -> ', '$log4 137 -> ']
2023/12/27 13:56:42 local.tee 3        [*, |, |, *, |, 0] 31 290 137
2023/12/27 13:56:42 local.get 1        [*, |, |, *, |, 0] 32 291 137
2023/12/27 13:56:42 i32.store [2, 68]  [*, |, |, *, |, 0, 8144] 33 292 137
store at  68
2023/12/27 13:56:42 local.get 3        [*, |, |, *, |] 34 293 137
2023/12/27 13:56:42 i32.const 0        [*, |, |, *, |, 0] 35 294 137
2023/12/27 13:56:42 i32.store [2, 64]  [*, |, |, *, |, 0, 0] 36 295 137
store at  64
2023/12/27 13:56:42 local.get 3        [*, |, |, *, |] 37 296 137
2023/12/27 13:56:42 i64.const 0        [*, |, |, *, |, 0] 38 297 137
2023/12/27 13:56:42 i64.store [2, 56]  [*, |, |, *, |, 0, 0] 39 298 137
store at  56
2023/12/27 13:56:42 local.get 3        [*, |, |, *, |] 40 299 137
2023/12/27 13:56:42 i64.const 0        [*, |, |, *, |, 0] 41 300 137
2023/12/27 13:56:42 i64.store [2, 48]  [*, |, |, *, |, 0, 0] 42 301 137
store at  48
2023/12/27 13:56:42 local.get 3        [*, |, |, *, |] 43 302 137
2023/12/27 13:56:42 i64.const 0        [*, |, |, *, |, 0] 44 303 137
2023/12/27 13:56:42 i64.store [2, 40]  [*, |, |, *, |, 0, 0] 45 304 137
store at  40
2023/12/27 13:56:42 local.get 3        [*, |, |, *, |] 46 305 137
2023/12/27 13:56:42 i64.const 0        [*, |, |, *, |, 0] 47 306 137
2023/12/27 13:56:42 i64.store [2, 32]  [*, |, |, *, |, 0, 0] 48 307 137
store at  32
2023/12/27 13:56:42 local.get 3        [*, |, |, *, |] 49 308 137
2023/12/27 13:56:42 i64.const 0        [*, |, |, *, |, 0] 50 309 137
2023/12/27 13:56:42 i64.store [2, 24]  [*, |, |, *, |, 0, 0] 51 310 137
store at  24
2023/12/27 13:56:42 local.get 3        [*, |, |, *, |] 52 311 137
2023/12/27 13:56:42 i64.const 0        [*, |, |, *, |, 0] 53 312 137
2023/12/27 13:56:42 i64.store [2, 16]  [*, |, |, *, |, 0, 0] 54 313 137
store at  16
2023/12/27 13:56:42 local.get 3        [*, |, |, *, |] 55 314 137
2023/12/27 13:56:42 i64.const 0        [*, |, |, *, |, 0] 56 315 137
2023/12/27 13:56:42 i64.store [2, 8]   [*, |, |, *, |, 0, 0] 57 316 137
store at  8
2023/12/27 13:56:42 local.get 3        [*, |, |, *, |] 58 317 137
2023/12/27 13:56:42 i64.const 0        [*, |, |, *, |, 0] 59 318 137
2023/12/27 13:56:42 i64.store [3, 0]   [*, |, |, *, |, 0, 0] 60 319 137
store at  0
2023/12/27 13:56:42 local.get 4        [*, |, |, *, |] 61 320 137
2023/12/27 13:56:42 i32.const 16       [*, |, |, *, |, 8064] 62 321 137
2023/12/27 13:56:42 i32.add            [*, |, |, *, |, 8064, 16] 63 322 137
2023/12/27 13:56:42 local.get 3        [*, |, |, *, |, 8080] 64 323 137
2023/12/27 13:56:42 call 142           [*, |, |, *, |, 8080, 0] 65 324 137
address:142
2023/12/27 13:56:42 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> '] 
2023/12/27 13:56:42 global.get 0       [*, |, |, *, |, *, |] 0 325 142
2023/12/27 13:56:42 i32.const 48       [*, |, |, *, |, *, |, 8064] 1 326 142
2023/12/27 13:56:42 i32.sub            [*, |, |, *, |, *, |, 8064, 48] 2 327 142
2023/12/27 13:56:42 local.tee 2        [*, |, |, *, |, *, |, 8016] 3 328 142
2023/12/27 13:56:42 global.set 0       [*, |, |, *, |, *, |, 8016] 4 329 142
2023/12/27 13:56:42 local.get 1        [*, |, |, *, |, *, |] 5 330 142
2023/12/27 13:56:42 local.get 0        [*, |, |, *, |, *, |, 0] 6 331 142
2023/12/27 13:56:42 i32.load [2, 0]    [*, |, |, *, |, *, |, 0, 8080] 7 332 142
2023/12/27 13:56:42 local.tee 3        [*, |, |, *, |, *, |, 0, 8120] 8 333 142
2023/12/27 13:56:42 i32.load [2, 0]    [*, |, |, *, |, *, |, 0, 8120] 9 334 142
2023/12/27 13:56:42 i64.load [3, 0]    [*, |, |, *, |, *, |, 0, 8184] 10 335 142
2023/12/27 13:56:42 i64.store [3, 0]   [*, |, |, *, |, *, |, 0, i64_input_1] 11 336 142
store at  0
2023/12/27 13:56:42 local.get 0        [*, |, |, *, |, *, |] 12 337 142
2023/12/27 13:56:42 i32.load [2, 4]    [*, |, |, *, |, *, |, 8080] 13 338 142
2023/12/27 13:56:42 local.set 4        [*, |, |, *, |, *, |, 8144] 14 339 142
2023/12/27 13:56:42 local.get 1        [*, |, |, *, |, *, |] 15 340 142
2023/12/27 13:56:42 i32.const 8        [*, |, |, *, |, *, |, 0] 16 341 142
2023/12/27 13:56:42 i32.add            [*, |, |, *, |, *, |, 0, 8] 17 342 142
2023/12/27 13:56:42 local.tee 5        [*, |, |, *, |, *, |, 8] 18 343 142
2023/12/27 13:56:42 local.get 3        [*, |, |, *, |, *, |, 8] 19 344 142
2023/12/27 13:56:42 i32.load [2, 4]    [*, |, |, *, |, *, |, 8, 8120] 20 345 142
2023/12/27 13:56:43 call 126           [*, |, |, *, |, *, |, 8, i32_input_2] 21 346 142
address:126
2023/12/27 13:56:43 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$mstore_internal 126 -> '] 
2023/12/27 13:56:43 block 64           [*, |, |, *, |, *, |, *, |] 0 347 126
2023/12/27 13:56:43 local.get 0        [*, |, |, *, |, *, |, *, |, |] 1 348 126
2023/12/27 13:56:43 local.get 1        [*, |, |, *, |, *, |, *, |, |, 8] 2 349 126
2023/12/27 13:56:43 i32.eq             [*, |, |, *, |, *, |, *, |, |, 8, i32_input_2] 3 350 126
2023/12/27 13:56:43 br_if 0            [*, |, |, *, |, *, |, *, |, |, If(i32_input_2 == 8, 1, 0)] 4 351 126
2023/12/27 13:56:43 left branch (126 4: br_if 0)
2023/12/27 13:56:43 local.get 1        [*, |, |, *, |, *, |, *, |, |] 5 352 126
2023/12/27 13:56:43 i32.load [2, 4]    [*, |, |, *, |, *, |, *, |, |, i32_input_2] 6 353 126
6:i32.load [2, 4] i32_input_2 + 4

2023/12/27 13:56:43 local.get 1        [*, |, |, *, |, *, |, *, |, |, Concat(memory_45, memory_44, memory_43, memory_42)] 7 354 126
2023/12/27 13:56:43 i32.load8_u [0, 0] [*, |, |, *, |, *, |, *, |, |, Concat(memory_45, memory_44, memory_43, memory_42), i32_input_2] 8 355 126
8:i32.load8_u [0, 0] i32_input_2 + 0

2023/12/27 13:56:43 local.tee 2        [*, |, |, *, |, *, |, *, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 113] 9 356 126
2023/12/27 13:56:43 i32.const 1        [*, |, |, *, |, *, |, *, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 113] 10 357 126
2023/12/27 13:56:43 i32.shr_u          [*, |, |, *, |, *, |, *, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 113, 1] 11 358 126
2023/12/27 13:56:43 local.get 2        [*, |, |, *, |, *, |, *, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 56] 12 359 126
2023/12/27 13:56:43 i32.const 1        [*, |, |, *, |, *, |, *, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 56, 113] 13 360 126
2023/12/27 13:56:43 i32.and            [*, |, |, *, |, *, |, *, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 56, 113, 1] 14 361 126
2023/12/27 13:56:43 local.tee 3        [*, |, |, *, |, *, |, *, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 56, 1] 15 362 126
2023/12/27 13:56:43 select             [*, |, |, *, |, *, |, *, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 56, 1] 16 363 126
2023/12/27 13:56:43 local.set 2        [*, |, |, *, |, *, |, *, |, |, Concat(memory_45, memory_44, memory_43, memory_42)] 17 364 126
2023/12/27 13:56:43 local.get 1        [*, |, |, *, |, *, |, *, |, |] 18 365 126
2023/12/27 13:56:43 i32.const 1        [*, |, |, *, |, *, |, *, |, |, i32_input_2] 19 366 126
2023/12/27 13:56:43 i32.add            [*, |, |, *, |, *, |, *, |, |, i32_input_2, 1] 20 367 126
overflow vulnerability find
2023/12/27 13:56:43 local.set 4        [*, |, |, *, |, *, |, *, |, |, 1 + i32_input_2] 21 368 126
2023/12/27 13:56:43 local.get 1        [*, |, |, *, |, *, |, *, |, |] 22 369 126
2023/12/27 13:56:43 i32.load [2, 8]    [*, |, |, *, |, *, |, *, |, |, i32_input_2] 23 370 126
23:i32.load [2, 8] i32_input_2 + 8

2023/12/27 13:56:43 local.set 5        [*, |, |, *, |, *, |, *, |, |, Concat(memory_49, memory_48, memory_47, memory_46)] 24 371 126
2023/12/27 13:56:43 i32.const 10       [*, |, |, *, |, *, |, *, |, |] 25 372 126
2023/12/27 13:56:43 local.set 1        [*, |, |, *, |, *, |, *, |, |, 10] 26 373 126
2023/12/27 13:56:43 block 64           [*, |, |, *, |, *, |, *, |, |] 27 374 126
2023/12/27 13:56:43 local.get 0        [*, |, |, *, |, *, |, *, |, |, |] 28 375 126
2023/12/27 13:56:43 i32.load8_u [0, 0] [*, |, |, *, |, *, |, *, |, |, |, 8] 29 376 126
2023/12/27 13:56:43 local.tee 6        [*, |, |, *, |, *, |, *, |, |, |, 0] 30 377 126
2023/12/27 13:56:43 i32.const 1        [*, |, |, *, |, *, |, *, |, |, |, 0] 31 378 126
2023/12/27 13:56:43 i32.and            [*, |, |, *, |, *, |, *, |, |, |, 0, 1] 32 379 126
2023/12/27 13:56:43 local.tee 7        [*, |, |, *, |, *, |, *, |, |, |, 0] 33 380 126
2023/12/27 13:56:43 i32.eqz            [*, |, |, *, |, *, |, *, |, |, |, 0] 34 381 126
2023/12/27 13:56:43 br_if 0            [*, |, |, *, |, *, |, *, |, |, |, 1] 35 382 126
2023/12/27 13:56:43 local.get 0        [*, |, |, *, |, *, |, *, |, |, |] 36 383 126
2023/12/27 13:56:43 i32.load [2, 0]    [*, |, |, *, |, *, |, *, |, |, |, 8] 37 384 126
2023/12/27 13:56:43 i32.const -2       [*, |, |, *, |, *, |, *, |, |, |, 0] 38 385 126
2023/12/27 13:56:43 i32.and            [*, |, |, *, |, *, |, *, |, |, |, 0, -2] 39 386 126
2023/12/27 13:56:43 i32.const -1       [*, |, |, *, |, *, |, *, |, |, |, 0] 40 387 126
2023/12/27 13:56:43 i32.add            [*, |, |, *, |, *, |, *, |, |, |, 0, -1] 41 388 126
2023/12/27 13:56:43 local.set 1        [*, |, |, *, |, *, |, *, |, |, |, -1] 42 389 126
2023/12/27 13:56:43 end                [*, |, |, *, |, *, |, *, |, |, |] 43 390 126
2023/12/27 13:56:43 local.get 5        [*, |, |, *, |, *, |, *, |, |] 44 391 126
2023/12/27 13:56:43 local.get 4        [*, |, |, *, |, *, |, *, |, |, Concat(memory_49, memory_48, memory_47, memory_46)] 45 392 126
2023/12/27 13:56:43 local.get 3        [*, |, |, *, |, *, |, *, |, |, Concat(memory_49, memory_48, memory_47, memory_46), 1 + i32_input_2] 46 393 126
2023/12/27 13:56:43 select             [*, |, |, *, |, *, |, *, |, |, Concat(memory_49, memory_48, memory_47, memory_46), 1 + i32_input_2, 1] 47 394 126
2023/12/27 13:56:43 local.set 3        [*, |, |, *, |, *, |, *, |, |, Concat(memory_49, memory_48, memory_47, memory_46)] 48 395 126
2023/12/27 13:56:43 block 64           [*, |, |, *, |, *, |, *, |, |] 49 396 126
2023/12/27 13:56:43 local.get 2        [*, |, |, *, |, *, |, *, |, |, |] 50 397 126
2023/12/27 13:56:43 local.get 1        [*, |, |, *, |, *, |, *, |, |, |, Concat(memory_45, memory_44, memory_43, memory_42)] 51 398 126
2023/12/27 13:56:43 i32.gt_u           [*, |, |, *, |, *, |, *, |, |, |, Concat(memory_45, memory_44, memory_43, memory_42), -1] 52 399 126
2023/12/27 13:56:43 br_if 0            [*, |, |, *, |, *, |, *, |, |, |, 0] 53 400 126
2023/12/27 13:56:43 block 64           [*, |, |, *, |, *, |, *, |, |, |] 54 401 126
2023/12/27 13:56:43 block 64           [*, |, |, *, |, *, |, *, |, |, |, |] 55 402 126
2023/12/27 13:56:43 local.get 7        [*, |, |, *, |, *, |, *, |, |, |, |, |] 56 403 126
2023/12/27 13:56:43 i32.eqz            [*, |, |, *, |, *, |, *, |, |, |, |, |, 0] 57 404 126
2023/12/27 13:56:43 br_if 0            [*, |, |, *, |, *, |, *, |, |, |, |, |, 1] 58 405 126
2023/12/27 13:56:43 local.get 0        [*, |, |, *, |, *, |, *, |, |, |, |, |] 59 406 126
2023/12/27 13:56:43 i32.load [2, 8]    [*, |, |, *, |, *, |, *, |, |, |, |, |, 8] 60 407 126
2023/12/27 13:56:43 local.set 1        [*, |, |, *, |, *, |, *, |, |, |, |, |, 0] 61 408 126
2023/12/27 13:56:43 br 1               [*, |, |, *, |, *, |, *, |, |, |, |, |] 62 409 126
2023/12/27 13:56:43 block 64           [*, |, |, *, |, *, |, *, |, |, |] 69 410 126
2023/12/27 13:56:43 local.get 2        [*, |, |, *, |, *, |, *, |, |, |, |] 70 411 126
2023/12/27 13:56:43 i32.eqz            [*, |, |, *, |, *, |, *, |, |, |, |, Concat(memory_45, memory_44, memory_43, memory_42)] 71 412 126
2023/12/27 13:56:43 br_if 0            [*, |, |, *, |, *, |, *, |, |, |, |, If(And(memory_42 == 0,
       memory_43 == 0,
       memory_44 == 0,
       memory_45 == 0),
   1,
   0)] 72 413 126
2023/12/27 13:56:43 left branch (126 72: br_if 0)
2023/12/27 13:56:43 local.get 1        [*, |, |, *, |, *, |, *, |, |, |, |] 73 414 126
2023/12/27 13:56:43 local.get 3        [*, |, |, *, |, *, |, *, |, |, |, |, 0] 74 415 126
2023/12/27 13:56:43 local.get 2        [*, |, |, *, |, *, |, *, |, |, |, |, 0, Concat(memory_49, memory_48, memory_47, memory_46)] 75 416 126
2023/12/27 13:56:43 call 3             [*, |, |, *, |, *, |, *, |, |, |, |, 0, Concat(memory_49, memory_48, memory_47, memory_46), Concat(memory_45, memory_44, memory_43, memory_42)] 76 417 126
2023/12/27 13:56:43 call eth.hostfunc : memmove 3
action: []
2023/12/27 13:56:43 drop               [*, |, |, *, |, *, |, *, |, |, |, |, 0] 77 418 126
2023/12/27 13:56:43 end                [*, |, |, *, |, *, |, *, |, |, |, |] 78 419 126
2023/12/27 13:56:43 local.get 1        [*, |, |, *, |, *, |, *, |, |, |] 79 420 126
2023/12/27 13:56:43 local.get 2        [*, |, |, *, |, *, |, *, |, |, |, 0] 80 421 126
2023/12/27 13:56:43 i32.add            [*, |, |, *, |, *, |, *, |, |, |, 0, Concat(memory_45, memory_44, memory_43, memory_42)] 81 422 126
overflow vulnerability find
2023/12/27 13:56:43 i32.const 0        [*, |, |, *, |, *, |, *, |, |, |, Concat(memory_45, memory_44, memory_43, memory_42)] 82 423 126
2023/12/27 13:56:43 i32.store8 [0, 0]  [*, |, |, *, |, *, |, *, |, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 0] 83 424 126
2023/12/27 13:56:43 block 64           [*, |, |, *, |, *, |, *, |, |, |] 84 425 126
2023/12/27 13:56:43 local.get 0        [*, |, |, *, |, *, |, *, |, |, |, |] 85 426 126
2023/12/27 13:56:43 i32.load8_u [0, 0] [*, |, |, *, |, *, |, *, |, |, |, |, 8] 86 427 126
2023/12/27 13:56:43 i32.const 1        [*, |, |, *, |, *, |, *, |, |, |, |, 0] 87 428 126
2023/12/27 13:56:43 i32.and            [*, |, |, *, |, *, |, *, |, |, |, |, 0, 1] 88 429 126
2023/12/27 13:56:43 i32.eqz            [*, |, |, *, |, *, |, *, |, |, |, |, 0] 89 430 126
2023/12/27 13:56:43 br_if 0            [*, |, |, *, |, *, |, *, |, |, |, |, 1] 90 431 126
2023/12/27 13:56:43 local.get 0        [*, |, |, *, |, *, |, *, |, |, |, |] 91 432 126
2023/12/27 13:56:43 local.get 2        [*, |, |, *, |, *, |, *, |, |, |, |, 8] 92 433 126
2023/12/27 13:56:43 i32.store [2, 4]   [*, |, |, *, |, *, |, *, |, |, |, |, 8, Concat(memory_45, memory_44, memory_43, memory_42)] 93 434 126
store at  12
2023/12/27 13:56:43 local.get 0        [*, |, |, *, |, *, |, *, |, |, |, |] 94 435 126
2023/12/27 13:56:44 return             [*, |, |, *, |, *, |, *, |, |, |, |, 8] 95 436 126
len_solver_scope: 1
after pop: 1
2023/12/27 13:56:44 right branch (126 72: br_if 0)
[If(i32_input_2 == 8, 1, 0) == 0,
 If(Concat(memory_45, memory_44, memory_43, memory_42) == 0,
    1,
    0) !=
 0]
2023/12/27 13:56:44 local.get 1        [*, |, |, *, |, *, |, *, |, |, |] 79 437 126
2023/12/27 13:56:44 local.get 2        [*, |, |, *, |, *, |, *, |, |, |, 0] 80 438 126
2023/12/27 13:56:44 i32.add            [*, |, |, *, |, *, |, *, |, |, |, 0, Concat(memory_45, memory_44, memory_43, memory_42)] 81 439 126
2023/12/27 13:56:44 i32.const 0        [*, |, |, *, |, *, |, *, |, |, |, Concat(memory_45, memory_44, memory_43, memory_42)] 82 440 126
2023/12/27 13:56:44 i32.store8 [0, 0]  [*, |, |, *, |, *, |, *, |, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 0] 83 441 126
2023/12/27 13:56:44 block 64           [*, |, |, *, |, *, |, *, |, |, |] 84 442 126
2023/12/27 13:56:44 local.get 0        [*, |, |, *, |, *, |, *, |, |, |, |] 85 443 126
2023/12/27 13:56:44 i32.load8_u [0, 0] [*, |, |, *, |, *, |, *, |, |, |, |, 8] 86 444 126
2023/12/27 13:56:44 i32.const 1        [*, |, |, *, |, *, |, *, |, |, |, |, 0] 87 445 126
2023/12/27 13:56:44 i32.and            [*, |, |, *, |, *, |, *, |, |, |, |, 0, 1] 88 446 126
2023/12/27 13:56:44 i32.eqz            [*, |, |, *, |, *, |, *, |, |, |, |, 0] 89 447 126
2023/12/27 13:56:44 br_if 0            [*, |, |, *, |, *, |, *, |, |, |, |, 1] 90 448 126
2023/12/27 13:56:44 local.get 0        [*, |, |, *, |, *, |, *, |, |, |, |] 91 449 126
2023/12/27 13:56:44 local.get 2        [*, |, |, *, |, *, |, *, |, |, |, |, 8] 92 450 126
2023/12/27 13:56:44 i32.store [2, 4]   [*, |, |, *, |, *, |, *, |, |, |, |, 8, Concat(memory_45, memory_44, memory_43, memory_42)] 93 451 126
store at  12
2023/12/27 13:56:44 local.get 0        [*, |, |, *, |, *, |, *, |, |, |, |] 94 452 126
2023/12/27 13:56:44 return             [*, |, |, *, |, *, |, *, |, |, |, |, 8] 95 453 126
len_solver_scope: 0
after pop: 0
2023/12/27 13:56:44 right branch (126 4: br_if 0)
[If(i32_input_2 == 8, 1, 0) != 0]
2023/12/27 13:56:44 local.get 0        [*, |, |, *, |, *, |, *, |] 132 454 126
2023/12/27 13:56:44 end                [*, |, |, *, |, *, |, *, |, 8] 133 455 126
break of path_abort or out of scope
exit func: $mstore_internal 126 -> 
2023/12/27 13:56:44 [*]
2023/12/27 13:56:44 return func $mstore_internal 126 -> 
2023/12/27 13:56:44 ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ']
action: 8
2023/12/27 13:56:44 drop               [8] 22 457 142
2023/12/27 13:56:44 local.get 1        [] 23 458 142
2023/12/27 13:56:44 i32.const 20       [0] 24 459 142
2023/12/27 13:56:44 i32.add            [0, 20] 25 460 142
2023/12/27 13:56:44 local.tee 6        [20] 26 461 142
2023/12/27 13:56:44 local.get 3        [20] 27 462 142
2023/12/27 13:56:44 i32.load [2, 8]    [20, 8120] 28 463 142
2023/12/27 13:56:44 call 126           [20, i32_input_3] 29 464 142
address:126
2023/12/27 13:56:44 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$mstore_internal 126 -> '] 
2023/12/27 13:56:44 block 64           [*, |] 0 465 126
2023/12/27 13:56:44 local.get 0        [*, |, |] 1 466 126
2023/12/27 13:56:44 local.get 1        [*, |, |, 20] 2 467 126
2023/12/27 13:56:44 i32.eq             [*, |, |, 20, i32_input_3] 3 468 126
2023/12/27 13:56:44 br_if 0            [*, |, |, If(i32_input_3 == 20, 1, 0)] 4 469 126
2023/12/27 13:56:44 left branch (126 4: br_if 0)
2023/12/27 13:56:45 local.get 1        [*, |, |] 5 470 126
2023/12/27 13:56:45 i32.load [2, 4]    [*, |, |, i32_input_3] 6 471 126
6:i32.load [2, 4] i32_input_3 + 4

2023/12/27 13:56:45 local.get 1        [*, |, |, 1448626800] 7 472 126
2023/12/27 13:56:45 i32.load8_u [0, 0] [*, |, |, 1448626800, i32_input_3] 8 473 126
8:i32.load8_u [0, 0] i32_input_3 + 0

2023/12/27 13:56:45 local.tee 2        [*, |, |, 1448626800, 89] 9 474 126
2023/12/27 13:56:45 i32.const 1        [*, |, |, 1448626800, 89] 10 475 126
2023/12/27 13:56:45 i32.shr_u          [*, |, |, 1448626800, 89, 1] 11 476 126
2023/12/27 13:56:45 local.get 2        [*, |, |, 1448626800, 44] 12 477 126
2023/12/27 13:56:45 i32.const 1        [*, |, |, 1448626800, 44, 89] 13 478 126
2023/12/27 13:56:45 i32.and            [*, |, |, 1448626800, 44, 89, 1] 14 479 126
2023/12/27 13:56:45 local.tee 3        [*, |, |, 1448626800, 44, 1] 15 480 126
2023/12/27 13:56:45 select             [*, |, |, 1448626800, 44, 1] 16 481 126
2023/12/27 13:56:45 local.set 2        [*, |, |, 1448626800] 17 482 126
2023/12/27 13:56:45 local.get 1        [*, |, |] 18 483 126
2023/12/27 13:56:45 i32.const 1        [*, |, |, i32_input_3] 19 484 126
2023/12/27 13:56:45 i32.add            [*, |, |, i32_input_3, 1] 20 485 126
overflow vulnerability find
2023/12/27 13:56:45 local.set 4        [*, |, |, 1 + i32_input_3] 21 486 126
2023/12/27 13:56:45 local.get 1        [*, |, |] 22 487 126
2023/12/27 13:56:45 i32.load [2, 8]    [*, |, |, i32_input_3] 23 488 126
23:i32.load [2, 8] i32_input_3 + 8

2023/12/27 13:56:45 local.set 5        [*, |, |, Concat(memory_45, memory_44, memory_43, memory_42)] 24 489 126
2023/12/27 13:56:45 i32.const 10       [*, |, |] 25 490 126
2023/12/27 13:56:45 local.set 1        [*, |, |, 10] 26 491 126
2023/12/27 13:56:45 block 64           [*, |, |] 27 492 126
2023/12/27 13:56:45 local.get 0        [*, |, |, |] 28 493 126
2023/12/27 13:56:45 i32.load8_u [0, 0] [*, |, |, |, 20] 29 494 126
2023/12/27 13:56:45 local.tee 6        [*, |, |, |, 0] 30 495 126
2023/12/27 13:56:45 i32.const 1        [*, |, |, |, 0] 31 496 126
2023/12/27 13:56:45 i32.and            [*, |, |, |, 0, 1] 32 497 126
2023/12/27 13:56:45 local.tee 7        [*, |, |, |, 0] 33 498 126
2023/12/27 13:56:45 i32.eqz            [*, |, |, |, 0] 34 499 126
2023/12/27 13:56:45 br_if 0            [*, |, |, |, 1] 35 500 126
2023/12/27 13:56:45 local.get 0        [*, |, |, |] 36 501 126
2023/12/27 13:56:45 i32.load [2, 0]    [*, |, |, |, 20] 37 502 126
2023/12/27 13:56:45 i32.const -2       [*, |, |, |, 0] 38 503 126
2023/12/27 13:56:45 i32.and            [*, |, |, |, 0, -2] 39 504 126
2023/12/27 13:56:45 i32.const -1       [*, |, |, |, 0] 40 505 126
2023/12/27 13:56:45 i32.add            [*, |, |, |, 0, -1] 41 506 126
2023/12/27 13:56:45 local.set 1        [*, |, |, |, -1] 42 507 126
2023/12/27 13:56:45 end                [*, |, |, |] 43 508 126
2023/12/27 13:56:45 local.get 5        [*, |, |] 44 509 126
2023/12/27 13:56:45 local.get 4        [*, |, |, Concat(memory_45, memory_44, memory_43, memory_42)] 45 510 126
2023/12/27 13:56:45 local.get 3        [*, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 1 + i32_input_3] 46 511 126
2023/12/27 13:56:45 select             [*, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 1 + i32_input_3, 1] 47 512 126
2023/12/27 13:56:45 local.set 3        [*, |, |, Concat(memory_45, memory_44, memory_43, memory_42)] 48 513 126
2023/12/27 13:56:45 block 64           [*, |, |] 49 514 126
2023/12/27 13:56:45 local.get 2        [*, |, |, |] 50 515 126
2023/12/27 13:56:45 local.get 1        [*, |, |, |, 1448626800] 51 516 126
2023/12/27 13:56:45 i32.gt_u           [*, |, |, |, 1448626800, -1] 52 517 126
2023/12/27 13:56:45 br_if 0            [*, |, |, |, 0] 53 518 126
2023/12/27 13:56:45 block 64           [*, |, |, |] 54 519 126
2023/12/27 13:56:45 block 64           [*, |, |, |, |] 55 520 126
2023/12/27 13:56:45 local.get 7        [*, |, |, |, |, |] 56 521 126
2023/12/27 13:56:45 i32.eqz            [*, |, |, |, |, |, 0] 57 522 126
2023/12/27 13:56:45 br_if 0            [*, |, |, |, |, |, 1] 58 523 126
2023/12/27 13:56:45 local.get 0        [*, |, |, |, |, |] 59 524 126
2023/12/27 13:56:45 i32.load [2, 8]    [*, |, |, |, |, |, 20] 60 525 126
2023/12/27 13:56:45 local.set 1        [*, |, |, |, |, |, 0] 61 526 126
2023/12/27 13:56:45 br 1               [*, |, |, |, |, |] 62 527 126
2023/12/27 13:56:45 end                [*, |, |, |, |, |] 63 528 126
2023/12/27 13:56:45 local.get 0        [*, |, |, |, |] 64 529 126
2023/12/27 13:56:45 i32.const 1        [*, |, |, |, |, 20] 65 530 126
2023/12/27 13:56:45 i32.add            [*, |, |, |, |, 20, 1] 66 531 126
2023/12/27 13:56:45 local.set 1        [*, |, |, |, |, 21] 67 532 126
2023/12/27 13:56:45 end                [*, |, |, |, |] 68 533 126
2023/12/27 13:56:45 block 64           [*, |, |, |] 69 534 126
2023/12/27 13:56:45 local.get 2        [*, |, |, |, |] 70 535 126
2023/12/27 13:56:45 i32.eqz            [*, |, |, |, |, 1448626800] 71 536 126
2023/12/27 13:56:45 br_if 0            [*, |, |, |, |, 0] 72 537 126
2023/12/27 13:56:45 local.get 1        [*, |, |, |, |] 73 538 126
2023/12/27 13:56:45 local.get 3        [*, |, |, |, |, 21] 74 539 126
2023/12/27 13:56:45 local.get 2        [*, |, |, |, |, 21, Concat(memory_45, memory_44, memory_43, memory_42)] 75 540 126
2023/12/27 13:56:45 call 3             [*, |, |, |, |, 21, Concat(memory_45, memory_44, memory_43, memory_42), 1448626800] 76 541 126
2023/12/27 13:56:45 call eth.hostfunc : memmove 3
action: []
2023/12/27 13:56:45 drop               [*, |, |, |, |, 0] 77 542 126
2023/12/27 13:56:45 end                [*, |, |, |, |] 78 543 126
2023/12/27 13:56:45 local.get 1        [*, |, |, |] 79 544 126
2023/12/27 13:56:45 local.get 2        [*, |, |, |, 21] 80 545 126
2023/12/27 13:56:45 i32.add            [*, |, |, |, 21, 1448626800] 81 546 126
2023/12/27 13:56:45 i32.const 0        [*, |, |, |, 1448626821] 82 547 126
2023/12/27 13:56:45 i32.store8 [0, 0]  [*, |, |, |, 1448626821, 0] 83 548 126
oom
len_solver_scope: 0
after pop: 0
2023/12/27 13:56:45 right branch (126 4: br_if 0)
[If(i32_input_3 == 20, 1, 0) != 0]
2023/12/27 13:56:45 local.get 0        [*, |] 132 549 126
2023/12/27 13:56:45 end                [*, |, 20] 133 550 126
break of path_abort or out of scope
exit func: $mstore_internal 126 -> 
2023/12/27 13:56:45 [*]
2023/12/27 13:56:45 return func $mstore_internal 126 -> 
2023/12/27 13:56:45 ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ']
2023/12/27 13:56:45 drop               [20] 30 552 142
2023/12/27 13:56:45 local.get 1        [] 31 553 142
2023/12/27 13:56:45 i32.const 32       [0] 32 554 142
2023/12/27 13:56:45 i32.add            [0, 32] 33 555 142
2023/12/27 13:56:45 local.tee 7        [32] 34 556 142
2023/12/27 13:56:45 local.get 3        [32] 35 557 142
2023/12/27 13:56:45 i32.load [2, 12]   [32, 8120] 36 558 142
2023/12/27 13:56:45 call 126           [32, i32_input_4] 37 559 142
address:126
2023/12/27 13:56:45 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$mstore_internal 126 -> '] 
2023/12/27 13:56:45 block 64           [*, |] 0 560 126
2023/12/27 13:56:45 local.get 0        [*, |, |] 1 561 126
2023/12/27 13:56:45 local.get 1        [*, |, |, 32] 2 562 126
2023/12/27 13:56:45 i32.eq             [*, |, |, 32, i32_input_4] 3 563 126
2023/12/27 13:56:45 br_if 0            [*, |, |, If(i32_input_4 == 32, 1, 0)] 4 564 126
2023/12/27 13:56:45 left branch (126 4: br_if 0)
2023/12/27 13:56:46 local.get 1        [*, |, |] 5 565 126
2023/12/27 13:56:46 i32.load [2, 4]    [*, |, |, i32_input_4] 6 566 126
6:i32.load [2, 4] i32_input_4 + 4

2023/12/27 13:56:46 local.get 1        [*, |, |, Concat(memory_45, memory_44, memory_43, memory_42)] 7 567 126
2023/12/27 13:56:46 i32.load8_u [0, 0] [*, |, |, Concat(memory_45, memory_44, memory_43, memory_42), i32_input_4] 8 568 126
8:i32.load8_u [0, 0] i32_input_4 + 0

2023/12/27 13:56:46 local.tee 2        [*, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 99] 9 569 126
2023/12/27 13:56:46 i32.const 1        [*, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 99] 10 570 126
2023/12/27 13:56:46 i32.shr_u          [*, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 99, 1] 11 571 126
2023/12/27 13:56:46 local.get 2        [*, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 49] 12 572 126
2023/12/27 13:56:46 i32.const 1        [*, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 49, 99] 13 573 126
2023/12/27 13:56:46 i32.and            [*, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 49, 99, 1] 14 574 126
2023/12/27 13:56:46 local.tee 3        [*, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 49, 1] 15 575 126
2023/12/27 13:56:46 select             [*, |, |, Concat(memory_45, memory_44, memory_43, memory_42), 49, 1] 16 576 126
2023/12/27 13:56:46 local.set 2        [*, |, |, Concat(memory_45, memory_44, memory_43, memory_42)] 17 577 126
2023/12/27 13:56:46 local.get 1        [*, |, |] 18 578 126
2023/12/27 13:56:46 i32.const 1        [*, |, |, i32_input_4] 19 579 126
2023/12/27 13:56:46 i32.add            [*, |, |, i32_input_4, 1] 20 580 126
overflow vulnerability find
2023/12/27 13:56:46 local.set 4        [*, |, |, 1 + i32_input_4] 21 581 126
2023/12/27 13:56:46 local.get 1        [*, |, |] 22 582 126
2023/12/27 13:56:46 i32.load [2, 8]    [*, |, |, i32_input_4] 23 583 126
23:i32.load [2, 8] i32_input_4 + 8

2023/12/27 13:56:46 local.set 5        [*, |, |, Concat(memory_49, memory_48, memory_47, memory_46)] 24 584 126
2023/12/27 13:56:46 i32.const 10       [*, |, |] 25 585 126
2023/12/27 13:56:46 local.set 1        [*, |, |, 10] 26 586 126
2023/12/27 13:56:46 block 64           [*, |, |] 27 587 126
2023/12/27 13:56:46 local.get 0        [*, |, |, |] 28 588 126
2023/12/27 13:56:46 i32.load8_u [0, 0] [*, |, |, |, 32] 29 589 126
2023/12/27 13:56:46 local.tee 6        [*, |, |, |, 0] 30 590 126
2023/12/27 13:56:46 i32.const 1        [*, |, |, |, 0] 31 591 126
2023/12/27 13:56:46 i32.and            [*, |, |, |, 0, 1] 32 592 126
2023/12/27 13:56:46 local.tee 7        [*, |, |, |, 0] 33 593 126
2023/12/27 13:56:46 i32.eqz            [*, |, |, |, 0] 34 594 126
2023/12/27 13:56:46 br_if 0            [*, |, |, |, 1] 35 595 126
2023/12/27 13:56:46 local.get 0        [*, |, |, |] 36 596 126
2023/12/27 13:56:46 i32.load [2, 0]    [*, |, |, |, 32] 37 597 126
2023/12/27 13:56:46 i32.const -2       [*, |, |, |, 0] 38 598 126
2023/12/27 13:56:46 i32.and            [*, |, |, |, 0, -2] 39 599 126
2023/12/27 13:56:46 i32.const -1       [*, |, |, |, 0] 40 600 126
2023/12/27 13:56:46 i32.add            [*, |, |, |, 0, -1] 41 601 126
2023/12/27 13:56:46 local.set 1        [*, |, |, |, -1] 42 602 126
2023/12/27 13:56:46 end                [*, |, |, |] 43 603 126
2023/12/27 13:56:46 local.get 5        [*, |, |] 44 604 126
2023/12/27 13:56:46 local.get 4        [*, |, |, Concat(memory_49, memory_48, memory_47, memory_46)] 45 605 126
2023/12/27 13:56:46 local.get 3        [*, |, |, Concat(memory_49, memory_48, memory_47, memory_46), 1 + i32_input_4] 46 606 126
2023/12/27 13:56:46 select             [*, |, |, Concat(memory_49, memory_48, memory_47, memory_46), 1 + i32_input_4, 1] 47 607 126
2023/12/27 13:56:46 local.set 3        [*, |, |, Concat(memory_49, memory_48, memory_47, memory_46)] 48 608 126
2023/12/27 13:56:46 block 64           [*, |, |] 49 609 126
2023/12/27 13:56:46 local.get 2        [*, |, |, |] 50 610 126
2023/12/27 13:56:46 local.get 1        [*, |, |, |, Concat(memory_45, memory_44, memory_43, memory_42)] 51 611 126
2023/12/27 13:56:46 i32.gt_u           [*, |, |, |, Concat(memory_45, memory_44, memory_43, memory_42), -1] 52 612 126
2023/12/27 13:56:46 br_if 0            [*, |, |, |, 0] 53 613 126
2023/12/27 13:56:46 block 64           [*, |, |, |] 54 614 126
2023/12/27 13:56:46 block 64           [*, |, |, |, |] 55 615 126
2023/12/27 13:56:46 local.get 7        [*, |, |, |, |, |] 56 616 126
2023/12/27 13:56:46 i32.eqz            [*, |, |, |, |, |, 0] 57 617 126
2023/12/27 13:56:46 br_if 0            [*, |, |, |, |, |, 1] 58 618 126
2023/12/27 13:56:46 local.get 0        [*, |, |, |, |, |] 59 619 126
2023/12/27 13:56:46 i32.load [2, 8]    [*, |, |, |, |, |, 32] 60 620 126
2023/12/27 13:56:46 local.set 1        [*, |, |, |, |, |, 0] 61 621 126
2023/12/27 13:56:46 br 1               [*, |, |, |, |, |] 62 622 126
2023/12/27 13:56:46 end                [*, |, |, |, |, |] 63 623 126
2023/12/27 13:56:46 local.get 0        [*, |, |, |, |] 64 624 126
2023/12/27 13:56:46 i32.const 1        [*, |, |, |, |, 32] 65 625 126
2023/12/27 13:56:46 i32.add            [*, |, |, |, |, 32, 1] 66 626 126
2023/12/27 13:56:46 local.set 1        [*, |, |, |, |, 33] 67 627 126
2023/12/27 13:56:46 end                [*, |, |, |, |] 68 628 126
2023/12/27 13:56:46 block 64           [*, |, |, |] 69 629 126
2023/12/27 13:56:46 local.get 2        [*, |, |, |, |] 70 630 126
2023/12/27 13:56:46 i32.eqz            [*, |, |, |, |, Concat(memory_45, memory_44, memory_43, memory_42)] 71 631 126
2023/12/27 13:56:46 br_if 0            [*, |, |, |, |, If(And(memory_42 == 0,
       memory_43 == 0,
       memory_44 == 0,
       memory_45 == 0),
   1,
   0)] 72 632 126
2023/12/27 13:56:46 left branch (126 72: br_if 0)
2023/12/27 13:56:46 local.get 1        [*, |, |, |, |] 73 633 126
2023/12/27 13:56:46 local.get 3        [*, |, |, |, |, 33] 74 634 126
2023/12/27 13:56:46 local.get 2        [*, |, |, |, |, 33, Concat(memory_49, memory_48, memory_47, memory_46)] 75 635 126
2023/12/27 13:56:46 call 3             [*, |, |, |, |, 33, Concat(memory_49, memory_48, memory_47, memory_46), Concat(memory_45, memory_44, memory_43, memory_42)] 76 636 126
2023/12/27 13:56:46 call eth.hostfunc : memmove 3
action: []
2023/12/27 13:56:46 drop               [*, |, |, |, |, 0] 77 637 126
2023/12/27 13:56:46 end                [*, |, |, |, |] 78 638 126
2023/12/27 13:56:46 local.get 1        [*, |, |, |] 79 639 126
2023/12/27 13:56:46 local.get 2        [*, |, |, |, 33] 80 640 126
2023/12/27 13:56:46 i32.add            [*, |, |, |, 33, Concat(memory_45, memory_44, memory_43, memory_42)] 81 641 126
overflow vulnerability find
2023/12/27 13:56:46 i32.const 0        [*, |, |, |, 33 + Concat(memory_45, memory_44, memory_43, memory_42)] 82 642 126
2023/12/27 13:56:46 i32.store8 [0, 0]  [*, |, |, |, 33 + Concat(memory_45, memory_44, memory_43, memory_42), 0] 83 643 126
2023/12/27 13:56:46 block 64           [*, |, |, |] 84 644 126
2023/12/27 13:56:46 local.get 0        [*, |, |, |, |] 85 645 126
2023/12/27 13:56:46 i32.load8_u [0, 0] [*, |, |, |, |, 32] 86 646 126
2023/12/27 13:56:46 i32.const 1        [*, |, |, |, |, 0] 87 647 126
2023/12/27 13:56:46 i32.and            [*, |, |, |, |, 0, 1] 88 648 126
2023/12/27 13:56:46 i32.eqz            [*, |, |, |, |, 0] 89 649 126
2023/12/27 13:56:46 br_if 0            [*, |, |, |, |, 1] 90 650 126
2023/12/27 13:56:46 local.get 0        [*, |, |, |, |] 91 651 126
2023/12/27 13:56:46 local.get 2        [*, |, |, |, |, 32] 92 652 126
2023/12/27 13:56:46 i32.store [2, 4]   [*, |, |, |, |, 32, Concat(memory_45, memory_44, memory_43, memory_42)] 93 653 126
store at  36
2023/12/27 13:56:46 local.get 0        [*, |, |, |, |] 94 654 126
2023/12/27 13:56:46 return             [*, |, |, |, |, 32] 95 655 126
len_solver_scope: 1
after pop: 1
2023/12/27 13:56:46 right branch (126 72: br_if 0)
[If(i32_input_4 == 32, 1, 0) == 0,
 If(Concat(memory_45, memory_44, memory_43, memory_42) == 0,
    1,
    0) !=
 0]
2023/12/27 13:56:46 local.get 1        [*, |, |, |] 79 656 126
2023/12/27 13:56:46 local.get 2        [*, |, |, |, 33] 80 657 126
2023/12/27 13:56:46 i32.add            [*, |, |, |, 33, Concat(memory_45, memory_44, memory_43, memory_42)] 81 658 126
2023/12/27 13:56:46 i32.const 0        [*, |, |, |, 33 + Concat(memory_45, memory_44, memory_43, memory_42)] 82 659 126
2023/12/27 13:56:46 i32.store8 [0, 0]  [*, |, |, |, 33 + Concat(memory_45, memory_44, memory_43, memory_42), 0] 83 660 126
2023/12/27 13:56:47 block 64           [*, |, |, |] 84 661 126
2023/12/27 13:56:47 local.get 0        [*, |, |, |, |] 85 662 126
2023/12/27 13:56:47 i32.load8_u [0, 0] [*, |, |, |, |, 32] 86 663 126
2023/12/27 13:56:47 i32.const 1        [*, |, |, |, |, 0] 87 664 126
2023/12/27 13:56:47 i32.and            [*, |, |, |, |, 0, 1] 88 665 126
2023/12/27 13:56:47 i32.eqz            [*, |, |, |, |, 0] 89 666 126
2023/12/27 13:56:47 br_if 0            [*, |, |, |, |, 1] 90 667 126
2023/12/27 13:56:47 local.get 0        [*, |, |, |, |] 91 668 126
2023/12/27 13:56:47 local.get 2        [*, |, |, |, |, 32] 92 669 126
2023/12/27 13:56:47 i32.store [2, 4]   [*, |, |, |, |, 32, Concat(memory_45, memory_44, memory_43, memory_42)] 93 670 126
store at  36
2023/12/27 13:56:47 local.get 0        [*, |, |, |, |] 94 671 126
2023/12/27 13:56:47 return             [*, |, |, |, |, 32] 95 672 126
len_solver_scope: 0
after pop: 0
2023/12/27 13:56:47 right branch (126 4: br_if 0)
[If(i32_input_4 == 32, 1, 0) != 0]
2023/12/27 13:56:47 local.get 0        [*, |] 132 673 126
2023/12/27 13:56:47 end                [*, |, 32] 133 674 126
break of path_abort or out of scope
exit func: $mstore_internal 126 -> 
2023/12/27 13:56:47 [*]
2023/12/27 13:56:47 return func $mstore_internal 126 -> 
2023/12/27 13:56:47 ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ']
action: 32
2023/12/27 13:56:47 drop               [32] 38 676 142
2023/12/27 13:56:47 local.get 1        [] 39 677 142
2023/12/27 13:56:47 i32.const 44       [0] 40 678 142
2023/12/27 13:56:47 i32.add            [0, 44] 41 679 142
2023/12/27 13:56:47 local.tee 8        [44] 42 680 142
2023/12/27 13:56:47 local.get 3        [44] 43 681 142
2023/12/27 13:56:47 i32.load [2, 16]   [44, 8120] 44 682 142
2023/12/27 13:56:47 call 126           [44, i32_input_5] 45 683 142
address:126
2023/12/27 13:56:47 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$mstore_internal 126 -> '] 
2023/12/27 13:56:47 block 64           [*, |] 0 684 126
2023/12/27 13:56:47 local.get 0        [*, |, |] 1 685 126
2023/12/27 13:56:47 local.get 1        [*, |, |, 44] 2 686 126
2023/12/27 13:56:47 i32.eq             [*, |, |, 44, i32_input_5] 3 687 126
2023/12/27 13:56:47 br_if 0            [*, |, |, If(i32_input_5 == 44, 1, 0)] 4 688 126
2023/12/27 13:56:47 left branch (126 4: br_if 0)
2023/12/27 13:56:47 local.get 1        [*, |, |] 5 689 126
2023/12/27 13:56:47 i32.load [2, 4]    [*, |, |, i32_input_5] 6 690 126
6:i32.load [2, 4] i32_input_5 + 4

2023/12/27 13:56:47 local.get 1        [*, |, |, Concat(memory_43, memory_42, 30038)] 7 691 126
2023/12/27 13:56:47 i32.load8_u [0, 0] [*, |, |, Concat(memory_43, memory_42, 30038), i32_input_5] 8 692 126
8:i32.load8_u [0, 0] i32_input_5 + 0

2023/12/27 13:56:47 local.tee 2        [*, |, |, Concat(memory_43, memory_42, 30038), 118] 9 693 126
2023/12/27 13:56:47 i32.const 1        [*, |, |, Concat(memory_43, memory_42, 30038), 118] 10 694 126
2023/12/27 13:56:47 i32.shr_u          [*, |, |, Concat(memory_43, memory_42, 30038), 118, 1] 11 695 126
2023/12/27 13:56:47 local.get 2        [*, |, |, Concat(memory_43, memory_42, 30038), 59] 12 696 126
2023/12/27 13:56:47 i32.const 1        [*, |, |, Concat(memory_43, memory_42, 30038), 59, 118] 13 697 126
2023/12/27 13:56:47 i32.and            [*, |, |, Concat(memory_43, memory_42, 30038), 59, 118, 1] 14 698 126
2023/12/27 13:56:47 local.tee 3        [*, |, |, Concat(memory_43, memory_42, 30038), 59, 0] 15 699 126
2023/12/27 13:56:47 select             [*, |, |, Concat(memory_43, memory_42, 30038), 59, 0] 16 700 126
2023/12/27 13:56:47 local.set 2        [*, |, |, 59] 17 701 126
2023/12/27 13:56:47 local.get 1        [*, |, |] 18 702 126
2023/12/27 13:56:47 i32.const 1        [*, |, |, i32_input_5] 19 703 126
2023/12/27 13:56:47 i32.add            [*, |, |, i32_input_5, 1] 20 704 126
overflow vulnerability find
2023/12/27 13:56:47 local.set 4        [*, |, |, 1 + i32_input_5] 21 705 126
2023/12/27 13:56:47 local.get 1        [*, |, |] 22 706 126
2023/12/27 13:56:47 i32.load [2, 8]    [*, |, |, i32_input_5] 23 707 126
23:i32.load [2, 8] i32_input_5 + 8

2023/12/27 13:56:47 local.set 5        [*, |, |, Concat(memory_47, memory_46, memory_45, memory_44)] 24 708 126
2023/12/27 13:56:47 i32.const 10       [*, |, |] 25 709 126
2023/12/27 13:56:47 local.set 1        [*, |, |, 10] 26 710 126
2023/12/27 13:56:47 block 64           [*, |, |] 27 711 126
2023/12/27 13:56:47 local.get 0        [*, |, |, |] 28 712 126
2023/12/27 13:56:47 i32.load8_u [0, 0] [*, |, |, |, 44] 29 713 126
2023/12/27 13:56:47 local.tee 6        [*, |, |, |, 0] 30 714 126
2023/12/27 13:56:47 i32.const 1        [*, |, |, |, 0] 31 715 126
2023/12/27 13:56:47 i32.and            [*, |, |, |, 0, 1] 32 716 126
2023/12/27 13:56:47 local.tee 7        [*, |, |, |, 0] 33 717 126
2023/12/27 13:56:47 i32.eqz            [*, |, |, |, 0] 34 718 126
2023/12/27 13:56:47 br_if 0            [*, |, |, |, 1] 35 719 126
2023/12/27 13:56:47 local.get 0        [*, |, |, |] 36 720 126
2023/12/27 13:56:47 i32.load [2, 0]    [*, |, |, |, 44] 37 721 126
2023/12/27 13:56:47 i32.const -2       [*, |, |, |, 0] 38 722 126
2023/12/27 13:56:47 i32.and            [*, |, |, |, 0, -2] 39 723 126
2023/12/27 13:56:47 i32.const -1       [*, |, |, |, 0] 40 724 126
2023/12/27 13:56:47 i32.add            [*, |, |, |, 0, -1] 41 725 126
2023/12/27 13:56:47 local.set 1        [*, |, |, |, -1] 42 726 126
2023/12/27 13:56:47 end                [*, |, |, |] 43 727 126
2023/12/27 13:56:47 local.get 5        [*, |, |] 44 728 126
2023/12/27 13:56:47 local.get 4        [*, |, |, Concat(memory_47, memory_46, memory_45, memory_44)] 45 729 126
2023/12/27 13:56:47 local.get 3        [*, |, |, Concat(memory_47, memory_46, memory_45, memory_44), 1 + i32_input_5] 46 730 126
2023/12/27 13:56:47 select             [*, |, |, Concat(memory_47, memory_46, memory_45, memory_44), 1 + i32_input_5, 0] 47 731 126
2023/12/27 13:56:47 local.set 3        [*, |, |, 1 + i32_input_5] 48 732 126
2023/12/27 13:56:47 block 64           [*, |, |] 49 733 126
2023/12/27 13:56:47 local.get 2        [*, |, |, |] 50 734 126
2023/12/27 13:56:47 local.get 1        [*, |, |, |, 59] 51 735 126
2023/12/27 13:56:47 i32.gt_u           [*, |, |, |, 59, -1] 52 736 126
2023/12/27 13:56:47 br_if 0            [*, |, |, |, 0] 53 737 126
2023/12/27 13:56:47 block 64           [*, |, |, |] 54 738 126
2023/12/27 13:56:47 block 64           [*, |, |, |, |] 55 739 126
2023/12/27 13:56:47 local.get 7        [*, |, |, |, |, |] 56 740 126
2023/12/27 13:56:47 i32.eqz            [*, |, |, |, |, |, 0] 57 741 126
2023/12/27 13:56:47 br_if 0            [*, |, |, |, |, |, 1] 58 742 126
2023/12/27 13:56:47 local.get 0        [*, |, |, |, |, |] 59 743 126
2023/12/27 13:56:47 i32.load [2, 8]    [*, |, |, |, |, |, 44] 60 744 126
2023/12/27 13:56:47 local.set 1        [*, |, |, |, |, |, 0] 61 745 126
2023/12/27 13:56:47 br 1               [*, |, |, |, |, |] 62 746 126
2023/12/27 13:56:47 end                [*, |, |, |, |, |] 63 747 126
2023/12/27 13:56:47 local.get 0        [*, |, |, |, |] 64 748 126
2023/12/27 13:56:47 i32.const 1        [*, |, |, |, |, 44] 65 749 126
2023/12/27 13:56:47 i32.add            [*, |, |, |, |, 44, 1] 66 750 126
2023/12/27 13:56:47 local.set 1        [*, |, |, |, |, 45] 67 751 126
2023/12/27 13:56:47 end                [*, |, |, |, |] 68 752 126
2023/12/27 13:56:47 block 64           [*, |, |, |] 69 753 126
2023/12/27 13:56:47 local.get 2        [*, |, |, |, |] 70 754 126
2023/12/27 13:56:47 i32.eqz            [*, |, |, |, |, 59] 71 755 126
2023/12/27 13:56:47 br_if 0            [*, |, |, |, |, 0] 72 756 126
2023/12/27 13:56:47 local.get 1        [*, |, |, |, |] 73 757 126
2023/12/27 13:56:47 local.get 3        [*, |, |, |, |, 45] 74 758 126
2023/12/27 13:56:47 local.get 2        [*, |, |, |, |, 45, 1 + i32_input_5] 75 759 126
2023/12/27 13:56:47 call 3             [*, |, |, |, |, 45, 1 + i32_input_5, 59] 76 760 126
2023/12/27 13:56:47 call eth.hostfunc : memmove 3
action: []
2023/12/27 13:56:47 drop               [*, |, |, |, |, 0] 77 761 126
2023/12/27 13:56:47 end                [*, |, |, |, |] 78 762 126
2023/12/27 13:56:47 local.get 1        [*, |, |, |] 79 763 126
2023/12/27 13:56:47 local.get 2        [*, |, |, |, 45] 80 764 126
2023/12/27 13:56:47 i32.add            [*, |, |, |, 45, 59] 81 765 126
2023/12/27 13:56:47 i32.const 0        [*, |, |, |, 104] 82 766 126
2023/12/27 13:56:47 i32.store8 [0, 0]  [*, |, |, |, 104, 0] 83 767 126
store at  104
2023/12/27 13:56:47 block 64           [*, |, |, |] 84 768 126
2023/12/27 13:56:47 local.get 0        [*, |, |, |, |] 85 769 126
2023/12/27 13:56:47 i32.load8_u [0, 0] [*, |, |, |, |, 44] 86 770 126
2023/12/27 13:56:47 i32.const 1        [*, |, |, |, |, 0] 87 771 126
2023/12/27 13:56:47 i32.and            [*, |, |, |, |, 0, 1] 88 772 126
2023/12/27 13:56:47 i32.eqz            [*, |, |, |, |, 0] 89 773 126
2023/12/27 13:56:47 br_if 0            [*, |, |, |, |, 1] 90 774 126
2023/12/27 13:56:47 local.get 0        [*, |, |, |, |] 91 775 126
2023/12/27 13:56:47 local.get 2        [*, |, |, |, |, 44] 92 776 126
2023/12/27 13:56:47 i32.store [2, 4]   [*, |, |, |, |, 44, 59] 93 777 126
store at  48
2023/12/27 13:56:47 local.get 0        [*, |, |, |, |] 94 778 126
2023/12/27 13:56:47 return             [*, |, |, |, |, 44] 95 779 126
len_solver_scope: 0
after pop: 0
2023/12/27 13:56:48 right branch (126 4: br_if 0)
[If(i32_input_5 == 44, 1, 0) != 0]
2023/12/27 13:56:48 local.get 0        [*, |] 132 780 126
2023/12/27 13:56:48 end                [*, |, 44] 133 781 126
break of path_abort or out of scope
exit func: $mstore_internal 126 -> 
2023/12/27 13:56:48 [*]
2023/12/27 13:56:48 return func $mstore_internal 126 -> 
2023/12/27 13:56:48 ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ']
action: 44
2023/12/27 13:56:48 drop               [44] 46 783 142
2023/12/27 13:56:48 local.get 1        [] 47 784 142
2023/12/27 13:56:48 i32.const 56       [0] 48 785 142
2023/12/27 13:56:48 i32.add            [0, 56] 49 786 142
2023/12/27 13:56:48 local.tee 9        [56] 50 787 142
2023/12/27 13:56:48 local.get 3        [56] 51 788 142
2023/12/27 13:56:48 i32.load [2, 20]   [56, 8120] 52 789 142
2023/12/27 13:56:48 call 126           [56, i32_input_6] 53 790 142
address:126
2023/12/27 13:56:48 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$mstore_internal 126 -> '] 
2023/12/27 13:56:48 block 64           [*, |] 0 791 126
2023/12/27 13:56:48 local.get 0        [*, |, |] 1 792 126
2023/12/27 13:56:48 local.get 1        [*, |, |, 56] 2 793 126
2023/12/27 13:56:48 i32.eq             [*, |, |, 56, i32_input_6] 3 794 126
2023/12/27 13:56:48 br_if 0            [*, |, |, If(i32_input_6 == 56, 1, 0)] 4 795 126
2023/12/27 13:56:48 left branch (126 4: br_if 0)
2023/12/27 13:56:48 local.get 1        [*, |, |] 5 796 126
2023/12/27 13:56:48 i32.load [2, 4]    [*, |, |, i32_input_6] 6 797 126
6:i32.load [2, 4] i32_input_6 + 4

2023/12/27 13:56:48 local.get 1        [*, |, |, Concat(memory_44, memory_43, memory_42, 90)] 7 798 126
2023/12/27 13:56:48 i32.load8_u [0, 0] [*, |, |, Concat(memory_44, memory_43, memory_42, 90), i32_input_6] 8 799 126
8:i32.load8_u [0, 0] i32_input_6 + 0

2023/12/27 13:56:48 local.tee 2        [*, |, |, Concat(memory_44, memory_43, memory_42, 90), 118] 9 800 126
2023/12/27 13:56:48 i32.const 1        [*, |, |, Concat(memory_44, memory_43, memory_42, 90), 118] 10 801 126
2023/12/27 13:56:48 i32.shr_u          [*, |, |, Concat(memory_44, memory_43, memory_42, 90), 118, 1] 11 802 126
2023/12/27 13:56:48 local.get 2        [*, |, |, Concat(memory_44, memory_43, memory_42, 90), 59] 12 803 126
2023/12/27 13:56:48 i32.const 1        [*, |, |, Concat(memory_44, memory_43, memory_42, 90), 59, 118] 13 804 126
2023/12/27 13:56:48 i32.and            [*, |, |, Concat(memory_44, memory_43, memory_42, 90), 59, 118, 1] 14 805 126
2023/12/27 13:56:48 local.tee 3        [*, |, |, Concat(memory_44, memory_43, memory_42, 90), 59, 0] 15 806 126
2023/12/27 13:56:48 select             [*, |, |, Concat(memory_44, memory_43, memory_42, 90), 59, 0] 16 807 126
2023/12/27 13:56:48 local.set 2        [*, |, |, 59] 17 808 126
2023/12/27 13:56:48 local.get 1        [*, |, |] 18 809 126
2023/12/27 13:56:48 i32.const 1        [*, |, |, i32_input_6] 19 810 126
2023/12/27 13:56:48 i32.add            [*, |, |, i32_input_6, 1] 20 811 126
overflow vulnerability find
2023/12/27 13:56:48 local.set 4        [*, |, |, 1 + i32_input_6] 21 812 126
2023/12/27 13:56:48 local.get 1        [*, |, |] 22 813 126
2023/12/27 13:56:48 i32.load [2, 8]    [*, |, |, i32_input_6] 23 814 126
23:i32.load [2, 8] i32_input_6 + 8

2023/12/27 13:56:48 local.set 5        [*, |, |, Concat(memory_48, memory_47, memory_46, memory_45)] 24 815 126
2023/12/27 13:56:48 i32.const 10       [*, |, |] 25 816 126
2023/12/27 13:56:48 local.set 1        [*, |, |, 10] 26 817 126
2023/12/27 13:56:48 block 64           [*, |, |] 27 818 126
2023/12/27 13:56:48 local.get 0        [*, |, |, |] 28 819 126
2023/12/27 13:56:48 i32.load8_u [0, 0] [*, |, |, |, 56] 29 820 126
2023/12/27 13:56:48 local.tee 6        [*, |, |, |, 0] 30 821 126
2023/12/27 13:56:48 i32.const 1        [*, |, |, |, 0] 31 822 126
2023/12/27 13:56:48 i32.and            [*, |, |, |, 0, 1] 32 823 126
2023/12/27 13:56:48 local.tee 7        [*, |, |, |, 0] 33 824 126
2023/12/27 13:56:48 i32.eqz            [*, |, |, |, 0] 34 825 126
2023/12/27 13:56:48 br_if 0            [*, |, |, |, 1] 35 826 126
2023/12/27 13:56:48 local.get 0        [*, |, |, |] 36 827 126
2023/12/27 13:56:48 i32.load [2, 0]    [*, |, |, |, 56] 37 828 126
2023/12/27 13:56:48 i32.const -2       [*, |, |, |, 0] 38 829 126
2023/12/27 13:56:48 i32.and            [*, |, |, |, 0, -2] 39 830 126
2023/12/27 13:56:48 i32.const -1       [*, |, |, |, 0] 40 831 126
2023/12/27 13:56:48 i32.add            [*, |, |, |, 0, -1] 41 832 126
2023/12/27 13:56:48 local.set 1        [*, |, |, |, -1] 42 833 126
2023/12/27 13:56:48 end                [*, |, |, |] 43 834 126
2023/12/27 13:56:48 local.get 5        [*, |, |] 44 835 126
2023/12/27 13:56:48 local.get 4        [*, |, |, Concat(memory_48, memory_47, memory_46, memory_45)] 45 836 126
2023/12/27 13:56:48 local.get 3        [*, |, |, Concat(memory_48, memory_47, memory_46, memory_45), 1 + i32_input_6] 46 837 126
2023/12/27 13:56:48 select             [*, |, |, Concat(memory_48, memory_47, memory_46, memory_45), 1 + i32_input_6, 0] 47 838 126
2023/12/27 13:56:48 local.set 3        [*, |, |, 1 + i32_input_6] 48 839 126
2023/12/27 13:56:48 block 64           [*, |, |] 49 840 126
2023/12/27 13:56:48 local.get 2        [*, |, |, |] 50 841 126
2023/12/27 13:56:48 local.get 1        [*, |, |, |, 59] 51 842 126
2023/12/27 13:56:48 i32.gt_u           [*, |, |, |, 59, -1] 52 843 126
2023/12/27 13:56:48 br_if 0            [*, |, |, |, 0] 53 844 126
2023/12/27 13:56:48 block 64           [*, |, |, |] 54 845 126
2023/12/27 13:56:48 block 64           [*, |, |, |, |] 55 846 126
2023/12/27 13:56:48 local.get 7        [*, |, |, |, |, |] 56 847 126
2023/12/27 13:56:48 i32.eqz            [*, |, |, |, |, |, 0] 57 848 126
2023/12/27 13:56:48 br_if 0            [*, |, |, |, |, |, 1] 58 849 126
2023/12/27 13:56:48 local.get 0        [*, |, |, |, |, |] 59 850 126
2023/12/27 13:56:48 i32.load [2, 8]    [*, |, |, |, |, |, 56] 60 851 126
2023/12/27 13:56:48 local.set 1        [*, |, |, |, |, |, 0] 61 852 126
2023/12/27 13:56:48 br 1               [*, |, |, |, |, |] 62 853 126
2023/12/27 13:56:48 end                [*, |, |, |, |, |] 63 854 126
2023/12/27 13:56:48 local.get 0        [*, |, |, |, |] 64 855 126
2023/12/27 13:56:48 i32.const 1        [*, |, |, |, |, 56] 65 856 126
2023/12/27 13:56:48 i32.add            [*, |, |, |, |, 56, 1] 66 857 126
2023/12/27 13:56:48 local.set 1        [*, |, |, |, |, 57] 67 858 126
2023/12/27 13:56:48 end                [*, |, |, |, |] 68 859 126
2023/12/27 13:56:48 block 64           [*, |, |, |] 69 860 126
2023/12/27 13:56:48 local.get 2        [*, |, |, |, |] 70 861 126
2023/12/27 13:56:48 i32.eqz            [*, |, |, |, |, 59] 71 862 126
2023/12/27 13:56:48 br_if 0            [*, |, |, |, |, 0] 72 863 126
2023/12/27 13:56:48 local.get 1        [*, |, |, |, |] 73 864 126
2023/12/27 13:56:48 local.get 3        [*, |, |, |, |, 57] 74 865 126
2023/12/27 13:56:48 local.get 2        [*, |, |, |, |, 57, 1 + i32_input_6] 75 866 126
2023/12/27 13:56:48 call 3             [*, |, |, |, |, 57, 1 + i32_input_6, 59] 76 867 126
2023/12/27 13:56:48 call eth.hostfunc : memmove 3
action: []
2023/12/27 13:56:48 drop               [*, |, |, |, |, 0] 77 868 126
2023/12/27 13:56:48 end                [*, |, |, |, |] 78 869 126
2023/12/27 13:56:48 local.get 1        [*, |, |, |] 79 870 126
2023/12/27 13:56:48 local.get 2        [*, |, |, |, 57] 80 871 126
2023/12/27 13:56:48 i32.add            [*, |, |, |, 57, 59] 81 872 126
2023/12/27 13:56:48 i32.const 0        [*, |, |, |, 116] 82 873 126
2023/12/27 13:56:48 i32.store8 [0, 0]  [*, |, |, |, 116, 0] 83 874 126
store at  116
2023/12/27 13:56:48 block 64           [*, |, |, |] 84 875 126
2023/12/27 13:56:48 local.get 0        [*, |, |, |, |] 85 876 126
2023/12/27 13:56:48 i32.load8_u [0, 0] [*, |, |, |, |, 56] 86 877 126
2023/12/27 13:56:48 i32.const 1        [*, |, |, |, |, 0] 87 878 126
2023/12/27 13:56:48 i32.and            [*, |, |, |, |, 0, 1] 88 879 126
2023/12/27 13:56:48 i32.eqz            [*, |, |, |, |, 0] 89 880 126
2023/12/27 13:56:48 br_if 0            [*, |, |, |, |, 1] 90 881 126
2023/12/27 13:56:48 local.get 0        [*, |, |, |, |] 91 882 126
2023/12/27 13:56:48 local.get 2        [*, |, |, |, |, 56] 92 883 126
2023/12/27 13:56:48 i32.store [2, 4]   [*, |, |, |, |, 56, 59] 93 884 126
store at  60
2023/12/27 13:56:48 local.get 0        [*, |, |, |, |] 94 885 126
2023/12/27 13:56:48 return             [*, |, |, |, |, 56] 95 886 126
len_solver_scope: 0
after pop: 0
2023/12/27 13:56:48 right branch (126 4: br_if 0)
[If(i32_input_6 == 56, 1, 0) != 0]
2023/12/27 13:56:49 local.get 0        [*, |] 132 887 126
2023/12/27 13:56:49 end                [*, |, 56] 133 888 126
break of path_abort or out of scope
exit func: $mstore_internal 126 -> 
2023/12/27 13:56:49 [*]
2023/12/27 13:56:49 return func $mstore_internal 126 -> 
2023/12/27 13:56:49 ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ']
action: 56
2023/12/27 13:56:49 drop               [56] 54 890 142
2023/12/27 13:56:49 local.get 2        [] 55 891 142
2023/12/27 13:56:49 local.tee 3        [8016] 56 892 142
2023/12/27 13:56:49 i32.const 0        [8016] 57 893 142
2023/12/27 13:56:49 i32.store [2, 16]  [8016, 0] 58 894 142
store at  8032
2023/12/27 13:56:49 local.get 3        [] 59 895 142
2023/12/27 13:56:49 local.get 3        [8016] 60 896 142
2023/12/27 13:56:49 i32.const 16       [8016, 8016] 61 897 142
2023/12/27 13:56:49 i32.add            [8016, 8016, 16] 62 898 142
2023/12/27 13:56:49 i32.store [2, 0]   [8016, 8032] 63 899 142
store at  8016
2023/12/27 13:56:49 local.get 3        [] 64 900 142
2023/12/27 13:56:49 local.get 9        [8016] 65 901 142
2023/12/27 13:56:49 i32.store [2, 44]  [8016, 56] 66 902 142
store at  8060
2023/12/27 13:56:49 local.get 3        [] 67 903 142
2023/12/27 13:56:49 local.get 8        [8016] 68 904 142
2023/12/27 13:56:49 i32.store [2, 40]  [8016, 44] 69 905 142
store at  8056
2023/12/27 13:56:49 local.get 3        [] 70 906 142
2023/12/27 13:56:49 local.get 7        [8016] 71 907 142
2023/12/27 13:56:49 i32.store [2, 36]  [8016, 32] 72 908 142
store at  8052
2023/12/27 13:56:49 local.get 3        [] 73 909 142
2023/12/27 13:56:49 local.get 6        [8016] 74 910 142
2023/12/27 13:56:49 i32.store [2, 32]  [8016, 20] 75 911 142
store at  8048
2023/12/27 13:56:49 local.get 3        [] 76 912 142
2023/12/27 13:56:49 local.get 5        [8016] 77 913 142
2023/12/27 13:56:49 i32.store [2, 28]  [8016, 8] 78 914 142
store at  8044
2023/12/27 13:56:49 local.get 3        [] 79 915 142
2023/12/27 13:56:49 local.get 1        [8016] 80 916 142
2023/12/27 13:56:49 i32.store [2, 24]  [8016, 0] 81 917 142
store at  8040
2023/12/27 13:56:49 local.get 3        [] 82 918 142
2023/12/27 13:56:49 i32.const 24       [8016] 83 919 142
2023/12/27 13:56:49 i32.add            [8016, 24] 84 920 142
2023/12/27 13:56:49 local.get 3        [8040] 85 921 142
2023/12/27 13:56:49 call 145           [8040, 8016] 86 922 142
address:145
2023/12/27 13:56:49 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$return 145 -> '] 
2023/12/27 13:56:49 local.get 1        [*, |] 0 923 145
2023/12/27 13:56:49 i32.load [2, 0]    [*, |, 8016] 1 924 145
2023/12/27 13:56:49 local.tee 2        [*, |, 8032] 2 925 145
2023/12/27 13:56:49 local.get 2        [*, |, 8032] 3 926 145
2023/12/27 13:56:49 i32.load [2, 0]    [*, |, 8032, 8032] 4 927 145
2023/12/27 13:56:49 i32.const 8        [*, |, 8032, 0] 5 928 145
2023/12/27 13:56:49 i32.add            [*, |, 8032, 0, 8] 6 929 145
2023/12/27 13:56:49 local.tee 1        [*, |, 8032, 8] 7 930 145
2023/12/27 13:56:49 i32.store [2, 0]   [*, |, 8032, 8] 8 931 145
store at  8032
2023/12/27 13:56:49 local.get 0        [*, |] 9 932 145
2023/12/27 13:56:49 i32.load [2, 4]    [*, |, 8040] 10 933 145
2023/12/27 13:56:49 local.tee 3        [*, |, 8] 11 934 145
2023/12/27 13:56:49 i64.load32_u [2, 4] [*, |, 8] 12 935 145
2023/12/27 13:56:49 i64.const 0        [*, |, 0] 13 936 145
2023/12/27 13:56:49 local.get 3        [*, |, 0, 0] 14 937 145
2023/12/27 13:56:49 i32.load8_u [0, 0] [*, |, 0, 0, 8] 15 938 145
2023/12/27 13:56:49 i32.const 1        [*, |, 0, 0, 0] 16 939 145
2023/12/27 13:56:49 i32.and            [*, |, 0, 0, 0, 1] 17 940 145
2023/12/27 13:56:49 select             [*, |, 0, 0, 0] 18 941 145
2023/12/27 13:56:49 local.set 4        [*, |, 0] 19 942 145
2023/12/27 13:56:49 loop 64            [*, |] 20 943 145
2023/12/27 13:56:49 local.get 1        [*, |, |] 21 944 145
2023/12/27 13:56:49 i32.const 1        [*, |, |, 8] 22 945 145
2023/12/27 13:56:49 i32.add            [*, |, |, 8, 1] 23 946 145
2023/12/27 13:56:49 local.set 1        [*, |, |, 9] 24 947 145
2023/12/27 13:56:49 local.get 4        [*, |, |] 25 948 145
2023/12/27 13:56:49 i64.const 7        [*, |, |, 0] 26 949 145
2023/12/27 13:56:49 i64.shr_u          [*, |, |, 0, 7] 27 950 145
2023/12/27 13:56:49 local.tee 4        [*, |, |, 0] 28 951 145
2023/12/27 13:56:49 i64.const 0        [*, |, |, 0] 29 952 145
2023/12/27 13:56:49 i64.ne             [*, |, |, 0, 0] 30 953 145
2023/12/27 13:56:49 br_if 0            [*, |, |, 0] 31 954 145
2023/12/27 13:56:49 end                [*, |, |] 32 955 145
2023/12/27 13:56:49 local.get 2        [*, |] 33 956 145
2023/12/27 13:56:49 local.get 1        [*, |, 8032] 34 957 145
2023/12/27 13:56:49 i32.store [2, 0]   [*, |, 8032, 9] 35 958 145
store at  8032
2023/12/27 13:56:49 block 64           [*, |] 36 959 145
2023/12/27 13:56:49 local.get 3        [*, |, |] 37 960 145
2023/12/27 13:56:49 i32.load [2, 4]    [*, |, |, 8] 38 961 145
2023/12/27 13:56:49 local.get 3        [*, |, |, 0] 39 962 145
2023/12/27 13:56:49 i32.load8_u [0, 0] [*, |, |, 0, 8] 40 963 145
2023/12/27 13:56:49 local.tee 3        [*, |, |, 0, 0] 41 964 145
2023/12/27 13:56:49 i32.const 1        [*, |, |, 0, 0] 42 965 145
2023/12/27 13:56:49 i32.shr_u          [*, |, |, 0, 0, 1] 43 966 145
2023/12/27 13:56:49 local.get 3        [*, |, |, 0, 0] 44 967 145
2023/12/27 13:56:49 i32.const 1        [*, |, |, 0, 0, 0] 45 968 145
2023/12/27 13:56:49 i32.and            [*, |, |, 0, 0, 0, 1] 46 969 145
2023/12/27 13:56:49 select             [*, |, |, 0, 0, 0] 47 970 145
2023/12/27 13:56:49 local.tee 3        [*, |, |, 0] 48 971 145
2023/12/27 13:56:49 i32.eqz            [*, |, |, 0] 49 972 145
2023/12/27 13:56:49 br_if 0            [*, |, |, 1] 50 973 145
2023/12/27 13:56:49 local.get 2        [*, |, |] 51 974 145
2023/12/27 13:56:49 local.get 3        [*, |, |, 8032] 52 975 145
2023/12/27 13:56:49 local.get 1        [*, |, |, 8032, 0] 53 976 145
2023/12/27 13:56:49 i32.add            [*, |, |, 8032, 0, 9] 54 977 145
2023/12/27 13:56:49 local.tee 1        [*, |, |, 8032, 9] 55 978 145
2023/12/27 13:56:49 i32.store [2, 0]   [*, |, |, 8032, 9] 56 979 145
store at  8032
2023/12/27 13:56:49 end                [*, |, |] 57 980 145
2023/12/27 13:56:49 local.get 0        [*, |] 58 981 145
2023/12/27 13:56:49 i32.load [2, 8]    [*, |, 8040] 59 982 145
2023/12/27 13:56:49 local.tee 3        [*, |, 20] 60 983 145
2023/12/27 13:56:49 i64.load32_u [2, 4] [*, |, 20] 61 984 145
2023/12/27 13:56:49 i64.const 0        [*, |, 0] 62 985 145
2023/12/27 13:56:49 local.get 3        [*, |, 0, 0] 63 986 145
2023/12/27 13:56:49 i32.load8_u [0, 0] [*, |, 0, 0, 20] 64 987 145
2023/12/27 13:56:49 i32.const 1        [*, |, 0, 0, 0] 65 988 145
2023/12/27 13:56:49 i32.and            [*, |, 0, 0, 0, 1] 66 989 145
2023/12/27 13:56:49 select             [*, |, 0, 0, 0] 67 990 145
2023/12/27 13:56:49 local.set 4        [*, |, 0] 68 991 145
2023/12/27 13:56:49 loop 64            [*, |] 69 992 145
2023/12/27 13:56:49 local.get 1        [*, |, |] 70 993 145
2023/12/27 13:56:49 i32.const 1        [*, |, |, 9] 71 994 145
2023/12/27 13:56:49 i32.add            [*, |, |, 9, 1] 72 995 145
2023/12/27 13:56:49 local.set 1        [*, |, |, 10] 73 996 145
2023/12/27 13:56:49 local.get 4        [*, |, |] 74 997 145
2023/12/27 13:56:49 i64.const 7        [*, |, |, 0] 75 998 145
2023/12/27 13:56:49 i64.shr_u          [*, |, |, 0, 7] 76 999 145
2023/12/27 13:56:49 local.tee 4        [*, |, |, 0] 77 1000 145
2023/12/27 13:56:49 i64.const 0        [*, |, |, 0] 78 1001 145
2023/12/27 13:56:49 i64.ne             [*, |, |, 0, 0] 79 1002 145
2023/12/27 13:56:49 br_if 0            [*, |, |, 0] 80 1003 145
2023/12/27 13:56:49 end                [*, |, |] 81 1004 145
2023/12/27 13:56:49 local.get 2        [*, |] 82 1005 145
2023/12/27 13:56:49 local.get 1        [*, |, 8032] 83 1006 145
2023/12/27 13:56:49 i32.store [2, 0]   [*, |, 8032, 10] 84 1007 145
store at  8032
2023/12/27 13:56:49 block 64           [*, |] 85 1008 145
2023/12/27 13:56:49 local.get 3        [*, |, |] 86 1009 145
2023/12/27 13:56:49 i32.load [2, 4]    [*, |, |, 20] 87 1010 145
2023/12/27 13:56:49 local.get 3        [*, |, |, 0] 88 1011 145
2023/12/27 13:56:49 i32.load8_u [0, 0] [*, |, |, 0, 20] 89 1012 145
2023/12/27 13:56:49 local.tee 3        [*, |, |, 0, 0] 90 1013 145
2023/12/27 13:56:49 i32.const 1        [*, |, |, 0, 0] 91 1014 145
2023/12/27 13:56:49 i32.shr_u          [*, |, |, 0, 0, 1] 92 1015 145
2023/12/27 13:56:49 local.get 3        [*, |, |, 0, 0] 93 1016 145
2023/12/27 13:56:49 i32.const 1        [*, |, |, 0, 0, 0] 94 1017 145
2023/12/27 13:56:49 i32.and            [*, |, |, 0, 0, 0, 1] 95 1018 145
2023/12/27 13:56:49 select             [*, |, |, 0, 0, 0] 96 1019 145
2023/12/27 13:56:49 local.tee 3        [*, |, |, 0] 97 1020 145
2023/12/27 13:56:49 i32.eqz            [*, |, |, 0] 98 1021 145
2023/12/27 13:56:49 br_if 0            [*, |, |, 1] 99 1022 145
2023/12/27 13:56:49 local.get 2        [*, |, |] 100 1023 145
2023/12/27 13:56:49 local.get 3        [*, |, |, 8032] 101 1024 145
2023/12/27 13:56:49 local.get 1        [*, |, |, 8032, 0] 102 1025 145
2023/12/27 13:56:49 i32.add            [*, |, |, 8032, 0, 10] 103 1026 145
2023/12/27 13:56:49 local.tee 1        [*, |, |, 8032, 10] 104 1027 145
2023/12/27 13:56:49 i32.store [2, 0]   [*, |, |, 8032, 10] 105 1028 145
store at  8032
2023/12/27 13:56:49 end                [*, |, |] 106 1029 145
2023/12/27 13:56:49 local.get 0        [*, |] 107 1030 145
2023/12/27 13:56:49 i32.load [2, 12]   [*, |, 8040] 108 1031 145
2023/12/27 13:56:49 local.tee 3        [*, |, 32] 109 1032 145
2023/12/27 13:56:49 i64.load32_u [2, 4] [*, |, 32] 110 1033 145
2023/12/27 13:56:49 i64.const 0        [*, |, 0] 111 1034 145
2023/12/27 13:56:49 local.get 3        [*, |, 0, 0] 112 1035 145
2023/12/27 13:56:49 i32.load8_u [0, 0] [*, |, 0, 0, 32] 113 1036 145
2023/12/27 13:56:49 i32.const 1        [*, |, 0, 0, 0] 114 1037 145
2023/12/27 13:56:49 i32.and            [*, |, 0, 0, 0, 1] 115 1038 145
2023/12/27 13:56:49 select             [*, |, 0, 0, 0] 116 1039 145
2023/12/27 13:56:49 local.set 4        [*, |, 0] 117 1040 145
2023/12/27 13:56:49 loop 64            [*, |] 118 1041 145
2023/12/27 13:56:49 local.get 1        [*, |, |] 119 1042 145
2023/12/27 13:56:49 i32.const 1        [*, |, |, 10] 120 1043 145
2023/12/27 13:56:49 i32.add            [*, |, |, 10, 1] 121 1044 145
2023/12/27 13:56:49 local.set 1        [*, |, |, 11] 122 1045 145
2023/12/27 13:56:49 local.get 4        [*, |, |] 123 1046 145
2023/12/27 13:56:49 i64.const 7        [*, |, |, 0] 124 1047 145
2023/12/27 13:56:49 i64.shr_u          [*, |, |, 0, 7] 125 1048 145
2023/12/27 13:56:49 local.tee 4        [*, |, |, 0] 126 1049 145
2023/12/27 13:56:49 i64.const 0        [*, |, |, 0] 127 1050 145
2023/12/27 13:56:49 i64.ne             [*, |, |, 0, 0] 128 1051 145
2023/12/27 13:56:49 br_if 0            [*, |, |, 0] 129 1052 145
2023/12/27 13:56:49 end                [*, |, |] 130 1053 145
2023/12/27 13:56:49 local.get 2        [*, |] 131 1054 145
2023/12/27 13:56:49 local.get 1        [*, |, 8032] 132 1055 145
2023/12/27 13:56:49 i32.store [2, 0]   [*, |, 8032, 11] 133 1056 145
store at  8032
2023/12/27 13:56:49 block 64           [*, |] 134 1057 145
2023/12/27 13:56:49 local.get 3        [*, |, |] 135 1058 145
2023/12/27 13:56:49 i32.load [2, 4]    [*, |, |, 32] 136 1059 145
2023/12/27 13:56:49 local.get 3        [*, |, |, 0] 137 1060 145
2023/12/27 13:56:49 i32.load8_u [0, 0] [*, |, |, 0, 32] 138 1061 145
2023/12/27 13:56:49 local.tee 3        [*, |, |, 0, 0] 139 1062 145
2023/12/27 13:56:49 i32.const 1        [*, |, |, 0, 0] 140 1063 145
2023/12/27 13:56:49 i32.shr_u          [*, |, |, 0, 0, 1] 141 1064 145
2023/12/27 13:56:49 local.get 3        [*, |, |, 0, 0] 142 1065 145
2023/12/27 13:56:49 i32.const 1        [*, |, |, 0, 0, 0] 143 1066 145
2023/12/27 13:56:49 i32.and            [*, |, |, 0, 0, 0, 1] 144 1067 145
2023/12/27 13:56:49 select             [*, |, |, 0, 0, 0] 145 1068 145
2023/12/27 13:56:49 local.tee 3        [*, |, |, 0] 146 1069 145
2023/12/27 13:56:49 i32.eqz            [*, |, |, 0] 147 1070 145
2023/12/27 13:56:49 br_if 0            [*, |, |, 1] 148 1071 145
2023/12/27 13:56:49 local.get 2        [*, |, |] 149 1072 145
2023/12/27 13:56:49 local.get 3        [*, |, |, 8032] 150 1073 145
2023/12/27 13:56:49 local.get 1        [*, |, |, 8032, 0] 151 1074 145
2023/12/27 13:56:49 i32.add            [*, |, |, 8032, 0, 11] 152 1075 145
2023/12/27 13:56:49 local.tee 1        [*, |, |, 8032, 11] 153 1076 145
2023/12/27 13:56:49 i32.store [2, 0]   [*, |, |, 8032, 11] 154 1077 145
store at  8032
2023/12/27 13:56:49 end                [*, |, |] 155 1078 145
2023/12/27 13:56:49 local.get 0        [*, |] 156 1079 145
2023/12/27 13:56:49 i32.load [2, 16]   [*, |, 8040] 157 1080 145
2023/12/27 13:56:49 local.tee 3        [*, |, 44] 158 1081 145
2023/12/27 13:56:49 i64.load32_u [2, 4] [*, |, 44] 159 1082 145
2023/12/27 13:56:49 i64.const 0        [*, |, 0] 160 1083 145
2023/12/27 13:56:49 local.get 3        [*, |, 0, 0] 161 1084 145
2023/12/27 13:56:49 i32.load8_u [0, 0] [*, |, 0, 0, 44] 162 1085 145
2023/12/27 13:56:49 i32.const 1        [*, |, 0, 0, 0] 163 1086 145
2023/12/27 13:56:49 i32.and            [*, |, 0, 0, 0, 1] 164 1087 145
2023/12/27 13:56:49 select             [*, |, 0, 0, 0] 165 1088 145
2023/12/27 13:56:49 local.set 4        [*, |, 0] 166 1089 145
2023/12/27 13:56:49 loop 64            [*, |] 167 1090 145
2023/12/27 13:56:49 local.get 1        [*, |, |] 168 1091 145
2023/12/27 13:56:49 i32.const 1        [*, |, |, 11] 169 1092 145
2023/12/27 13:56:49 i32.add            [*, |, |, 11, 1] 170 1093 145
2023/12/27 13:56:49 local.set 1        [*, |, |, 12] 171 1094 145
2023/12/27 13:56:49 local.get 4        [*, |, |] 172 1095 145
2023/12/27 13:56:49 i64.const 7        [*, |, |, 0] 173 1096 145
2023/12/27 13:56:49 i64.shr_u          [*, |, |, 0, 7] 174 1097 145
2023/12/27 13:56:49 local.tee 4        [*, |, |, 0] 175 1098 145
2023/12/27 13:56:49 i64.const 0        [*, |, |, 0] 176 1099 145
2023/12/27 13:56:49 i64.ne             [*, |, |, 0, 0] 177 1100 145
2023/12/27 13:56:49 br_if 0            [*, |, |, 0] 178 1101 145
2023/12/27 13:56:49 end                [*, |, |] 179 1102 145
2023/12/27 13:56:49 local.get 2        [*, |] 180 1103 145
2023/12/27 13:56:49 local.get 1        [*, |, 8032] 181 1104 145
2023/12/27 13:56:49 i32.store [2, 0]   [*, |, 8032, 12] 182 1105 145
store at  8032
2023/12/27 13:56:49 block 64           [*, |] 183 1106 145
2023/12/27 13:56:49 local.get 3        [*, |, |] 184 1107 145
2023/12/27 13:56:49 i32.load [2, 4]    [*, |, |, 44] 185 1108 145
2023/12/27 13:56:49 local.get 3        [*, |, |, 0] 186 1109 145
2023/12/27 13:56:49 i32.load8_u [0, 0] [*, |, |, 0, 44] 187 1110 145
2023/12/27 13:56:49 local.tee 3        [*, |, |, 0, 0] 188 1111 145
2023/12/27 13:56:49 i32.const 1        [*, |, |, 0, 0] 189 1112 145
2023/12/27 13:56:49 i32.shr_u          [*, |, |, 0, 0, 1] 190 1113 145
2023/12/27 13:56:49 local.get 3        [*, |, |, 0, 0] 191 1114 145
2023/12/27 13:56:49 i32.const 1        [*, |, |, 0, 0, 0] 192 1115 145
2023/12/27 13:56:49 i32.and            [*, |, |, 0, 0, 0, 1] 193 1116 145
2023/12/27 13:56:49 select             [*, |, |, 0, 0, 0] 194 1117 145
2023/12/27 13:56:49 local.tee 3        [*, |, |, 0] 195 1118 145
2023/12/27 13:56:49 i32.eqz            [*, |, |, 0] 196 1119 145
2023/12/27 13:56:49 br_if 0            [*, |, |, 1] 197 1120 145
2023/12/27 13:56:49 local.get 2        [*, |, |] 198 1121 145
2023/12/27 13:56:49 local.get 3        [*, |, |, 8032] 199 1122 145
2023/12/27 13:56:49 local.get 1        [*, |, |, 8032, 0] 200 1123 145
2023/12/27 13:56:49 i32.add            [*, |, |, 8032, 0, 12] 201 1124 145
2023/12/27 13:56:49 local.tee 1        [*, |, |, 8032, 12] 202 1125 145
2023/12/27 13:56:49 i32.store [2, 0]   [*, |, |, 8032, 12] 203 1126 145
store at  8032
2023/12/27 13:56:49 end                [*, |, |] 204 1127 145
2023/12/27 13:56:49 local.get 0        [*, |] 205 1128 145
2023/12/27 13:56:49 i32.load [2, 20]   [*, |, 8040] 206 1129 145
2023/12/27 13:56:49 local.tee 0        [*, |, 56] 207 1130 145
2023/12/27 13:56:49 i64.load32_u [2, 4] [*, |, 56] 208 1131 145
2023/12/27 13:56:49 i64.const 0        [*, |, 0] 209 1132 145
2023/12/27 13:56:49 local.get 0        [*, |, 0, 0] 210 1133 145
2023/12/27 13:56:49 i32.load8_u [0, 0] [*, |, 0, 0, 56] 211 1134 145
2023/12/27 13:56:49 i32.const 1        [*, |, 0, 0, 0] 212 1135 145
2023/12/27 13:56:49 i32.and            [*, |, 0, 0, 0, 1] 213 1136 145
2023/12/27 13:56:49 select             [*, |, 0, 0, 0] 214 1137 145
2023/12/27 13:56:49 local.set 4        [*, |, 0] 215 1138 145
2023/12/27 13:56:49 loop 64            [*, |] 216 1139 145
2023/12/27 13:56:49 local.get 1        [*, |, |] 217 1140 145
2023/12/27 13:56:49 i32.const 1        [*, |, |, 12] 218 1141 145
2023/12/27 13:56:49 i32.add            [*, |, |, 12, 1] 219 1142 145
2023/12/27 13:56:49 local.set 1        [*, |, |, 13] 220 1143 145
2023/12/27 13:56:49 local.get 4        [*, |, |] 221 1144 145
2023/12/27 13:56:49 i64.const 7        [*, |, |, 0] 222 1145 145
2023/12/27 13:56:49 i64.shr_u          [*, |, |, 0, 7] 223 1146 145
2023/12/27 13:56:49 local.tee 4        [*, |, |, 0] 224 1147 145
2023/12/27 13:56:49 i64.const 0        [*, |, |, 0] 225 1148 145
2023/12/27 13:56:49 i64.ne             [*, |, |, 0, 0] 226 1149 145
2023/12/27 13:56:49 br_if 0            [*, |, |, 0] 227 1150 145
2023/12/27 13:56:49 end                [*, |, |] 228 1151 145
2023/12/27 13:56:49 local.get 2        [*, |] 229 1152 145
2023/12/27 13:56:49 local.get 1        [*, |, 8032] 230 1153 145
2023/12/27 13:56:49 i32.store [2, 0]   [*, |, 8032, 13] 231 1154 145
store at  8032
2023/12/27 13:56:49 block 64           [*, |] 232 1155 145
2023/12/27 13:56:49 local.get 0        [*, |, |] 233 1156 145
2023/12/27 13:56:49 i32.load [2, 4]    [*, |, |, 56] 234 1157 145
2023/12/27 13:56:49 local.get 0        [*, |, |, 0] 235 1158 145
2023/12/27 13:56:49 i32.load8_u [0, 0] [*, |, |, 0, 56] 236 1159 145
2023/12/27 13:56:49 local.tee 0        [*, |, |, 0, 0] 237 1160 145
2023/12/27 13:56:49 i32.const 1        [*, |, |, 0, 0] 238 1161 145
2023/12/27 13:56:49 i32.shr_u          [*, |, |, 0, 0, 1] 239 1162 145
2023/12/27 13:56:49 local.get 0        [*, |, |, 0, 0] 240 1163 145
2023/12/27 13:56:49 i32.const 1        [*, |, |, 0, 0, 0] 241 1164 145
2023/12/27 13:56:49 i32.and            [*, |, |, 0, 0, 0, 1] 242 1165 145
2023/12/27 13:56:49 select             [*, |, |, 0, 0, 0] 243 1166 145
2023/12/27 13:56:49 local.tee 0        [*, |, |, 0] 244 1167 145
2023/12/27 13:56:49 i32.eqz            [*, |, |, 0] 245 1168 145
2023/12/27 13:56:49 br_if 0            [*, |, |, 1] 246 1169 145
2023/12/27 13:56:49 local.get 2        [*, |, |] 247 1170 145
2023/12/27 13:56:49 local.get 0        [*, |, |, 8032] 248 1171 145
2023/12/27 13:56:49 local.get 1        [*, |, |, 8032, 0] 249 1172 145
2023/12/27 13:56:49 i32.add            [*, |, |, 8032, 0, 13] 250 1173 145
2023/12/27 13:56:49 i32.store [2, 0]   [*, |, |, 8032, 13] 251 1174 145
store at  8032
2023/12/27 13:56:49 end                [*, |, |] 252 1175 145
2023/12/27 13:56:49 end                [*, |] 253 1176 145
break of path_abort or out of scope
exit func: $return 145 -> 
2023/12/27 13:56:49 [*]
2023/12/27 13:56:49 return func $return 145 -> 
2023/12/27 13:56:49 ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ']
2023/12/27 13:56:49 block 64           [] 87 1178 142
2023/12/27 13:56:49 block 64           [|] 88 1179 142
2023/12/27 13:56:49 local.get 3        [|, |] 89 1180 142
2023/12/27 13:56:49 i32.load [2, 16]   [|, |, 8016] 90 1181 142
2023/12/27 13:56:49 local.tee 10       [|, |, 13] 91 1182 142
2023/12/27 13:56:49 i32.const 513      [|, |, 13] 92 1183 142
2023/12/27 13:56:49 i32.lt_u           [|, |, 13, 513] 93 1184 142
2023/12/27 13:56:49 br_if 0            [|, |, 1] 94 1185 142
2023/12/27 13:56:49 local.get 10       [|, |] 95 1186 142
2023/12/27 13:56:49 call 38            [|, |, 13] 96 1187 142
address:38
2023/12/27 13:56:49 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$sub512 38 -> '] 
2023/12/27 13:56:49 block 64           [|, |, *, |] 0 1188 38
2023/12/27 13:56:49 local.get 0        [|, |, *, |, |] 1 1189 38
2023/12/27 13:56:49 br_if 0            [|, |, *, |, |, 13] 2 1190 38
2023/12/27 13:56:49 i32.const 0        [|, |, *, |, |] 3 1191 38
2023/12/27 13:56:49 return             [|, |, *, |, |, 0] 4 1192 38
exit func: $sub512 38 -> 
2023/12/27 13:56:49 [|, |, *]
2023/12/27 13:56:49 return func $sub512 38 -> 
2023/12/27 13:56:49 ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ']
2023/12/27 13:56:49 local.set 2        [|, |, 0] 97 1193 142
2023/12/27 13:56:49 br 1               [|, |] 98 1194 142
2023/12/27 13:56:49 end                [|, |] 99 1195 142
2023/12/27 13:56:49 local.get 2        [|] 100 1196 142
2023/12/27 13:56:49 local.get 10       [|, 0] 101 1197 142
2023/12/27 13:56:49 i32.const 15       [|, 0, 13] 102 1198 142
2023/12/27 13:56:49 i32.add            [|, 0, 13, 15] 103 1199 142
2023/12/27 13:56:49 i32.const -16      [|, 0, 28] 104 1200 142
2023/12/27 13:56:49 i32.and            [|, 0, 28, -16] 105 1201 142
2023/12/27 13:56:49 i32.sub            [|, 0, 16] 106 1202 142
2023/12/27 13:56:49 local.tee 2        [|, -16] 107 1203 142
2023/12/27 13:56:49 global.set 0       [|, -16] 108 1204 142
2023/12/27 13:56:49 end                [|] 109 1205 142
2023/12/27 13:56:49 local.get 3        [] 110 1206 142
2023/12/27 13:56:49 local.get 2        [8016] 111 1207 142
2023/12/27 13:56:49 i32.store [2, 4]   [8016, -16] 112 1208 142
store at  8020
2023/12/27 13:56:49 local.get 3        [] 113 1209 142
2023/12/27 13:56:49 local.get 2        [8016] 114 1210 142
2023/12/27 13:56:49 i32.store [2, 0]   [8016, -16] 115 1211 142
store at  8016
2023/12/27 13:56:49 local.get 3        [] 116 1212 142
2023/12/27 13:56:49 local.get 2        [8016] 117 1213 142
2023/12/27 13:56:49 local.get 10       [8016, -16] 118 1214 142
2023/12/27 13:56:49 i32.add            [8016, -16, 13] 119 1215 142
2023/12/27 13:56:49 i32.store [2, 8]   [8016, -3] 120 1216 142
store at  8024
2023/12/27 13:56:49 local.get 3        [] 121 1217 142
2023/12/27 13:56:49 local.get 3        [8016] 122 1218 142
2023/12/27 13:56:49 i32.store [2, 16]  [8016, 8016] 123 1219 142
store at  8032
2023/12/27 13:56:49 local.get 3        [] 124 1220 142
2023/12/27 13:56:49 local.get 9        [8016] 125 1221 142
2023/12/27 13:56:49 i32.store [2, 44]  [8016, 56] 126 1222 142
store at  8060
2023/12/27 13:56:49 local.get 3        [] 127 1223 142
2023/12/27 13:56:49 local.get 8        [8016] 128 1224 142
2023/12/27 13:56:49 i32.store [2, 40]  [8016, 44] 129 1225 142
store at  8056
2023/12/27 13:56:49 local.get 3        [] 130 1226 142
2023/12/27 13:56:49 local.get 7        [8016] 131 1227 142
2023/12/27 13:56:49 i32.store [2, 36]  [8016, 32] 132 1228 142
store at  8052
2023/12/27 13:56:49 local.get 3        [] 133 1229 142
2023/12/27 13:56:49 local.get 6        [8016] 134 1230 142
2023/12/27 13:56:49 i32.store [2, 32]  [8016, 20] 135 1231 142
store at  8048
2023/12/27 13:56:49 local.get 3        [] 136 1232 142
2023/12/27 13:56:49 local.get 5        [8016] 137 1233 142
2023/12/27 13:56:49 i32.store [2, 28]  [8016, 8] 138 1234 142
store at  8044
2023/12/27 13:56:49 local.get 3        [] 139 1235 142
2023/12/27 13:56:49 local.get 1        [8016] 140 1236 142
2023/12/27 13:56:49 i32.store [2, 24]  [8016, 0] 141 1237 142
store at  8040
2023/12/27 13:56:49 local.get 3        [] 142 1238 142
2023/12/27 13:56:49 i32.const 24       [8016] 143 1239 142
2023/12/27 13:56:49 i32.add            [8016, 24] 144 1240 142
2023/12/27 13:56:49 local.get 3        [8040] 145 1241 142
2023/12/27 13:56:49 i32.const 16       [8040, 8016] 146 1242 142
2023/12/27 13:56:49 i32.add            [8040, 8016, 16] 147 1243 142
2023/12/27 13:56:49 call 146           [8040, 8032] 148 1244 142
address:146
2023/12/27 13:56:49 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$revert 146 -> '] 
2023/12/27 13:56:49 local.get 0        [*, |] 0 1245 146
2023/12/27 13:56:49 i32.load [2, 0]    [*, |, 8040] 1 1246 146
2023/12/27 13:56:49 local.set 2        [*, |, 0] 2 1247 146
2023/12/27 13:56:49 block 64           [*, |] 3 1248 146
2023/12/27 13:56:49 local.get 1        [*, |, |] 4 1249 146
2023/12/27 13:56:49 i32.load [2, 0]    [*, |, |, 8032] 5 1250 146
2023/12/27 13:56:49 local.tee 3        [*, |, |, 8016] 6 1251 146
2023/12/27 13:56:49 i32.load [2, 8]    [*, |, |, 8016] 7 1252 146
2023/12/27 13:56:49 local.get 3        [*, |, |, -3] 8 1253 146
2023/12/27 13:56:49 i32.load [2, 4]    [*, |, |, -3, 8016] 9 1254 146
2023/12/27 13:56:49 local.tee 4        [*, |, |, -3, -16] 10 1255 146
2023/12/27 13:56:49 i32.sub            [*, |, |, -3, -16] 11 1256 146
2023/12/27 13:56:49 i32.const 7        [*, |, |, 13] 12 1257 146
2023/12/27 13:56:49 i32.gt_s           [*, |, |, 13, 7] 13 1258 146
2023/12/27 13:56:49 br_if 0            [*, |, |, 1] 14 1259 146
2023/12/27 13:56:49 i32.const 0        [*, |, |] 15 1260 146
2023/12/27 13:56:49 i32.const 11396    [*, |, |, 0] 16 1261 146
2023/12/27 13:56:49 call 1             [*, |, |, 0, 11396] 17 1262 146
2023/12/27 13:56:49 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:49 local.get 3        [*, |, |] 18 1263 146
2023/12/27 13:56:49 i32.load [2, 4]    [*, |, |, 8016] 19 1264 146
2023/12/27 13:56:49 local.set 4        [*, |, |, -16] 20 1265 146
2023/12/27 13:56:49 end                [*, |, |] 21 1266 146
2023/12/27 13:56:49 local.get 4        [*, |] 22 1267 146
2023/12/27 13:56:49 local.get 2        [*, |, -16] 23 1268 146
2023/12/27 13:56:49 i32.const 8        [*, |, -16, 0] 24 1269 146
2023/12/27 13:56:49 call 5             [*, |, -16, 0, 8] 25 1270 146
2023/12/27 13:56:49 call eth.hostfunc : memcpy 5
action: []
2023/12/27 13:56:49 drop               [*, |, 0] 26 1271 146
2023/12/27 13:56:49 local.get 3        [*, |] 27 1272 146
2023/12/27 13:56:49 local.get 3        [*, |, 8016] 28 1273 146
2023/12/27 13:56:49 i32.load [2, 4]    [*, |, 8016, 8016] 29 1274 146
2023/12/27 13:56:49 i32.const 8        [*, |, 8016, -16] 30 1275 146
2023/12/27 13:56:49 i32.add            [*, |, 8016, -16, 8] 31 1276 146
2023/12/27 13:56:49 i32.store [2, 4]   [*, |, 8016, -8] 32 1277 146
store at  8020
2023/12/27 13:56:49 local.get 1        [*, |] 33 1278 146
2023/12/27 13:56:49 i32.load [2, 0]    [*, |, 8032] 34 1279 146
2023/12/27 13:56:50 local.get 0        [*, |, 8016] 35 1280 146
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, 8016, 8040] 36 1281 146
2023/12/27 13:56:50 call 147           [*, |, 8016, 8] 37 1282 146
address:147
2023/12/27 13:56:50 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$revert 146 -> ', '$invalid 147 -> '] 
2023/12/27 13:56:50 global.get 0       [*, |, *, |] 0 1283 147
2023/12/27 13:56:50 i32.const 16       [*, |, *, |, -16] 1 1284 147
2023/12/27 13:56:50 i32.sub            [*, |, *, |, -16, 16] 2 1285 147
2023/12/27 13:56:50 local.tee 2        [*, |, *, |, -32] 3 1286 147
2023/12/27 13:56:50 global.set 0       [*, |, *, |, -32] 4 1287 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |] 5 1288 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, 8] 6 1289 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, 0] 7 1290 147
2023/12/27 13:56:50 i32.load8_u [0, 0] [*, |, *, |, 0, 8] 8 1291 147
2023/12/27 13:56:50 local.tee 3        [*, |, *, |, 0, 0] 9 1292 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, 0, 0] 10 1293 147
2023/12/27 13:56:50 i32.shr_u          [*, |, *, |, 0, 0, 1] 11 1294 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, 0, 0] 12 1295 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, 0, 0, 0] 13 1296 147
2023/12/27 13:56:50 i32.and            [*, |, *, |, 0, 0, 0, 1] 14 1297 147
2023/12/27 13:56:50 select             [*, |, *, |, 0, 0, 0] 15 1298 147
2023/12/27 13:56:50 i64.extend_i32_u   [*, |, *, |, 0] 16 1299 147
2023/12/27 13:56:50 local.set 4        [*, |, *, |, 0] 17 1300 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |] 18 1301 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, 8016] 19 1302 147
2023/12/27 13:56:50 local.set 3        [*, |, *, |, -8] 20 1303 147
2023/12/27 13:56:50 loop 64            [*, |, *, |] 21 1304 147
2023/12/27 13:56:50 local.get 4        [*, |, *, |, |] 22 1305 147
2023/12/27 13:56:50 i32.wrap_i64       [*, |, *, |, |, 0] 23 1306 147
2023/12/27 13:56:50 local.set 5        [*, |, *, |, |, 0] 24 1307 147
2023/12/27 13:56:50 local.get 2        [*, |, *, |, |] 25 1308 147
2023/12/27 13:56:50 local.get 4        [*, |, *, |, |, -32] 26 1309 147
2023/12/27 13:56:50 i64.const 7        [*, |, *, |, |, -32, 0] 27 1310 147
2023/12/27 13:56:50 i64.shr_u          [*, |, *, |, |, -32, 0, 7] 28 1311 147
2023/12/27 13:56:50 local.tee 4        [*, |, *, |, |, -32, 0] 29 1312 147
2023/12/27 13:56:50 i64.const 0        [*, |, *, |, |, -32, 0] 30 1313 147
2023/12/27 13:56:50 i64.ne             [*, |, *, |, |, -32, 0, 0] 31 1314 147
2023/12/27 13:56:50 local.tee 6        [*, |, *, |, |, -32, 0] 32 1315 147
2023/12/27 13:56:50 i32.const 7        [*, |, *, |, |, -32, 0] 33 1316 147
2023/12/27 13:56:50 i32.shl            [*, |, *, |, |, -32, 0, 7] 34 1317 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, -32, 0] 35 1318 147
2023/12/27 13:56:50 i32.const 127      [*, |, *, |, |, -32, 0, 0] 36 1319 147
2023/12/27 13:56:50 i32.and            [*, |, *, |, |, -32, 0, 0, 127] 37 1320 147
2023/12/27 13:56:50 i32.or             [*, |, *, |, |, -32, 0, 0] 38 1321 147
2023/12/27 13:56:50 i32.store8 [0, 15] [*, |, *, |, |, -32, 0] 39 1322 147
store at  -17
2023/12/27 13:56:50 block 64           [*, |, *, |, |] 40 1323 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, |] 41 1324 147
2023/12/27 13:56:50 i32.load [2, 8]    [*, |, *, |, |, |, 8016] 42 1325 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, |, |, -3] 43 1326 147
2023/12/27 13:56:50 i32.sub            [*, |, *, |, |, |, -3, -8] 44 1327 147
2023/12/27 13:56:50 i32.const 0        [*, |, *, |, |, |, 5] 45 1328 147
2023/12/27 13:56:50 i32.gt_s           [*, |, *, |, |, |, 5, 0] 46 1329 147
2023/12/27 13:56:50 br_if 0            [*, |, *, |, |, |, 1] 47 1330 147
2023/12/27 13:56:50 i32.const 0        [*, |, *, |, |, |] 48 1331 147
2023/12/27 13:56:50 i32.const 11396    [*, |, *, |, |, |, 0] 49 1332 147
2023/12/27 13:56:50 call 1             [*, |, *, |, |, |, 0, 11396] 50 1333 147
2023/12/27 13:56:50 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, |] 51 1334 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, |, 8016] 52 1335 147
2023/12/27 13:56:50 local.set 3        [*, |, *, |, |, |, -8] 53 1336 147
2023/12/27 13:56:50 end                [*, |, *, |, |, |] 54 1337 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, |] 55 1338 147
2023/12/27 13:56:50 local.get 2        [*, |, *, |, |, -8] 56 1339 147
2023/12/27 13:56:50 i32.const 15       [*, |, *, |, |, -8, -32] 57 1340 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, |, -8, -32, 15] 58 1341 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, -8, -17] 59 1342 147
2023/12/27 13:56:50 call 5             [*, |, *, |, |, -8, -17, 1] 60 1343 147
2023/12/27 13:56:50 call eth.hostfunc : memcpy 5
action: []
2023/12/27 13:56:50 drop               [*, |, *, |, |, 0] 61 1344 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |] 62 1345 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, 8016] 63 1346 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, 8016, 8016] 64 1347 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, 8016, -8] 65 1348 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, |, 8016, -8, 1] 66 1349 147
2023/12/27 13:56:50 local.tee 3        [*, |, *, |, |, 8016, -7] 67 1350 147
2023/12/27 13:56:50 i32.store [2, 4]   [*, |, *, |, |, 8016, -7] 68 1351 147
store at  8020
2023/12/27 13:56:50 local.get 6        [*, |, *, |, |] 69 1352 147
2023/12/27 13:56:50 br_if 0            [*, |, *, |, |, 0] 70 1353 147
2023/12/27 13:56:50 end                [*, |, *, |, |] 71 1354 147
2023/12/27 13:56:50 block 64           [*, |, *, |] 72 1355 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, |] 73 1356 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, 8] 74 1357 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, |, 0] 75 1358 147
2023/12/27 13:56:50 i32.load8_u [0, 0] [*, |, *, |, |, 0, 8] 76 1359 147
2023/12/27 13:56:50 local.tee 5        [*, |, *, |, |, 0, 0] 77 1360 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, 0, 0] 78 1361 147
2023/12/27 13:56:50 i32.shr_u          [*, |, *, |, |, 0, 0, 1] 79 1362 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, 0, 0] 80 1363 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, 0, 0, 0] 81 1364 147
2023/12/27 13:56:50 i32.and            [*, |, *, |, |, 0, 0, 0, 1] 82 1365 147
2023/12/27 13:56:50 local.tee 6        [*, |, *, |, |, 0, 0, 0] 83 1366 147
2023/12/27 13:56:50 select             [*, |, *, |, |, 0, 0, 0] 84 1367 147
2023/12/27 13:56:50 local.tee 5        [*, |, *, |, |, 0] 85 1368 147
2023/12/27 13:56:50 i32.eqz            [*, |, *, |, |, 0] 86 1369 147
2023/12/27 13:56:50 br_if 0            [*, |, *, |, |, 1] 87 1370 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, |] 88 1371 147
2023/12/27 13:56:50 i32.load [2, 8]    [*, |, *, |, |, 8] 89 1372 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, |, 0] 90 1373 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, 0, 8] 91 1374 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, |, 0, 8, 1] 92 1375 147
2023/12/27 13:56:50 local.get 6        [*, |, *, |, |, 0, 9] 93 1376 147
2023/12/27 13:56:50 select             [*, |, *, |, |, 0, 9, 0] 94 1377 147
2023/12/27 13:56:50 local.set 6        [*, |, *, |, |, 9] 95 1378 147
2023/12/27 13:56:50 block 64           [*, |, *, |, |] 96 1379 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, |] 97 1380 147
2023/12/27 13:56:50 i32.load [2, 8]    [*, |, *, |, |, |, 8016] 98 1381 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, |, |, -3] 99 1382 147
2023/12/27 13:56:50 i32.sub            [*, |, *, |, |, |, -3, -7] 100 1383 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, |, 4] 101 1384 147
2023/12/27 13:56:50 i32.ge_s           [*, |, *, |, |, |, 4, 0] 102 1385 147
2023/12/27 13:56:50 br_if 0            [*, |, *, |, |, |, 1] 103 1386 147
2023/12/27 13:56:50 i32.const 0        [*, |, *, |, |, |] 104 1387 147
2023/12/27 13:56:50 i32.const 11396    [*, |, *, |, |, |, 0] 105 1388 147
2023/12/27 13:56:50 call 1             [*, |, *, |, |, |, 0, 11396] 106 1389 147
2023/12/27 13:56:50 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, |] 107 1390 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, |, 8016] 108 1391 147
2023/12/27 13:56:50 local.set 3        [*, |, *, |, |, |, -7] 109 1392 147
2023/12/27 13:56:50 end                [*, |, *, |, |, |] 110 1393 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, |] 111 1394 147
2023/12/27 13:56:50 local.get 6        [*, |, *, |, |, -7] 112 1395 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, -7, 9] 113 1396 147
2023/12/27 13:56:50 call 5             [*, |, *, |, |, -7, 9, 0] 114 1397 147
2023/12/27 13:56:50 call eth.hostfunc : memcpy 5
action: []
2023/12/27 13:56:50 drop               [*, |, *, |, |, 0] 115 1398 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |] 116 1399 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, 8016] 117 1400 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, 8016, 8016] 118 1401 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, 8016, -7] 119 1402 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, |, 8016, -7, 0] 120 1403 147
2023/12/27 13:56:50 i32.store [2, 4]   [*, |, *, |, |, 8016, -7] 121 1404 147
store at  8020
2023/12/27 13:56:50 end                [*, |, *, |, |] 122 1405 147
2023/12/27 13:56:50 local.get 2        [*, |, *, |] 123 1406 147
2023/12/27 13:56:50 i32.const 16       [*, |, *, |, -32] 124 1407 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, -32, 16] 125 1408 147
2023/12/27 13:56:50 global.set 0       [*, |, *, |, -16] 126 1409 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |] 127 1410 147
2023/12/27 13:56:50 end                [*, |, *, |, 8016] 128 1411 147
break of path_abort or out of scope
exit func: $invalid 147 -> 
2023/12/27 13:56:50 [*, |, *]
2023/12/27 13:56:50 return func $invalid 147 -> 
2023/12/27 13:56:50 ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$revert 146 -> ']
2023/12/27 13:56:50 drop               [*, |, 8016] 38 1413 146
2023/12/27 13:56:50 local.get 1        [*, |] 39 1414 146
2023/12/27 13:56:50 i32.load [2, 0]    [*, |, 8032] 40 1415 146
2023/12/27 13:56:50 local.get 0        [*, |, 8016] 41 1416 146
2023/12/27 13:56:50 i32.load [2, 8]    [*, |, 8016, 8040] 42 1417 146
2023/12/27 13:56:50 call 147           [*, |, 8016, 20] 43 1418 146
address:147
2023/12/27 13:56:50 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$revert 146 -> ', '$invalid 147 -> '] 
2023/12/27 13:56:50 global.get 0       [*, |, *, |] 0 1419 147
2023/12/27 13:56:50 i32.const 16       [*, |, *, |, -16] 1 1420 147
2023/12/27 13:56:50 i32.sub            [*, |, *, |, -16, 16] 2 1421 147
2023/12/27 13:56:50 local.tee 2        [*, |, *, |, -32] 3 1422 147
2023/12/27 13:56:50 global.set 0       [*, |, *, |, -32] 4 1423 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |] 5 1424 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, 20] 6 1425 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, 0] 7 1426 147
2023/12/27 13:56:50 i32.load8_u [0, 0] [*, |, *, |, 0, 20] 8 1427 147
2023/12/27 13:56:50 local.tee 3        [*, |, *, |, 0, 0] 9 1428 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, 0, 0] 10 1429 147
2023/12/27 13:56:50 i32.shr_u          [*, |, *, |, 0, 0, 1] 11 1430 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, 0, 0] 12 1431 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, 0, 0, 0] 13 1432 147
2023/12/27 13:56:50 i32.and            [*, |, *, |, 0, 0, 0, 1] 14 1433 147
2023/12/27 13:56:50 select             [*, |, *, |, 0, 0, 0] 15 1434 147
2023/12/27 13:56:50 i64.extend_i32_u   [*, |, *, |, 0] 16 1435 147
2023/12/27 13:56:50 local.set 4        [*, |, *, |, 0] 17 1436 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |] 18 1437 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, 8016] 19 1438 147
2023/12/27 13:56:50 local.set 3        [*, |, *, |, -7] 20 1439 147
2023/12/27 13:56:50 loop 64            [*, |, *, |] 21 1440 147
2023/12/27 13:56:50 local.get 4        [*, |, *, |, |] 22 1441 147
2023/12/27 13:56:50 i32.wrap_i64       [*, |, *, |, |, 0] 23 1442 147
2023/12/27 13:56:50 local.set 5        [*, |, *, |, |, 0] 24 1443 147
2023/12/27 13:56:50 local.get 2        [*, |, *, |, |] 25 1444 147
2023/12/27 13:56:50 local.get 4        [*, |, *, |, |, -32] 26 1445 147
2023/12/27 13:56:50 i64.const 7        [*, |, *, |, |, -32, 0] 27 1446 147
2023/12/27 13:56:50 i64.shr_u          [*, |, *, |, |, -32, 0, 7] 28 1447 147
2023/12/27 13:56:50 local.tee 4        [*, |, *, |, |, -32, 0] 29 1448 147
2023/12/27 13:56:50 i64.const 0        [*, |, *, |, |, -32, 0] 30 1449 147
2023/12/27 13:56:50 i64.ne             [*, |, *, |, |, -32, 0, 0] 31 1450 147
2023/12/27 13:56:50 local.tee 6        [*, |, *, |, |, -32, 0] 32 1451 147
2023/12/27 13:56:50 i32.const 7        [*, |, *, |, |, -32, 0] 33 1452 147
2023/12/27 13:56:50 i32.shl            [*, |, *, |, |, -32, 0, 7] 34 1453 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, -32, 0] 35 1454 147
2023/12/27 13:56:50 i32.const 127      [*, |, *, |, |, -32, 0, 0] 36 1455 147
2023/12/27 13:56:50 i32.and            [*, |, *, |, |, -32, 0, 0, 127] 37 1456 147
2023/12/27 13:56:50 i32.or             [*, |, *, |, |, -32, 0, 0] 38 1457 147
2023/12/27 13:56:50 i32.store8 [0, 15] [*, |, *, |, |, -32, 0] 39 1458 147
store at  -17
2023/12/27 13:56:50 block 64           [*, |, *, |, |] 40 1459 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, |] 41 1460 147
2023/12/27 13:56:50 i32.load [2, 8]    [*, |, *, |, |, |, 8016] 42 1461 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, |, |, -3] 43 1462 147
2023/12/27 13:56:50 i32.sub            [*, |, *, |, |, |, -3, -7] 44 1463 147
2023/12/27 13:56:50 i32.const 0        [*, |, *, |, |, |, 4] 45 1464 147
2023/12/27 13:56:50 i32.gt_s           [*, |, *, |, |, |, 4, 0] 46 1465 147
2023/12/27 13:56:50 br_if 0            [*, |, *, |, |, |, 1] 47 1466 147
2023/12/27 13:56:50 i32.const 0        [*, |, *, |, |, |] 48 1467 147
2023/12/27 13:56:50 i32.const 11396    [*, |, *, |, |, |, 0] 49 1468 147
2023/12/27 13:56:50 call 1             [*, |, *, |, |, |, 0, 11396] 50 1469 147
2023/12/27 13:56:50 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, |] 51 1470 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, |, 8016] 52 1471 147
2023/12/27 13:56:50 local.set 3        [*, |, *, |, |, |, -7] 53 1472 147
2023/12/27 13:56:50 end                [*, |, *, |, |, |] 54 1473 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, |] 55 1474 147
2023/12/27 13:56:50 local.get 2        [*, |, *, |, |, -7] 56 1475 147
2023/12/27 13:56:50 i32.const 15       [*, |, *, |, |, -7, -32] 57 1476 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, |, -7, -32, 15] 58 1477 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, -7, -17] 59 1478 147
2023/12/27 13:56:50 call 5             [*, |, *, |, |, -7, -17, 1] 60 1479 147
2023/12/27 13:56:50 call eth.hostfunc : memcpy 5
action: []
2023/12/27 13:56:50 drop               [*, |, *, |, |, 0] 61 1480 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |] 62 1481 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, 8016] 63 1482 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, 8016, 8016] 64 1483 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, 8016, -7] 65 1484 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, |, 8016, -7, 1] 66 1485 147
2023/12/27 13:56:50 local.tee 3        [*, |, *, |, |, 8016, -6] 67 1486 147
2023/12/27 13:56:50 i32.store [2, 4]   [*, |, *, |, |, 8016, -6] 68 1487 147
store at  8020
2023/12/27 13:56:50 local.get 6        [*, |, *, |, |] 69 1488 147
2023/12/27 13:56:50 br_if 0            [*, |, *, |, |, 0] 70 1489 147
2023/12/27 13:56:50 end                [*, |, *, |, |] 71 1490 147
2023/12/27 13:56:50 block 64           [*, |, *, |] 72 1491 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, |] 73 1492 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, 20] 74 1493 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, |, 0] 75 1494 147
2023/12/27 13:56:50 i32.load8_u [0, 0] [*, |, *, |, |, 0, 20] 76 1495 147
2023/12/27 13:56:50 local.tee 5        [*, |, *, |, |, 0, 0] 77 1496 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, 0, 0] 78 1497 147
2023/12/27 13:56:50 i32.shr_u          [*, |, *, |, |, 0, 0, 1] 79 1498 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, 0, 0] 80 1499 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, 0, 0, 0] 81 1500 147
2023/12/27 13:56:50 i32.and            [*, |, *, |, |, 0, 0, 0, 1] 82 1501 147
2023/12/27 13:56:50 local.tee 6        [*, |, *, |, |, 0, 0, 0] 83 1502 147
2023/12/27 13:56:50 select             [*, |, *, |, |, 0, 0, 0] 84 1503 147
2023/12/27 13:56:50 local.tee 5        [*, |, *, |, |, 0] 85 1504 147
2023/12/27 13:56:50 i32.eqz            [*, |, *, |, |, 0] 86 1505 147
2023/12/27 13:56:50 br_if 0            [*, |, *, |, |, 1] 87 1506 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, |] 88 1507 147
2023/12/27 13:56:50 i32.load [2, 8]    [*, |, *, |, |, 20] 89 1508 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, |, 0] 90 1509 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, 0, 20] 91 1510 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, |, 0, 20, 1] 92 1511 147
2023/12/27 13:56:50 local.get 6        [*, |, *, |, |, 0, 21] 93 1512 147
2023/12/27 13:56:50 select             [*, |, *, |, |, 0, 21, 0] 94 1513 147
2023/12/27 13:56:50 local.set 6        [*, |, *, |, |, 21] 95 1514 147
2023/12/27 13:56:50 block 64           [*, |, *, |, |] 96 1515 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, |] 97 1516 147
2023/12/27 13:56:50 i32.load [2, 8]    [*, |, *, |, |, |, 8016] 98 1517 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, |, |, -3] 99 1518 147
2023/12/27 13:56:50 i32.sub            [*, |, *, |, |, |, -3, -6] 100 1519 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, |, 3] 101 1520 147
2023/12/27 13:56:50 i32.ge_s           [*, |, *, |, |, |, 3, 0] 102 1521 147
2023/12/27 13:56:50 br_if 0            [*, |, *, |, |, |, 1] 103 1522 147
2023/12/27 13:56:50 i32.const 0        [*, |, *, |, |, |] 104 1523 147
2023/12/27 13:56:50 i32.const 11396    [*, |, *, |, |, |, 0] 105 1524 147
2023/12/27 13:56:50 call 1             [*, |, *, |, |, |, 0, 11396] 106 1525 147
2023/12/27 13:56:50 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, |] 107 1526 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, |, 8016] 108 1527 147
2023/12/27 13:56:50 local.set 3        [*, |, *, |, |, |, -6] 109 1528 147
2023/12/27 13:56:50 end                [*, |, *, |, |, |] 110 1529 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, |] 111 1530 147
2023/12/27 13:56:50 local.get 6        [*, |, *, |, |, -6] 112 1531 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, -6, 21] 113 1532 147
2023/12/27 13:56:50 call 5             [*, |, *, |, |, -6, 21, 0] 114 1533 147
2023/12/27 13:56:50 call eth.hostfunc : memcpy 5
action: []
2023/12/27 13:56:50 drop               [*, |, *, |, |, 0] 115 1534 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |] 116 1535 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, 8016] 117 1536 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, 8016, 8016] 118 1537 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, 8016, -6] 119 1538 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, |, 8016, -6, 0] 120 1539 147 13:56:50 i64.ne             [*, |, *, |, |, -32, 0, 0] 31 1586 147
2023/12/27 13:56:50 local.tee 6        [*, |, *, |, |, -32, 0] 32 1587 147
2023/12/27 13:56:50 i32.const 7        [*, |, *, |, |, -32, 0] 33 1588 147
2023/12/27 13:56:50 i32.shl            [*, |, *, |, |, -32, 0, 7] 34 1589 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, -32, 0] 35 1590 147
2023/12/27 13:56:50 i32.const 127      [*, |, *, |, |, -32, 0, 0] 36 1591 147
2023/12/27 13:56:50 i32.and            [*, |, *, |, |, -32, 0, 0, 127] 37 1592 147
2023/12/27 13:56:50 i32.or             [*, |, *, |, |, -32, 0, 0] 38 1593 147
2023/12/27 13:56:50 i32.store8 [0, 15] [*, |, *, |, |, -32, 0] 39 1594 147
store at  -17
2023/12/27 13:56:50 block 64           [*, |, *, |, |] 40 1595 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, |] 41 1596 147
2023/12/27 13:56:50 i32.load [2, 8]    [*, |, *, |, |, |, 8016] 42 1597 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, |, |, -3] 43 1598 147
2023/12/27 13:56:50 i32.sub            [*, |, *, |, |, |, -3, -6] 44 1599 147
2023/12/27 13:56:50 i32.const 0        [*, |, *, |, |, |, 3] 45 1600 147
2023/12/27 13:56:50 i32.gt_s           [*, |, *, |, |, |, 3, 0] 46 1601 147
2023/12/27 13:56:50 br_if 0            [*, |, *, |, |, |, 1] 47 1602 147
2023/12/27 13:56:50 i32.const 0        [*, |, *, |, |, |] 48 1603 147
2023/12/27 13:56:50 i32.const 11396    [*, |, *, |, |, |, 0] 49 1604 147
2023/12/27 13:56:50 call 1             [*, |, *, |, |, |, 0, 11396] 50 1605 147
2023/12/27 13:56:50 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, |] 51 1606 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, |, 8016] 52 1607 147
2023/12/27 13:56:50 local.set 3        [*, |, *, |, |, |, -6] 53 1608 147
2023/12/27 13:56:50 end                [*, |, *, |, |, |] 54 1609 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, |] 55 1610 147
2023/12/27 13:56:50 local.get 2        [*, |, *, |, |, -6] 56 1611 147
2023/12/27 13:56:50 i32.const 15       [*, |, *, |, |, -6, -32] 57 1612 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, |, -6, -32, 15] 58 1613 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, -6, -17] 59 1614 147
2023/12/27 13:56:50 call 5             [*, |, *, |, |, -6, -17, 1] 60 1615 147
2023/12/27 13:56:50 call eth.hostfunc : memcpy 5
action: []
2023/12/27 13:56:50 drop               [*, |, *, |, |, 0] 61 1616 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |] 62 1617 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, 8016] 63 1618 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, 8016, 8016] 64 1619 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, 8016, -6] 65 1620 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, |, 8016, -6, 1] 66 1621 147
2023/12/27 13:56:50 local.tee 3        [*, |, *, |, |, 8016, -5] 67 1622 147
2023/12/27 13:56:50 i32.store [2, 4]   [*, |, *, |, |, 8016, -5] 68 1623 147
store at  8020
2023/12/27 13:56:50 local.get 6        [*, |, *, |, |] 69 1624 147
2023/12/27 13:56:50 br_if 0            [*, |, *, |, |, 0] 70 1625 147
2023/12/27 13:56:50 end                [*, |, *, |, |] 71 1626 147
2023/12/27 13:56:50 block 64           [*, |, *, |] 72 1627 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, |] 73 1628 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, 32] 74 1629 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, |, 0] 75 1630 147
2023/12/27 13:56:50 i32.load8_u [0, 0] [*, |, *, |, |, 0, 32] 76 1631 147
2023/12/27 13:56:50 local.tee 5        [*, |, *, |, |, 0, 0] 77 1632 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, 0, 0] 78 1633 147
2023/12/27 13:56:50 i32.shr_u          [*, |, *, |, |, 0, 0, 1] 79 1634 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, 0, 0] 80 1635 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, 0, 0, 0] 81 1636 147
2023/12/27 13:56:50 i32.and            [*, |, *, |, |, 0, 0, 0, 1] 82 1637 147
2023/12/27 13:56:50 local.tee 6        [*, |, *, |, |, 0, 0, 0] 83 1638 147
2023/12/27 13:56:50 select             [*, |, *, |, |, 0, 0, 0] 84 1639 147
2023/12/27 13:56:50 local.tee 5        [*, |, *, |, |, 0] 85 1640 147
2023/12/27 13:56:50 i32.eqz            [*, |, *, |, |, 0] 86 1641 147
2023/12/27 13:56:50 br_if 0            [*, |, *, |, |, 1] 87 1642 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, |] 88 1643 147
2023/12/27 13:56:50 i32.load [2, 8]    [*, |, *, |, |, 32] 89 1644 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, |, 0] 90 1645 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, 0, 32] 91 1646 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, |, 0, 32, 1] 92 1647 147
2023/12/27 13:56:50 local.get 6        [*, |, *, |, |, 0, 33] 93 1648 147
2023/12/27 13:56:50 select             [*, |, *, |, |, 0, 33, 0] 94 1649 147
2023/12/27 13:56:50 local.set 6        [*, |, *, |, |, 33] 95 1650 147
2023/12/27 13:56:50 block 64           [*, |, *, |, |] 96 1651 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, |] 97 1652 147
2023/12/27 13:56:50 i32.load [2, 8]    [*, |, *, |, |, |, 8016] 98 1653 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, |, |, -3] 99 1654 147
2023/12/27 13:56:50 i32.sub            [*, |, *, |, |, |, -3, -5] 100 1655 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, |, 2] 101 1656 147
2023/12/27 13:56:50 i32.ge_s           [*, |, *, |, |, |, 2, 0] 102 1657 147
2023/12/27 13:56:50 br_if 0            [*, |, *, |, |, |, 1] 103 1658 147
2023/12/27 13:56:50 i32.const 0        [*, |, *, |, |, |] 104 1659 147
2023/12/27 13:56:50 i32.const 11396    [*, |, *, |, |, |, 0] 105 1660 147
2023/12/27 13:56:50 call 1             [*, |, *, |, |, |, 0, 11396] 106 1661 147
2023/12/27 13:56:50 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, |] 107 1662 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, |, 8016] 108 1663 147
2023/12/27 13:56:50 local.set 3        [*, |, *, |, |, |, -5] 109 1664 147
2023/12/27 13:56:50 end                [*, |, *, |, |, |] 110 1665 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, |] 111 1666 147
2023/12/27 13:56:50 local.get 6        [*, |, *, |, |, -5] 112 1667 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, -5, 33] 113 1668 147
2023/12/27 13:56:50 call 5             [*, |, *, |, |, -5, 33, 0] 114 1669 147
2023/12/27 13:56:50 call eth.hostfunc : memcpy 5
action: []
2023/12/27 13:56:50 drop               [*, |, *, |, |, 0] 115 1670 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |] 116 1671 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, 8016] 117 1672 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, 8016, 8016] 118 1673 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, 8016, -5] 119 1674 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, |, 8016, -5, 0] 120 1675 147
2023/12/27 13:56:50 i32.store [2, 4]   [*, |, *, |, |, 8016, -5] 121 1676 147
store at  8020
2023/12/27 13:56:50 end                [*, |, *, |, |] 122 1677 147
2023/12/27 13:56:50 local.get 2        [*, |, *, |] 123 1678 147
2023/12/27 13:56:50 i32.const 16       [*, |, *, |, -32] 124 1679 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, -32, 16] 125 1680 147
2023/12/27 13:56:50 global.set 0       [*, |, *, |, -16] 126 1681 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |] 127 1682 147
2023/12/27 13:56:50 end                [*, |, *, |, 8016] 128 1683 147
break of path_abort or out of scope
exit func: $invalid 147 -> 
2023/12/27 13:56:50 [*, |, *]
2023/12/27 13:56:50 return func $invalid 147 -> 
2023/12/27 13:56:50 ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$revert 146 -> ']
2023/12/27 13:56:50 drop               [*, |, 8016] 50 1685 146
2023/12/27 13:56:50 local.get 1        [*, |] 51 1686 146
2023/12/27 13:56:50 i32.load [2, 0]    [*, |, 8032] 52 1687 146
2023/12/27 13:56:50 local.get 0        [*, |, 8016] 53 1688 146
2023/12/27 13:56:50 i32.load [2, 16]   [*, |, 8016, 8040] 54 1689 146
2023/12/27 13:56:50 call 147           [*, |, 8016, 44] 55 1690 146
address:147
2023/12/27 13:56:50 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$revert 146 -> ', '$invalid 147 -> '] 
2023/12/27 13:56:50 global.get 0       [*, |, *, |] 0 1691 147
2023/12/27 13:56:50 i32.const 16       [*, |, *, |, -16] 1 1692 147
2023/12/27 13:56:50 i32.sub            [*, |, *, |, -16, 16] 2 1693 147
2023/12/27 13:56:50 local.tee 2        [*, |, *, |, -32] 3 1694 147
2023/12/27 13:56:50 global.set 0       [*, |, *, |, -32] 4 1695 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |] 5 1696 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, 44] 6 1697 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, 0] 7 1698 147
2023/12/27 13:56:50 i32.load8_u [0, 0] [*, |, *, |, 0, 44] 8 1699 147
2023/12/27 13:56:50 local.tee 3        [*, |, *, |, 0, 0] 9 1700 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, 0, 0] 10 1701 147
2023/12/27 13:56:50 i32.shr_u          [*, |, *, |, 0, 0, 1] 11 1702 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, 0, 0] 12 1703 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, 0, 0, 0] 13 1704 147
2023/12/27 13:56:50 i32.and            [*, |, *, |, 0, 0, 0, 1] 14 1705 147
2023/12/27 13:56:50 select             [*, |, *, |, 0, 0, 0] 15 1706 147
2023/12/27 13:56:50 i64.extend_i32_u   [*, |, *, |, 0] 16 1707 147
2023/12/27 13:56:50 local.set 4        [*, |, *, |, 0] 17 1708 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |] 18 1709 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, 8016] 19 1710 147
2023/12/27 13:56:50 local.set 3        [*, |, *, |, -5] 20 1711 147
2023/12/27 13:56:50 loop 64            [*, |, *, |] 21 1712 147
2023/12/27 13:56:50 local.get 4        [*, |, *, |, |] 22 1713 147
2023/12/27 13:56:50 i32.wrap_i64       [*, |, *, |, |, 0] 23 1714 147
2023/12/27 13:56:50 local.set 5        [*, |, *, |, |, 0] 24 1715 147
2023/12/27 13:56:50 local.get 2        [*, |, *, |, |] 25 1716 147
2023/12/27 13:56:50 local.get 4        [*, |, *, |, |, -32] 26 1717 147
2023/12/27 13:56:50 i64.const 7        [*, |, *, |, |, -32, 0] 27 1718 147
2023/12/27 13:56:50 i64.shr_u          [*, |, *, |, |, -32, 0, 7] 28 1719 147
2023/12/27 13:56:50 local.tee 4        [*, |, *, |, |, -32, 0] 29 1720 147
2023/12/27 13:56:50 i64.const 0        [*, |, *, |, |, -32, 0] 30 1721 147
2023/12/27 13:56:50 i64.ne             [*, |, *, |, |, -32, 0, 0] 31 1722 147
2023/12/27 13:56:50 local.tee 6        [*, |, *, |, |, -32, 0] 32 1723 147
2023/12/27 13:56:50 i32.const 7        [*, |, *, |, |, -32, 0] 33 1724 147
2023/12/27 13:56:50 i32.shl            [*, |, *, |, |, -32, 0, 7] 34 1725 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, -32, 0] 35 1726 147
2023/12/27 13:56:50 i32.const 127      [*, |, *, |, |, -32, 0, 0] 36 1727 147
2023/12/27 13:56:50 i32.and            [*, |, *, |, |, -32, 0, 0, 127] 37 1728 147
2023/12/27 13:56:50 i32.or             [*, |, *, |, |, -32, 0, 0] 38 1729 147
2023/12/27 13:56:50 i32.store8 [0, 15] [*, |, *, |, |, -32, 0] 39 1730 147
store at  -17
2023/12/27 13:56:50 block 64           [*, |, *, |, |] 40 1731 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, |] 41 1732 147
2023/12/27 13:56:50 i32.load [2, 8]    [*, |, *, |, |, |, 8016] 42 1733 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, |, |, -3] 43 1734 147
2023/12/27 13:56:50 i32.sub            [*, |, *, |, |, |, -3, -5] 44 1735 147
2023/12/27 13:56:50 i32.const 0        [*, |, *, |, |, |, 2] 45 1736 147
2023/12/27 13:56:50 i32.gt_s           [*, |, *, |, |, |, 2, 0] 46 1737 147
2023/12/27 13:56:50 br_if 0            [*, |, *, |, |, |, 1] 47 1738 147
2023/12/27 13:56:50 i32.const 0        [*, |, *, |, |, |] 48 1739 147
2023/12/27 13:56:50 i32.const 11396    [*, |, *, |, |, |, 0] 49 1740 147
2023/12/27 13:56:50 call 1             [*, |, *, |, |, |, 0, 11396] 50 1741 147
2023/12/27 13:56:50 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, |] 51 1742 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, |, 8016] 52 1743 147
2023/12/27 13:56:50 local.set 3        [*, |, *, |, |, |, -5] 53 1744 147
2023/12/27 13:56:50 end                [*, |, *, |, |, |] 54 1745 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, |] 55 1746 147
2023/12/27 13:56:50 local.get 2        [*, |, *, |, |, -5] 56 1747 147
2023/12/27 13:56:50 i32.const 15       [*, |, *, |, |, -5, -32] 57 1748 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, |, -5, -32, 15] 58 1749 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, -5, -17] 59 1750 147
2023/12/27 13:56:50 call 5             [*, |, *, |, |, -5, -17, 1] 60 1751 147
2023/12/27 13:56:50 call eth.hostfunc : memcpy 5
action: []
2023/12/27 13:56:50 drop               [*, |, *, |, |, 0] 61 1752 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |] 62 1753 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, 8016] 63 1754 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, 8016, 8016] 64 1755 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, 8016, -5] 65 1756 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, |, 8016, -5, 1] 66 1757 147
2023/12/27 13:56:50 local.tee 3        [*, |, *, |, |, 8016, -4] 67 1758 147
2023/12/27 13:56:50 i32.store [2, 4]   [*, |, *, |, |, 8016, -4] 68 1759 147
store at  8020
2023/12/27 13:56:50 local.get 6        [*, |, *, |, |] 69 1760 147
2023/12/27 13:56:50 br_if 0            [*, |, *, |, |, 0] 70 1761 147
2023/12/27 13:56:50 end                [*, |, *, |, |] 71 1762 147
2023/12/27 13:56:50 block 64           [*, |, *, |] 72 1763 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, |] 73 1764 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, 44] 74 1765 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, |, 0] 75 1766 147
2023/12/27 13:56:50 i32.load8_u [0, 0] [*, |, *, |, |, 0, 44] 76 1767 147
2023/12/27 13:56:50 local.tee 5        [*, |, *, |, |, 0, 0] 77 1768 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, 0, 0] 78 1769 147
2023/12/27 13:56:50 i32.shr_u          [*, |, *, |, |, 0, 0, 1] 79 1770 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, 0, 0] 80 1771 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, 0, 0, 0] 81 1772 147
2023/12/27 13:56:50 i32.and            [*, |, *, |, |, 0, 0, 0, 1] 82 1773 147
2023/12/27 13:56:50 local.tee 6        [*, |, *, |, |, 0, 0, 0] 83 1774 147
2023/12/27 13:56:50 select             [*, |, *, |, |, 0, 0, 0] 84 1775 147
2023/12/27 13:56:50 local.tee 5        [*, |, *, |, |, 0] 85 1776 147
2023/12/27 13:56:50 i32.eqz            [*, |, *, |, |, 0] 86 1777 147
2023/12/27 13:56:50 br_if 0            [*, |, *, |, |, 1] 87 1778 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, |] 88 1779 147
2023/12/27 13:56:50 i32.load [2, 8]    [*, |, *, |, |, 44] 89 1780 147
2023/12/27 13:56:50 local.get 1        [*, |, *, |, |, 0] 90 1781 147
2023/12/27 13:56:50 i32.const 1        [*, |, *, |, |, 0, 44] 91 1782 147
2023/12/27 13:56:50 i32.add            [*, |, *, |, |, 0, 44, 1] 92 1783 147
2023/12/27 13:56:50 local.get 6        [*, |, *, |, |, 0, 45] 93 1784 147
2023/12/27 13:56:50 select             [*, |, *, |, |, 0, 45, 0] 94 1785 147
2023/12/27 13:56:50 local.set 6        [*, |, *, |, |, 45] 95 1786 147
2023/12/27 13:56:50 block 64           [*, |, *, |, |] 96 1787 147
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, |] 97 1788 147
2023/12/27 13:56:50 i32.load [2, 8]    [*, |, *, |, |, |, 8016] 98 1789 147
2023/12/27 13:56:50 local.get 3        [*, |, *, |, |, |, -3] 99 1790 147
2023/12/27 13:56:50 i32.sub            [*, |, *, |, |, |, -3, -4] 100 1791 147
2023/12/27 13:56:50 local.get 5        [*, |, *, |, |, |, 1] 101 1792 147
2023/12/27 13:56:50 i32.ge_s           [*, |, *, |, |, |, 1, 0] 102 1793 147
2023/12/27 13:56:50 br_if 0            [*, |, *, |, |, |, 1] 103 1794 147
2023/12/27 13:56:50 i32.const 0        [*, |, *, |, |, |] 104 1795 147
2023/12/27 13:56:50 i32.const 11396    [*, |, *, |, |, |, 0] 105 1796 147
2023/12/27 13:56:50 call 1             [*, |, *, |, |, |, 0, 11396] 106 1797 147
2023/12/27 13:56:50 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:50 local.get 0        [*, |, *, |, |, |] 107 1798 147
2023/12/27 13:56:50 i32.load [2, 4]    [*, |, *, |, |, |, 8016] 108 1799 147
2023/12/27 13:56:51 local.set 3        [*, |, *, |, |, |, -4] 109 1800 147
2023/12/27 13:56:51 end                [*, |, *, |, |, |] 110 1801 147
2023/12/27 13:56:51 local.get 3        [*, |, *, |, |] 111 1802 147
2023/12/27 13:56:51 local.get 6        [*, |, *, |, |, -4] 112 1803 147
2023/12/27 13:56:51 local.get 5        [*, |, *, |, |, -4, 45] 113 1804 147
2023/12/27 13:56:51 call 5             [*, |, *, |, |, -4, 45, 0] 114 1805 147
2023/12/27 13:56:51 call eth.hostfunc : memcpy 5
action: []
2023/12/27 13:56:51 drop               [*, |, *, |, |, 0] 115 1806 147
2023/12/27 13:56:51 local.get 0        [*, |, *, |, |] 116 1807 147
2023/12/27 13:56:51 local.get 0        [*, |, *, |, |, 8016] 117 1808 147
2023/12/27 13:56:51 i32.load [2, 4]    [*, |, *, |, |, 8016, 8016] 118 1809 147
2023/12/27 13:56:51 local.get 5        [*, |, *, |, |, 8016, -4] 119 1810 147
2023/12/27 13:56:51 i32.add            [*, |, *, |, |, 8016, -4, 0] 120 1811 147
2023/12/27 13:56:51 i32.store [2, 4]   [*, |, *, |, |, 8016, -4] 121 1812 147
store at  8020
2023/12/27 13:56:51 end                [*, |, *, |, |] 122 1813 147
2023/12/27 13:56:51 local.get 2        [*, |, *, |] 123 1814 147
2023/12/27 13:56:51 i32.const 16       [*, |, *, |, -32] 124 1815 147
2023/12/27 13:56:51 i32.add            [*, |, *, |, -32, 16] 125 1816 147
2023/12/27 13:56:51 global.set 0       [*, |, *, |, -16] 126 1817 147
2023/12/27 13:56:51 local.get 0        [*, |, *, |] 127 1818 147
2023/12/27 13:56:51 end                [*, |, *, |, 8016] 128 1819 147
break of path_abort or out of scope
exit func: $invalid 147 -> 
2023/12/27 13:56:51 [*, |, *]
2023/12/27 13:56:51 return func $invalid 147 -> 
2023/12/27 13:56:51 ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$revert 146 -> ']
2023/12/27 13:56:51 drop               [*, |, 8016] 56 1821 146
2023/12/27 13:56:51 local.get 1        [*, |] 57 1822 146
2023/12/27 13:56:51 i32.load [2, 0]    [*, |, 8032] 58 1823 146
2023/12/27 13:56:51 local.get 0        [*, |, 8016] 59 1824 146
2023/12/27 13:56:51 i32.load [2, 20]   [*, |, 8016, 8040] 60 1825 146
2023/12/27 13:56:51 call 147           [*, |, 8016, 56] 61 1826 146
address:147
2023/12/27 13:56:51 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$revert 146 -> ', '$invalid 147 -> '] 
2023/12/27 13:56:51 global.get 0       [*, |, *, |] 0 1827 147
2023/12/27 13:56:51 i32.const 16       [*, |, *, |, -16] 1 1828 147
2023/12/27 13:56:51 i32.sub            [*, |, *, |, -16, 16] 2 1829 147
2023/12/27 13:56:51 local.tee 2        [*, |, *, |, -32] 3 1830 147
2023/12/27 13:56:51 global.set 0       [*, |, *, |, -32] 4 1831 147
2023/12/27 13:56:51 local.get 1        [*, |, *, |] 5 1832 147
2023/12/27 13:56:51 i32.load [2, 4]    [*, |, *, |, 56] 6 1833 147
2023/12/27 13:56:51 local.get 1        [*, |, *, |, 0] 7 1834 147
2023/12/27 13:56:51 i32.load8_u [0, 0] [*, |, *, |, 0, 56] 8 1835 147
2023/12/27 13:56:51 local.tee 3        [*, |, *, |, 0, 0] 9 1836 147
2023/12/27 13:56:51 i32.const 1        [*, |, *, |, 0, 0] 10 1837 147
2023/12/27 13:56:51 i32.shr_u          [*, |, *, |, 0, 0, 1] 11 1838 147
2023/12/27 13:56:51 local.get 3        [*, |, *, |, 0, 0] 12 1839 147
2023/12/27 13:56:51 i32.const 1        [*, |, *, |, 0, 0, 0] 13 1840 147
2023/12/27 13:56:51 i32.and            [*, |, *, |, 0, 0, 0, 1] 14 1841 147
2023/12/27 13:56:51 select             [*, |, *, |, 0, 0, 0] 15 1842 147
2023/12/27 13:56:51 i64.extend_i32_u   [*, |, *, |, 0] 16 1843 147
2023/12/27 13:56:51 local.set 4        [*, |, *, |, 0] 17 1844 147
2023/12/27 13:56:51 local.get 0        [*, |, *, |] 18 1845 147
2023/12/27 13:56:51 i32.load [2, 4]    [*, |, *, |, 8016] 19 1846 147
2023/12/27 13:56:51 local.set 3        [*, |, *, |, -4] 20 1847 147
2023/12/27 13:56:51 loop 64            [*, |, *, |] 21 1848 147
2023/12/27 13:56:51 local.get 4        [*, |, *, |, |] 22 1849 147
2023/12/27 13:56:51 i32.wrap_i64       [*, |, *, |, |, 0] 23 1850 147
2023/12/27 13:56:51 local.set 5        [*, |, *, |, |, 0] 24 1851 147
2023/12/27 13:56:51 local.get 2        [*, |, *, |, |] 25 1852 147
2023/12/27 13:56:51 local.get 4        [*, |, *, |, |, -32] 26 1853 147
2023/12/27 13:56:51 i64.const 7        [*, |, *, |, |, -32, 0] 27 1854 147
2023/12/27 13:56:51 i64.shr_u          [*, |, *, |, |, -32, 0, 7] 28 1855 147
2023/12/27 13:56:51 local.tee 4        [*, |, *, |, |, -32, 0] 29 1856 147
2023/12/27 13:56:51 i64.const 0        [*, |, *, |, |, -32, 0] 30 1857 147
2023/12/27 13:56:51 i64.ne             [*, |, *, |, |, -32, 0, 0] 31 1858 147
2023/12/27 13:56:51 local.tee 6        [*, |, *, |, |, -32, 0] 32 1859 147
2023/12/27 13:56:51 i32.const 7        [*, |, *, |, |, -32, 0] 33 1860 147
2023/12/27 13:56:51 i32.shl            [*, |, *, |, |, -32, 0, 7] 34 1861 147
2023/12/27 13:56:51 local.get 5        [*, |, *, |, |, -32, 0] 35 1862 147
2023/12/27 13:56:51 i32.const 127      [*, |, *, |, |, -32, 0, 0] 36 1863 147
2023/12/27 13:56:51 i32.and            [*, |, *, |, |, -32, 0, 0, 127] 37 1864 147
2023/12/27 13:56:51 i32.or             [*, |, *, |, |, -32, 0, 0] 38 1865 147
2023/12/27 13:56:51 i32.store8 [0, 15] [*, |, *, |, |, -32, 0] 39 1866 147
store at  -17
2023/12/27 13:56:51 block 64           [*, |, *, |, |] 40 1867 147
2023/12/27 13:56:51 local.get 0        [*, |, *, |, |, |] 41 1868 147
2023/12/27 13:56:51 i32.load [2, 8]    [*, |, *, |, |, |, 8016] 42 1869 147
2023/12/27 13:56:51 local.get 3        [*, |, *, |, |, |, -3] 43 1870 147
2023/12/27 13:56:51 i32.sub            [*, |, *, |, |, |, -3, -4] 44 1871 147
2023/12/27 13:56:51 i32.const 0        [*, |, *, |, |, |, 1] 45 1872 147
2023/12/27 13:56:51 i32.gt_s           [*, |, *, |, |, |, 1, 0] 46 1873 147
2023/12/27 13:56:51 br_if 0            [*, |, *, |, |, |, 1] 47 1874 147
2023/12/27 13:56:51 i32.const 0        [*, |, *, |, |, |] 48 1875 147
2023/12/27 13:56:51 i32.const 11396    [*, |, *, |, |, |, 0] 49 1876 147
2023/12/27 13:56:51 call 1             [*, |, *, |, |, |, 0, 11396] 50 1877 147
2023/12/27 13:56:51 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:51 local.get 0        [*, |, *, |, |, |] 51 1878 147
2023/12/27 13:56:51 i32.load [2, 4]    [*, |, *, |, |, |, 8016] 52 1879 147
2023/12/27 13:56:51 local.set 3        [*, |, *, |, |, |, -4] 53 1880 147
2023/12/27 13:56:51 end                [*, |, *, |, |, |] 54 1881 147
2023/12/27 13:56:51 local.get 3        [*, |, *, |, |] 55 1882 147
2023/12/27 13:56:51 local.get 2        [*, |, *, |, |, -4] 56 1883 147
2023/12/27 13:56:51 i32.const 15       [*, |, *, |, |, -4, -32] 57 1884 147
2023/12/27 13:56:51 i32.add            [*, |, *, |, |, -4, -32, 15] 58 1885 147
2023/12/27 13:56:51 i32.const 1        [*, |, *, |, |, -4, -17] 59 1886 147
2023/12/27 13:56:51 call 5             [*, |, *, |, |, -4, -17, 1] 60 1887 147
2023/12/27 13:56:51 call eth.hostfunc : memcpy 5
action: []
2023/12/27 13:56:51 drop               [*, |, *, |, |, 0] 61 1888 147
2023/12/27 13:56:51 local.get 0        [*, |, *, |, |] 62 1889 147
2023/12/27 13:56:51 local.get 0        [*, |, *, |, |, 8016] 63 1890 147
2023/12/27 13:56:51 i32.load [2, 4]    [*, |, *, |, |, 8016, 8016] 64 1891 147
2023/12/27 13:56:51 i32.const 1        [*, |, *, |, |, 8016, -4] 65 1892 147
2023/12/27 13:56:51 i32.add            [*, |, *, |, |, 8016, -4, 1] 66 1893 147
2023/12/27 13:56:51 local.tee 3        [*, |, *, |, |, 8016, -3] 67 1894 147
2023/12/27 13:56:51 i32.store [2, 4]   [*, |, *, |, |, 8016, -3] 68 1895 147
store at  8020
2023/12/27 13:56:51 local.get 6        [*, |, *, |, |] 69 1896 147
2023/12/27 13:56:51 br_if 0            [*, |, *, |, |, 0] 70 1897 147
2023/12/27 13:56:51 end                [*, |, *, |, |] 71 1898 147
2023/12/27 13:56:51 block 64           [*, |, *, |] 72 1899 147
2023/12/27 13:56:51 local.get 1        [*, |, *, |, |] 73 1900 147
2023/12/27 13:56:51 i32.load [2, 4]    [*, |, *, |, |, 56] 74 1901 147
2023/12/27 13:56:51 local.get 1        [*, |, *, |, |, 0] 75 1902 147
2023/12/27 13:56:51 i32.load8_u [0, 0] [*, |, *, |, |, 0, 56] 76 1903 147
2023/12/27 13:56:51 local.tee 5        [*, |, *, |, |, 0, 0] 77 1904 147
2023/12/27 13:56:51 i32.const 1        [*, |, *, |, |, 0, 0] 78 1905 147
2023/12/27 13:56:51 i32.shr_u          [*, |, *, |, |, 0, 0, 1] 79 1906 147
2023/12/27 13:56:51 local.get 5        [*, |, *, |, |, 0, 0] 80 1907 147
2023/12/27 13:56:51 i32.const 1        [*, |, *, |, |, 0, 0, 0] 81 1908 147
2023/12/27 13:56:51 i32.and            [*, |, *, |, |, 0, 0, 0, 1] 82 1909 147
2023/12/27 13:56:51 local.tee 6        [*, |, *, |, |, 0, 0, 0] 83 1910 147
2023/12/27 13:56:51 select             [*, |, *, |, |, 0, 0, 0] 84 1911 147
2023/12/27 13:56:51 local.tee 5        [*, |, *, |, |, 0] 85 1912 147
2023/12/27 13:56:51 i32.eqz            [*, |, *, |, |, 0] 86 1913 147
2023/12/27 13:56:51 br_if 0            [*, |, *, |, |, 1] 87 1914 147
2023/12/27 13:56:51 local.get 1        [*, |, *, |, |] 88 1915 147
2023/12/27 13:56:51 i32.load [2, 8]    [*, |, *, |, |, 56] 89 1916 147
2023/12/27 13:56:51 local.get 1        [*, |, *, |, |, 0] 90 1917 147
2023/12/27 13:56:51 i32.const 1        [*, |, *, |, |, 0, 56] 91 1918 147
2023/12/27 13:56:51 i32.add            [*, |, *, |, |, 0, 56, 1] 92 1919 147
2023/12/27 13:56:51 local.get 6        [*, |, *, |, |, 0, 57] 93 1920 147
2023/12/27 13:56:51 select             [*, |, *, |, |, 0, 57, 0] 94 1921 147
2023/12/27 13:56:51 local.set 6        [*, |, *, |, |, 57] 95 1922 147
2023/12/27 13:56:51 block 64           [*, |, *, |, |] 96 1923 147
2023/12/27 13:56:51 local.get 0        [*, |, *, |, |, |] 97 1924 147
2023/12/27 13:56:51 i32.load [2, 8]    [*, |, *, |, |, |, 8016] 98 1925 147
2023/12/27 13:56:51 local.get 3        [*, |, *, |, |, |, -3] 99 1926 147
2023/12/27 13:56:51 i32.sub            [*, |, *, |, |, |, -3, -3] 100 1927 147
2023/12/27 13:56:51 local.get 5        [*, |, *, |, |, |, 0] 101 1928 147
2023/12/27 13:56:51 i32.ge_s           [*, |, *, |, |, |, 0, 0] 102 1929 147
2023/12/27 13:56:51 br_if 0            [*, |, *, |, |, |, 1] 103 1930 147
2023/12/27 13:56:51 i32.const 0        [*, |, *, |, |, |] 104 1931 147
2023/12/27 13:56:51 i32.const 11396    [*, |, *, |, |, |, 0] 105 1932 147
2023/12/27 13:56:51 call 1             [*, |, *, |, |, |, 0, 11396] 106 1933 147
2023/12/27 13:56:51 call eth.hostfunc : eosio_assert 1
2023/12/27 13:56:51 local.get 0        [*, |, *, |, |, |] 107 1934 147
2023/12/27 13:56:51 i32.load [2, 4]    [*, |, *, |, |, |, 8016] 108 1935 147
2023/12/27 13:56:51 local.set 3        [*, |, *, |, |, |, -3] 109 1936 147
2023/12/27 13:56:51 end                [*, |, *, |, |, |] 110 1937 147
2023/12/27 13:56:51 local.get 3        [*, |, *, |, |] 111 1938 147
2023/12/27 13:56:51 local.get 6        [*, |, *, |, |, -3] 112 1939 147
2023/12/27 13:56:51 local.get 5        [*, |, *, |, |, -3, 57] 113 1940 147
2023/12/27 13:56:51 call 5             [*, |, *, |, |, -3, 57, 0] 114 1941 147
2023/12/27 13:56:51 call eth.hostfunc : memcpy 5
action: []
2023/12/27 13:56:51 drop               [*, |, *, |, |, 0] 115 1942 147
2023/12/27 13:56:51 local.get 0        [*, |, *, |, |] 116 1943 147
2023/12/27 13:56:51 local.get 0        [*, |, *, |, |, 8016] 117 1944 147
2023/12/27 13:56:51 i32.load [2, 4]    [*, |, *, |, |, 8016, 8016] 118 1945 147
2023/12/27 13:56:51 local.get 5        [*, |, *, |, |, 8016, -3] 119 1946 147
2023/12/27 13:56:51 i32.add            [*, |, *, |, |, 8016, -3, 0] 120 1947 147
2023/12/27 13:56:51 i32.store [2, 4]   [*, |, *, |, |, 8016, -3] 121 1948 147
store at  8020
2023/12/27 13:56:51 end                [*, |, *, |, |] 122 1949 147
2023/12/27 13:56:51 local.get 2        [*, |, *, |] 123 1950 147
2023/12/27 13:56:51 i32.const 16       [*, |, *, |, -32] 124 1951 147
2023/12/27 13:56:51 i32.add            [*, |, *, |, -32, 16] 125 1952 147
2023/12/27 13:56:51 global.set 0       [*, |, *, |, -16] 126 1953 147
2023/12/27 13:56:51 local.get 0        [*, |, *, |] 127 1954 147
2023/12/27 13:56:51 end                [*, |, *, |, 8016] 128 1955 147
break of path_abort or out of scope
exit func: $invalid 147 -> 
2023/12/27 13:56:51 [*, |, *]
2023/12/27 13:56:51 return func $invalid 147 -> 
2023/12/27 13:56:51 ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$revert 146 -> ']
2023/12/27 13:56:51 drop               [*, |, 8016] 62 1957 146
2023/12/27 13:56:51 end                [*, |] 63 1958 146
break of path_abort or out of scope
exit func: $revert 146 -> 
2023/12/27 13:56:51 [*]
2023/12/27 13:56:51 return func $revert 146 -> 
2023/12/27 13:56:51 ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ']
2023/12/27 13:56:52 local.get 1        [] 149 1960 142
2023/12/27 13:56:52 local.get 4        [0] 150 1961 142
2023/12/27 13:56:52 i64.load [3, 8]    [0, 8144] 151 1962 142
2023/12/27 13:56:52 i64.const -6149286337619951616 [0, 23491491257458688] 152 1963 142
2023/12/27 13:56:52 local.get 0        [0, 23491491257458688, -6149286337619951616] 153 1964 142
2023/12/27 13:56:52 i32.load [2, 8]    [0, 23491491257458688, -6149286337619951616, 8080] 154 1965 142
2023/12/27 13:56:52 i64.load [3, 0]    [0, 23491491257458688, -6149286337619951616, 8104] 155 1966 142
2023/12/27 13:56:52 local.get 1        [0, 23491491257458688, -6149286337619951616, i64_input_1] 156 1967 142
2023/12/27 13:56:52 i64.load [3, 0]    [0, 23491491257458688, -6149286337619951616, i64_input_1, 0] 157 1968 142
2023/12/27 13:56:52 local.tee 11       [0, 23491491257458688, -6149286337619951616, i64_input_1, i64_input_1] 158 1969 142
2023/12/27 13:56:52 local.get 2        [0, 23491491257458688, -6149286337619951616, i64_input_1, i64_input_1] 159 1970 142
2023/12/27 13:56:52 local.get 10       [0, 23491491257458688, -6149286337619951616, i64_input_1, i64_input_1, -16] 160 1971 142
2023/12/27 13:56:52 call 33            [0, 23491491257458688, -6149286337619951616, i64_input_1, i64_input_1, -16, 13] 161 1972 142
2023/12/27 13:56:52 call eth.hostfunc : db_store_i64 33
database op
db_store_i64
[23491491257458688, -6149286337619951616, i64_input_1, i64_input_1, -16, 13]
action: ['SensitiveOp()']
2023/12/27 13:56:53 i32.store [2, 72]  [0, 0] 162 1973 142
store at  72
2023/12/27 13:56:54 block 64           [] 163 1974 142
2023/12/27 13:56:54 local.get 10       [|] 164 1975 142
2023/12/27 13:56:54 i32.const 513      [|, 13] 165 1976 142
2023/12/27 13:56:54 i32.lt_u           [|, 13, 513] 166 1977 142
2023/12/27 13:56:54 br_if 0            [|, 1] 167 1978 142
2023/12/27 13:56:54 local.get 2        [|] 168 1979 142
2023/12/27 13:56:54 call 40            [|, -16] 169 1980 142
address:40
2023/12/27 13:56:54 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ', '$mul_128x128_256 40 -> '] 
2023/12/27 13:56:54 end                [|, *, |] 0 1981 40
break of path_abort or out of scope
exit func: $mul_128x128_256 40 -> 
2023/12/27 13:56:54 [|, *]
2023/12/27 13:56:54 return func $mul_128x128_256 40 -> 
2023/12/27 13:56:54 ['$log0 133 -> ', '$log4 137 -> ', '$staticcall 142 -> ']
2023/12/27 13:56:56 end                [|] 170 1983 142
2023/12/27 13:56:56 block 64           [] 171 1984 142
2023/12/27 13:56:56 local.get 11       [|] 172 1985 142
2023/12/27 13:56:57 local.get 4        [|, i64_input_1] 173 1986 142
2023/12/27 13:56:57 i64.load [3, 16]   [|, i64_input_1, 8144] 174 1987 142
2023/12/27 13:56:57 i64.lt_u           [|, i64_input_1, 72057594037927935] 175 1988 142
2023/12/27 13:56:57 br_if 0            [|, If(ULE(72057594037927935, i64_input_1), 0, 1)] 176 1989 142
2023/12/27 13:56:57 left branch (142 176: br_if 0)
2023/12/27 13:57:00 local.get 4        [|] 177 1990 142
2023/12/27 13:57:00 i64.const -2       [|, 8144] 178 1991 142
2023/12/27 13:57:00 local.get 11       [|, 8144, -2] 179 1992 142
2023/12/27 13:57:00 i64.const 1        [|, 8144, -2, i64_input_1] 180 1993 142
2023/12/27 13:57:00 i64.add            [|, 8144, -2, i64_input_1, 1] 181 1994 142
overflow vulnerability find
2023/12/27 13:57:00 local.get 11       [|, 8144, -2, 1 + i64_input_1] 182 1995 142
2023/12/27 13:57:00 i64.const -3       [|, 8144, -2, 1 + i64_input_1, i64_input_1] 183 1996 142
2023/12/27 13:57:00 i64.gt_u           [|, 8144, -2, 1 + i64_input_1, i64_input_1, -3] 184 1997 142
2023/12/27 13:57:00 select             [|, 8144, -2, 1 + i64_input_1, If(ULE(i64_input_1, 18446744073709551613), 0, 1)] 185 1998 142
2023/12/27 13:57:00 i64.store [3, 16]  [|, 8144, If(If(ULE(i64_input_1, 18446744073709551613), 0, 1) == 0,
   1 + i64_input_1,
   18446744073709551614)] 186 1999 142
store at  8160
2023/12/27 13:57:00 end                [|] 187 2000 142
2023/12/27 13:57:00 local.get 3        [] 188 2001 142
2023/12/27 13:57:00 i32.const 48       [8016] 189 2002 142
2023/12/27 13:57:00 i32.add            [8016, 48] 190 2003 142
2023/12/27 13:57:00 global.set 0       [8064] 191 2004 142
2023/12/27 13:57:00 end                [] 192 2005 142
break of path_abort or out of scope
len_solver_scope: 0
after pop: 0
2023/12/27 13:57:03 right branch (142 176: br_if 0)
[If(ULE(72057594037927935, i64_input_1), 0, 1) != 0]
2023/12/27 13:57:07 local.get 3        [] 188 2007 142
2023/12/27 13:57:07 i32.const 48       [8016] 189 2008 142
2023/12/27 13:57:07 i32.add            [8016, 48] 190 2009 142
2023/12/27 13:57:07 global.set 0       [8064] 191 2010 142
2023/12/27 13:57:07 end                [] 192 2011 142
break of path_abort or out of scope
exit func: $staticcall 142 -> 
2023/12/27 13:57:10 [*]
2023/12/27 13:57:10 return func $staticcall 142 -> 
2023/12/27 13:57:10 ['$log0 133 -> ', '$log4 137 -> ']
2023/12/27 13:57:28 local.get 4        [] 66 2013 137
2023/12/27 13:57:28 local.get 3        [8064] 67 2014 137
2023/12/27 13:57:28 i32.store [2, 32]  [8064, 0] 68 2015 137
store at  8096
2023/12/27 13:57:29 local.get 4        [] 69 2016 137
2023/12/27 13:57:29 local.get 3        [8064] 70 2017 137
2023/12/27 13:57:30 i64.load [3, 0]    [8064, 0] 71 2018 137
2023/12/27 13:57:30 local.tee 2        [8064, i64_input_1] 72 2019 137
2023/12/27 13:57:30 i64.store [3, 16]  [8064, i64_input_1] 73 2020 137
store at  8080
2023/12/27 13:57:31 local.get 4        [] 74 2021 137
2023/12/27 13:57:31 local.get 3        [8064] 75 2022 137
2023/12/27 13:57:31 i32.load [2, 72]   [8064, 0] 76 2023 137
2023/12/27 13:57:32 local.tee 5        [8064, 0] 77 2024 137
2023/12/27 13:57:32 i32.store [2, 12]  [8064, 0] 78 2025 137
store at  8076
2023/12/27 13:57:32 block 64           [] 79 2026 137
2023/12/27 13:57:33 block 64           [|] 80 2027 137
2023/12/27 13:57:33 local.get 1        [|, |] 81 2028 137
2023/12/27 13:57:34 i32.const 28       [|, |, 8144] 82 2029 137
2023/12/27 13:57:34 i32.add            [|, |, 8144, 28] 83 2030 137
2023/12/27 13:57:34 i32.load [2, 0]    [|, |, 8172] 84 2031 137
2023/12/27 13:57:35 local.tee 6        [|, |, 0] 85 2032 137
2023/12/27 13:57:35 local.get 1        [|, |, 0] 86 2033 137
2023/12/27 13:57:35 i32.const 32       [|, |, 0, 8144] 87 2034 137
2023/12/27 13:57:36 i32.add            [|, |, 0, 8144, 32] 88 2035 137
2023/12/27 13:57:36 i32.load [2, 0]    [|, |, 0, 8176] 89 2036 137
2023/12/27 13:57:36 i32.ge_u           [|, |, 0, 0] 90 2037 137
2023/12/27 13:57:37 br_if 0            [|, |, 1] 91 2038 137
这里分叉了
2023/12/27 13:57:37 local.get 6        [|, |] 92 2039 137
2023/12/27 13:57:38 local.get 5        [|, |, 0] 93 2040 137
2023/12/27 13:57:38 i32.store [2, 16]  [|, |, 0, 0] 94 2041 137
store at  16
2023/12/27 13:57:38 local.get 6        [|, |] 95 2042 137
2023/12/27 13:57:39 local.get 2        [|, |, 0] 96 2043 137
2023/12/27 13:57:39 i64.store [3, 8]   [|, |, 0, i64_input_1] 97 2044 137
store at  8
2023/12/27 13:57:39 local.get 4        [|, |] 98 2045 137
2023/12/27 13:57:40 i32.const 0        [|, |, 8064] 99 2046 137
2023/12/27 13:57:40 i32.store [2, 32]  [|, |, 8064, 0] 100 2047 137
store at  8096
2023/12/27 13:57:40 local.get 6        [|, |] 101 2048 137
2023/12/27 13:57:41 local.get 3        [|, |, 0] 102 2049 137
2023/12/27 13:57:41 i32.store [2, 0]   [|, |, 0, 0] 103 2050 137
store at  0
2023/12/27 13:57:41 local.get 1        [|, |] 104 2051 137
2023/12/27 13:57:42 local.get 6        [|, |, 8144] 105 2052 137
2023/12/27 13:57:42 i32.const 24       [|, |, 8144, 0] 106 2053 137
2023/12/27 13:57:43 i32.add            [|, |, 8144, 0, 24] 107 2054 137
2023/12/27 13:57:43 i32.store [2, 28]  [|, |, 8144, 24] 108 2055 137
store at  8172
2023/12/27 13:57:43 br 1               [|, |] 109 2056 137
2023/12/27 13:57:44 end                [|, |] 110 2057 137
2023/12/27 13:57:44 local.get 1        [|] 111 2058 137
2023/12/27 13:57:44 i32.const 24       [|, 8144] 112 2059 137
2023/12/27 13:57:45 i32.add            [|, 8144, 24] 113 2060 137
2023/12/27 13:57:45 local.get 4        [|, 8168] 114 2061 137
2023/12/27 13:57:45 i32.const 32       [|, 8168, 8064] 115 2062 137
2023/12/27 13:57:46 i32.add            [|, 8168, 8064, 32] 116 2063 137
2023/12/27 13:57:46 local.get 4        [|, 8168, 8096] 117 2064 137
2023/12/27 13:57:47 i32.const 16       [|, 8168, 8096, 8064] 118 2065 137
2023/12/27 13:57:47 i32.add            [|, 8168, 8096, 8064, 16] 119 2066 137
2023/12/27 13:57:47 local.get 4        [|, 8168, 8096, 8080] 120 2067 137
2023/12/27 13:57:48 i32.const 12       [|, 8168, 8096, 8080, 8064] 121 2068 137
2023/12/27 13:57:48 i32.add            [|, 8168, 8096, 8080, 8064, 12] 122 2069 137
2023/12/27 13:57:48 call 143           [|, 8168, 8096, 8080, 8076] 123 2070 137
address:143
2023/12/27 13:57:48 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$create2 143 -> '] 
2023/12/27 13:57:48 block 64           [|, *, |] 0 2071 143
2023/12/27 13:57:48 block 64           [|, *, |, |] 1 2072 143
2023/12/27 13:57:48 block 64           [|, *, |, |, |] 2 2073 143
2023/12/27 13:57:48 local.get 0        [|, *, |, |, |, |] 3 2074 143
2023/12/27 13:57:48 i32.load [2, 4]    [|, *, |, |, |, |, 8168] 4 2075 143
2023/12/27 13:57:48 local.get 0        [|, *, |, |, |, |, 24] 5 2076 143
2023/12/27 13:57:48 i32.load [2, 0]    [|, *, |, |, |, |, 24, 8168] 6 2077 143
2023/12/27 13:57:48 local.tee 4        [|, *, |, |, |, |, 24, 0] 7 2078 143
2023/12/27 13:57:48 i32.sub            [|, *, |, |, |, |, 24, 0] 8 2079 143
2023/12/27 13:57:48 i32.const 24       [|, *, |, |, |, |, 24] 9 2080 143
2023/12/27 13:57:48 i32.div_s          [|, *, |, |, |, |, 24, 24] 10 2081 143
2023/12/27 13:57:48 local.tee 5        [|, *, |, |, |, |, 1] 11 2082 143
2023/12/27 13:57:48 i32.const 1        [|, *, |, |, |, |, 1] 12 2083 143
2023/12/27 13:57:48 i32.add            [|, *, |, |, |, |, 1, 1] 13 2084 143
2023/12/27 13:57:48 local.tee 6        [|, *, |, |, |, |, 2] 14 2085 143
2023/12/27 13:57:48 i32.const 178956971 [|, *, |, |, |, |, 2] 15 2086 143
2023/12/27 13:57:48 i32.ge_u           [|, *, |, |, |, |, 2, 178956971] 16 2087 143
2023/12/27 13:57:48 br_if 0            [|, *, |, |, |, |, 0] 17 2088 143
2023/12/27 13:57:48 i32.const 178956970 [|, *, |, |, |, |] 18 2089 143
2023/12/27 13:57:48 local.set 7        [|, *, |, |, |, |, 178956970] 19 2090 143
uVar2
2023/12/27 13:57:48 block 64           [|, *, |, |, |, |] 20 2091 143
2023/12/27 13:57:48 block 64           [|, *, |, |, |, |, |] 21 2092 143
2023/12/27 13:57:48 local.get 0        [|, *, |, |, |, |, |, |] 22 2093 143
2023/12/27 13:57:48 i32.load [2, 8]    [|, *, |, |, |, |, |, |, 8168] 23 2094 143
2023/12/27 13:57:48 local.get 4        [|, *, |, |, |, |, |, |, 0] 24 2095 143
2023/12/27 13:57:48 i32.sub            [|, *, |, |, |, |, |, |, 0, 0] 25 2096 143
2023/12/27 13:57:48 i32.const 24       [|, *, |, |, |, |, |, |, 0] 26 2097 143
2023/12/27 13:57:48 i32.div_s          [|, *, |, |, |, |, |, |, 0, 24] 27 2098 143
2023/12/27 13:57:48 local.tee 4        [|, *, |, |, |, |, |, |, 0] 28 2099 143
uVar7
2023/12/27 13:57:48 i32.const 89478484 [|, *, |, |, |, |, |, |, 0] 29 2100 143
2023/12/27 13:57:48 i32.gt_u           [|, *, |, |, |, |, |, |, 0, 89478484] 30 2101 143
2023/12/27 13:57:48 br_if 0            [|, *, |, |, |, |, |, |, 0] 31 2102 143
2023/12/27 13:57:48 local.get 6        [|, *, |, |, |, |, |, |] 32 2103 143
2023/12/27 13:57:48 local.get 4        [|, *, |, |, |, |, |, |, 2] 33 2104 143
2023/12/27 13:57:48 i32.const 1        [|, *, |, |, |, |, |, |, 2, 0] 34 2105 143
2023/12/27 13:57:48 i32.shl            [|, *, |, |, |, |, |, |, 2, 0, 1] 35 2106 143
2023/12/27 13:57:48 local.tee 4        [|, *, |, |, |, |, |, |, 2, 0] 36 2107 143
2023/12/27 13:57:48 local.get 4        [|, *, |, |, |, |, |, |, 2, 0] 37 2108 143
2023/12/27 13:57:48 local.get 6        [|, *, |, |, |, |, |, |, 2, 0, 0] 38 2109 143
2023/12/27 13:57:48 i32.lt_u           [|, *, |, |, |, |, |, |, 2, 0, 0, 2] 39 2110 143
2023/12/27 13:57:48 select             [|, *, |, |, |, |, |, |, 2, 0, 1] 40 2111 143
2023/12/27 13:57:48 local.tee 7        [|, *, |, |, |, |, |, |, 2] 41 2112 143
2023/12/27 13:57:48 br_if 0            [|, *, |, |, |, |, |, |, 2] 42 2113 143
这个分支不一样
2023/12/27 13:57:48 i32.const 0        [|, *, |, |, |, |, |, |] 43 2114 143
2023/12/27 13:57:48 local.set 7        [|, *, |, |, |, |, |, |, 0] 44 2115 143
2023/12/27 13:57:48 i32.const 0        [|, *, |, |, |, |, |, |] 45 2116 143
2023/12/27 13:57:48 local.set 4        [|, *, |, |, |, |, |, |, 0] 46 2117 143
2023/12/27 13:57:48 br 1               [|, *, |, |, |, |, |, |] 47 2118 143
2023/12/27 13:57:48 end                [|, *, |, |, |, |, |, |] 48 2119 143
2023/12/27 13:57:48 local.get 7        [|, *, |, |, |, |, |] 49 2120 143
uVar2
2023/12/27 13:57:48 i32.const 24       [|, *, |, |, |, |, |, 0] 50 2121 143
2023/12/27 13:57:48 i32.mul            [|, *, |, |, |, |, |, 0, 24] 51 2122 143
2023/12/27 13:57:48 call 45            [|, *, |, |, |, |, |, 0] 52 2123 143
address:45
2023/12/27 13:57:48 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$create2 143 -> ', '$mod 45 -> '] 
2023/12/27 13:57:48 local.get 0        [|, *, |, |, |, |, |, *, |] 0 2124 45
2023/12/27 13:57:48 i32.const 1        [|, *, |, |, |, |, |, *, |, 0] 1 2125 45
2023/12/27 13:57:48 local.get 0        [|, *, |, |, |, |, |, *, |, 0, 1] 2 2126 45
2023/12/27 13:57:48 select             [|, *, |, |, |, |, |, *, |, 0, 1, 0] 3 2127 45
2023/12/27 13:57:48 local.set 1        [|, *, |, |, |, |, |, *, |, 1] 4 2128 45
2023/12/27 13:57:48 block 64           [|, *, |, |, |, |, |, *, |] 5 2129 45
2023/12/27 13:57:48 loop 64            [|, *, |, |, |, |, |, *, |, |] 6 2130 45
2023/12/27 13:57:48 local.get 1        [|, *, |, |, |, |, |, *, |, |, |] 7 2131 45
2023/12/27 13:57:48 call 38            [|, *, |, |, |, |, |, *, |, |, |, 1] 8 2132 45
address:38
2023/12/27 13:57:48 wasmfunc call: ['$log0 133 -> ', '$log4 137 -> ', '$create2 143 -> ', '$mod 45 -> ', '$sub512 38 -> '] 
2023/12/27 13:57:48 block 64           [|, *, |, |, |, |, |, *, |, |, |, *, |] 0 2133 38
2023/12/27 13:57:48 local.get 0        [|, *, |, |, |, |, |, *, |, |, |, *, |, |] 1 2134 38
2023/12/27 13:57:48 br_if 0            [|, *, |, |, |, |, |, *, |, |, |, *, |, |, 1] 2 2135 38
2023/12/27 13:57:48 i32.const 0        [|, *, |, |, |, |, |, *, |, |, |, *, |, |] 3 2136 38
2023/12/27 13:57:48 return             [|, *, |, |, |, |, |, *, |, |, |, *, |, |, 0] 4 2137 38
exit func: $sub512 38 -> 
2023/12/27 13:57:48 [|, *, |, |, |, |, |, *, |, |, |, *]
2023/12/27 13:57:48 return func $sub512 38 -> 
2023/12/27 13:57:48 ['$log0 133 -> ', '$log4 137 -> ', '$create2 143 -> ', '$mod 45 -> ']
2023/12/27 13:57:48 local.tee 0        [|, *, |, |, |, |, |, *, |, |, |, 0] 9 2138 45
2023/12/27 13:57:48 br_if 1            [|, *, |, |, |, |, |, *, |, |, |, 0] 10 2139 45
2023/12/27 13:57:48 i32.const 0        [|, *, |, |, |, |, |, *, |, |, |] 11 2140 45
2023/12/27 13:57:48 local.set 0        [|, *, |, |, |, |, |, *, |, |, |, 0] 12 2141 45
2023/12/27 13:57:48 i32.const 0        [|, *, |, |, |, |, |, *, |, |, |] 13 2142 45
2023/12/27 13:57:48 i32.load [2, 8332] [|, *, |, |, |, |, |, *, |, |, |, 0] 14 2143 45
2023/12/27 13:57:48 local.tee 2        [|, *, |, |, |, |, |, *, |, |, |, 0] 15 2144 45
2023/12/27 13:57:48 i32.eqz            [|, *, |, |, |, |, |, *, |, |, |, 0] 16 2145 45
2023/12/27 13:57:48 br_if 1            [|, *, |, |, |, |, |, *, |, |, |, 1] 17 2146 45
2023/12/27 13:57:48 local.get 2        [|, *, |, |, |, |, |, *, |, |, |] 18 2147 45
2023/12/27 13:57:48 call_indirect [0, 0] [|, *, |, |, |, |, |, *, |, |, |, 0] 19 2148 45
call_type:  ()
2023/12/27 13:57:48 Invalid function index in table.
test idx: 6
tab: [None, 74, 90, 98, 100, 96, 122]
2023/12/27 13:57:48 Invalid function index in table.
test idx: 4
tab: [None, 74, 90, 98, 100, 96, 122]
2023/12/27 13:57:48 Invalid function index in table.
test idx: 0
tab: [None, 74, 90, 98, 100, 96, 122]
2023/12/27 13:57:48 Invalid function index in table.
test idx: 5
tab: [None, 74, 90, 98, 100, 96, 122]
2023/12/27 13:57:48 Invalid function index in table.
test idx: 1
tab: [None, 74, 90, 98, 100, 96, 122]
2023/12/27 13:57:48 Invalid function index in table.
test idx: 3
tab: [None, 74, 90, 98, 100, 96, 122]
2023/12/27 13:57:48 Invalid function index in table.
test idx: 3
tab: [None, 74, 90, 98, 100, 96, 122]
2023/12/27 13:57:48 Invalid function index in table.
test idx: 4
tab: [None, 74, 90, 98, 100, 96, 122]
2023/12/27 13:57:48 Invalid function index in table.
test idx: 0
tab: [None, 74, 90, 98, 100, 96, 122]
2023/12/27 13:57:48 Invalid function index in table.
test idx: 3
tab: [None, 74, 90, 98, 100, 96, 122]
2023/12/27 13:57:48 Invalid function index in table.
test idx: 5
tab: [None, 74, 90, 98, 100, 96, 122]
no useable table idx
exit func: $mod 45 -> 
2023/12/27 13:57:48 [|, *, |, |, |, |, |, *, |, |]
[|, *, |, |, |, |, |, *, |] 45
[|, *, |, |, |, |, |, *] 45
2023/12/27 13:57:48 return func $mod 45 -> 
2023/12/27 13:57:48 ['$log0 133 -> ', '$log4 137 -> ', '$create2 143 -> ']
2023/12/27 13:57:48 local.set 4        [|, *, |, |, |, |, |, |] 53 2149 143
2023/12/27 13:57:48 end                [|, *, |, |, |, |, |] 54 2150 143
2023/12/27 13:57:48 Exception 'Label' object has no attribute 'valtype'
{"user": "addressbook"}
cleos push action hello erase '{"user": "addressbook"}' -p hello@active
[-] executeCommand:: cleos push action hello erase '{"user": "addressbook"}' -p hello@active
[-] executeCommand:: 1 error 2023-12-27T13:57:52.380 cleos     main.cpp:3941                 main                 ] Failed with error: unspecified (0)
unknown key (eosio::chain::name): hello

[-] logAnalyzer.processLog()::  ['log_2.txt', 'log_1.txt']
[-] _processLog: 3242 [76697868, 'call', [131, 233, 133, 8008, 128262144, 844330339, 7976, 7960, 7944, 7928, 7912], ['I32', 'I64', 'I32', 'I32', 'I32', 'I32', 'I32']] [175, 'begin_function', [133, 4294967295], []] [180, 'end_function', [37, 50], []]
new logs: []
2023/12/27 13:57:52 use time: 73.99350385693833
